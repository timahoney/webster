<?xml version="1.0"?>
<interfaces>
  <interface id="Attr" name="Attr" description="&#10;    &lt;p&gt;The &lt;code&gt;Attr&lt;/code&gt; interface represents an attribute in an&#10;      &lt;code&gt;Element&lt;/code&gt; object. Typically the allowable values for the&#10;      attribute are defined in a schema associated with the document.&lt;/p&gt;&#10;&#10;    &lt;p&gt;&lt;code&gt;Attr&lt;/code&gt; objects inherit the &lt;code&gt;Node&lt;/code&gt; interface, but&#10;      since they are not actually child nodes of the element they describe, the&#10;      DOM does not consider them part of the document tree.  Thus, the&#10;      &lt;code&gt;Node&lt;/code&gt; attributes &lt;code&gt;parentNode&lt;/code&gt;,&#10;      &lt;code&gt;previousSibling&lt;/code&gt;, and &lt;code&gt;nextSibling&lt;/code&gt; have a&#10;      &lt;code&gt;null&lt;/code&gt; value for &lt;code&gt;Attr&lt;/code&gt; objects. The DOM takes the&#10;      view that attributes are properties of elements rather than having a&#10;      separate identity from the elements they are associated with; this should&#10;      make it more efficient to implement such features as default attributes&#10;      associated with all elements of a given type.  Furthermore,&#10;      &lt;code&gt;Attr&lt;/code&gt; nodes may not be immediate children of a&#10;      &lt;code&gt;DocumentFragment&lt;/code&gt;. However, they can be associated with&#10;      &lt;code&gt;Element&lt;/code&gt; nodes contained within a&#10;      &lt;code&gt;DocumentFragment&lt;/code&gt;. In short, users and implementors of the&#10;      DOM need to be aware that &lt;code&gt;Attr&lt;/code&gt; nodes have some things in&#10;      common with other objects inheriting the &lt;code&gt;Node&lt;/code&gt; interface, but&#10;      they also are quite distinct.&lt;/p&gt;&#10;&#10;    &lt;p&gt;The attribute's effective value is determined as follows: if this&#10;      attribute has been explicitly assigned any value, that value is the&#10;      attribute's effective value; otherwise, if there is a declaration for&#10;      this attribute, and that declaration includes a default value, then that&#10;      default value is the attribute's effective value; otherwise, the&#10;      attribute does not exist on this element in the structure model until it&#10;      has been explicitly added.  Note that the &lt;code&gt;Node.nodeValue&lt;/code&gt;&#10;      attribute on the &lt;code&gt;Attr&lt;/code&gt; instance can also be used to retrieve&#10;      the string version of the attribute's value(s).&lt;/p&gt;&#10; &#10;    &lt;p&gt;&#10;      If the attribute was not explicitly given a value in the instance&#10;      document but has a default value provided by the schema associated&#10;      with the document, an attribute node will be created with&#10;      &lt;code&gt;specified&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt;. Removing&#10;      attribute nodes for which a default value is defined in the schema&#10;      generates a new attribute node with the default value and&#10;      &lt;code&gt;specified&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt;. If validation&#10;      occurred while invoking &lt;code&gt;Document.normalizeDocument()&lt;/code&gt;,&#10;      attribute nodes with &lt;code&gt;specified&lt;/code&gt; equals to&#10;      &lt;code&gt;false&lt;/code&gt; are recomputed according to the default&#10;      attribute values provided by the schema. If no default value is&#10;      associate with this attribute in the schema, the attribute node is&#10;      discarded.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;In XML, where the value of an attribute can contain entity references,&#10;      the child nodes of the &lt;code&gt;Attr&lt;/code&gt; node may be either&#10;      &lt;code&gt;Text&lt;/code&gt; or &lt;code&gt;EntityReference&lt;/code&gt; nodes (when these are&#10;      in use; see the description of &lt;code&gt;EntityReference&lt;/code&gt; for&#10;      discussion).&#10;    &lt;/p&gt;&#10;    &lt;p&gt;The DOM Core represents all attribute values as simple strings,&#10;    even if the DTD or schema associated with the document declares&#10;    them of some specific type such as &lt;termref def=&quot;dt-tokenized&quot;&gt;tokenized&lt;/termref&gt;.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;The way attribute value normalization is performed by the DOM&#10;    implementation depends on how much the implementation knows about&#10;    the schema in use. Typically, the &lt;code&gt;value&lt;/code&gt; and&#10;    &lt;code&gt;nodeValue&lt;/code&gt; attributes of an &lt;code&gt;Attr&lt;/code&gt; node&#10;    initially returns the normalized value given by the parser. It is&#10;    also the case after &lt;code&gt;Document.normalizeDocument()&lt;/code&gt; is&#10;    called (assuming the right options have been set). But this may not&#10;    be the case after mutation, independently of whether the mutation is&#10;    performed by setting the string value directly or by changing the&#10;    &lt;code&gt;Attr&lt;/code&gt; child nodes. In particular, this is true when&#10;    &lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#dt-charref&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;character&#10;&#9;references&lt;/xspecref&gt; are involved,&#10;    given that they are not represented in the DOM and they impact&#10;    attribute value normalization. On the other hand, if the&#10;    implementation knows about the schema in use when the attribute&#10;    value is changed, and it is of a different type than CDATA, it may&#10;    normalize it again at that time. This is especially true of&#10;    specialized DOM implementations, such as SVG DOM implementations,&#10;    which store attribute values in an internal form different from a&#10;    string.&lt;/p&gt;&#10;&#10;    &lt;p&gt;The following table gives some examples of&#10;    the relations between the attribute value in the original document&#10;    (parsed attribute), the value as exposed in the DOM, and the&#10;    serialization of the value:&#10;    &lt;/p&gt;&#10;    &lt;table cellpadding=&quot;3&quot; border=&quot;1&quot; summary=&quot;Examples of differences between a parsed attribute,     its DOM representation, and its serialization&quot;&gt;&#10;      &lt;tbody&gt;&#10;&#9;&lt;tr&gt;&#10;&#9;  &lt;th rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;Examples&lt;/th&gt;&#10;&#9;  &lt;th rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;Parsed attribute value&lt;/th&gt;&#10;&#9;  &lt;th rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;Initial &lt;code&gt;Attr.value&lt;/code&gt;&#10;&lt;/th&gt;&#10;&#9;  &lt;th rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;Serialized attribute value&lt;/th&gt;&#10;&#9;&lt;/tr&gt;&#10;&#9;&lt;tr&gt;&#10;&#9;  &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;Character reference&lt;/td&gt;&#10;&#9;  &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;eg xml:space=&quot;preserve&quot;&gt;&quot;x&amp;amp;#178;=5&quot;&lt;/eg&gt;&lt;/td&gt;&#10;&#9;  &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;eg xml:space=&quot;preserve&quot;&gt;&quot;x&amp;#178;=5&quot;&lt;/eg&gt;&lt;/td&gt;&#10;&#9;  &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;eg xml:space=&quot;preserve&quot;&gt;&quot;x&amp;amp;#178;=5&quot;&lt;/eg&gt;&lt;/td&gt;&#10;&#9;&lt;/tr&gt;&#10;&#9;&lt;tr&gt;&#10;&#9;  &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;Built-in character entity&lt;/td&gt;&#10;&#9;  &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;eg xml:space=&quot;preserve&quot;&gt;&quot;y&amp;amp;lt;6&quot;&lt;/eg&gt;&lt;/td&gt;&#10;&#9;  &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;eg xml:space=&quot;preserve&quot;&gt;&quot;y&amp;lt;6&quot;&lt;/eg&gt;&lt;/td&gt;&#10;&#9;  &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;eg xml:space=&quot;preserve&quot;&gt;&quot;y&amp;amp;lt;6&quot;&lt;/eg&gt;&lt;/td&gt;&#10;&#9;&lt;/tr&gt;&#10;&#9;&lt;tr&gt;&#10;&#9;  &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;Literal newline between&lt;/td&gt;&#10;&#9;  &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;eg xml:space=&quot;preserve&quot;&gt;&quot;x=5&amp;amp;#10;y=6&quot;&lt;/eg&gt;&lt;/td&gt;&#10;&#9;  &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;eg xml:space=&quot;preserve&quot;&gt;&quot;x=5&#10;y=6&quot;&lt;/eg&gt;&lt;/td&gt;&#10;&#9;  &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;eg xml:space=&quot;preserve&quot;&gt;&quot;x=5&amp;amp;#10;y=6&quot;&lt;/eg&gt;&lt;/td&gt;&#10;&#9;&lt;/tr&gt;&#10;&#9;&lt;tr&gt;&#10;&#9;  &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;Normalized newline between&lt;/td&gt;&#10;&#9;  &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;eg xml:space=&quot;preserve&quot;&gt;&quot;x=5&#10;y=6&quot;&lt;/eg&gt;&lt;/td&gt;&#10;      &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;eg xml:space=&quot;preserve&quot;&gt;&quot;x=5 y=6&quot;&lt;/eg&gt;&lt;/td&gt;&#10;      &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;eg xml:space=&quot;preserve&quot;&gt;&quot;x=5 y=6&quot;&lt;/eg&gt;&lt;/td&gt;&#10;    &lt;/tr&gt;&#10;    &lt;tr&gt;&#10;&#9;  &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;Entity &lt;code&gt;e&lt;/code&gt; with literal newline&lt;/td&gt;&#10;&#9;  &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;eg xml:space=&quot;preserve&quot;&gt;&amp;lt;!ENTITY e&#10;'...&amp;amp;#10;...'&amp;gt;&#10;[...]&amp;gt;&#10;&quot;x=5&amp;amp;e;y=6&quot;&lt;/eg&gt;&lt;/td&gt;&#10;&#9;  &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;emph&gt;Dependent on Implementation and Load Options&lt;/emph&gt;&lt;/td&gt;&#10;&#9;  &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;emph&gt;Dependent on Implementation and Load/Save Options&lt;/emph&gt;&lt;/td&gt;&#10;&#9;&lt;/tr&gt;&#10;      &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;  " parent_id="Node">
    <methods/>
    <properties>
      <property name="name" id="name" type="DOMString" description="&#10;      &lt;p&gt;Returns the name of this attribute. If&#10;&#9;&lt;code&gt;Node.localName&lt;/code&gt; is different from &lt;code&gt;null&lt;/code&gt;, this&#10;      attribute is a &lt;termref def=&quot;dt-qualifiedname&quot;&gt;qualified name&lt;/termref&gt;.&lt;/p&gt;&#10;    " readonly="true" owner_id="Attr"/>
      <property name="specified" id="specified" type="boolean" description="&#10;      &lt;p&gt;&#10;&#9;&lt;code&gt;True&lt;/code&gt; if this attribute was explicitly given a value&#10;&#9;in the instance document, &lt;code&gt;false&lt;/code&gt; otherwise. If the&#10;&#9;application changed the value of this attribute node (even if it&#10;&#9;ends up having the same value as the default value) then it is&#10;&#9;set to &lt;code&gt;true&lt;/code&gt;. The implementation may handle&#10;&#9;attributes with default values from other schemas similarly but&#10;&#9;applications should use &lt;code&gt;Document.normalizeDocument()&lt;/code&gt;&#10;&#9;to guarantee this information is up-to-date.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="Attr"/>
      <property name="value" id="value" type="DOMString" description="&#10;      &lt;p&gt;On retrieval, the value of the attribute is returned as a&#10;&#9;string. Character and general entity references are replaced with their&#10;&#9;values. See also the method &lt;code&gt;getAttribute&lt;/code&gt; on the &#10;        &lt;code&gt;Element&lt;/code&gt; interface.&lt;/p&gt;&#10;      &lt;p&gt;On setting, this creates a &lt;code&gt;Text&lt;/code&gt; node with the unparsed&#10;&#9;contents of the string, i.e. any characters that an XML processor would&#10;        recognize as markup are instead treated as literal text.&#10;&#9;See also the method &lt;code&gt;Element.setAttribute()&lt;/code&gt;.&lt;/p&gt;&#10;      &lt;p&gt;&#10;&#9;Some specialized implementations, such as some &lt;bibref ref=&quot;SVG1&quot; role=&quot;informative&quot;&gt;&lt;/bibref&gt; implementations, may do&#10;&#9;normalization automatically, even after mutation; in such case,&#10;&#9;the value on retrieval may differ from the value on setting.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="Attr"/>
      <property name="ownerElement" id="ownerElement" type="Element" description="&#10;      &lt;p&gt;The &lt;code&gt;Element&lt;/code&gt; node this attribute is attached to or&#10;&#9;&lt;code&gt;null&lt;/code&gt; if this attribute is not in use.&lt;/p&gt;&#10;    " readonly="true" owner_id="Attr"/>
      <property name="schemaTypeInfo" id="schemaTypeInfo" type="TypeInfo" description="&#10;      &lt;p&gt;&#10;&#9;The type information associated with this attribute. While the&#10;&#9;type information contained in this attribute is guarantee to be&#10;&#9;correct after loading the document or invoking&#10;&#9;&lt;code&gt;Document.normalizeDocument()&lt;/code&gt;,&#10;&#9;&lt;code&gt;schemaTypeInfo&lt;/code&gt; may not be reliable if the node was&#10;&#9;moved.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="Attr"/>
      <property name="isId" id="isId" type="boolean" description="&#10;      &lt;p&gt;&#10;&#9;Returns whether this attribute is known to be of type ID&#10;&#9;(i.e. to contain an identifier for its owner element) or not.&#10;&#9;When it is and its value is unique, the&#10;&#9;&lt;code&gt;ownerElement&lt;/code&gt; of this attribute can be retrieved&#10;&#9;using the method &lt;code&gt;Document.getElementById&lt;/code&gt;. The&#10;&#9;implementation could use several ways to determine if an&#10;&#9;attribute node is known to contain an identifier:&#10;      &lt;/p&gt;&#10;      &lt;ulist&gt;&#10;&#9;&lt;item&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    If validation occurred using an XML Schema &lt;bibref ref=&quot;XMLSchema1&quot;&gt;&lt;/bibref&gt; while loading the document or while&#10;&#9;    invoking &lt;code&gt;Document.normalizeDocument()&lt;/code&gt;, the&#10;&#9;    post-schema-validation infoset contributions (PSVI&#10;&#9;    contributions) values are used to determine if this&#10;&#9;    attribute is a &lt;term&gt;schema-determined ID attribute&lt;/term&gt;&#10;&#9;    using the &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2003/REC-xptr-framework-20030325/#term-sdi&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;schema-determined&#10;&#9;    ID&lt;/loc&gt; definition in &lt;bibref ref=&quot;XPointer&quot;&gt;&lt;/bibref&gt;.&#10;&#9;  &lt;/p&gt;&#10;&#9;&lt;/item&gt;&#10;&#9;&lt;item&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    If validation occurred using a DTD while loading the document&#10;&#9;    or while invoking &lt;code&gt;Document.normalizeDocument()&lt;/code&gt;,&#10;&#9;    the infoset &lt;b&gt;[type definition]&lt;/b&gt; value is used to determine if this&#10;&#9;    attribute is a &lt;term&gt;DTD-determined ID attribute&lt;/term&gt;&#10;&#9;    using the &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2003/REC-xptr-framework-20030325/#term-ddi&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;DTD-determined&#10;&#9;    ID&lt;/loc&gt; definition in &lt;bibref ref=&quot;XPointer&quot;&gt;&lt;/bibref&gt;.&#10;&#9;  &lt;/p&gt;&#10;&#9;&lt;/item&gt;&#10;&#9;&lt;item&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    from the use of the methods&#10;&#9;    &lt;code&gt;Element.setIdAttribute()&lt;/code&gt;,&#10;&#9;    &lt;code&gt;Element.setIdAttributeNS()&lt;/code&gt;, or&#10;&#9;    &lt;code&gt;Element.setIdAttributeNode()&lt;/code&gt;, i.e. it is an&#10;&#9;    &lt;term&gt;user-determined ID attribute&lt;/term&gt;;&#10;&#9;  &lt;/p&gt;&#10;&#9;  &lt;note&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      XPointer framework (see section 3.2 in &lt;bibref role=&quot;informative&quot; ref=&quot;XPointer&quot;&gt;&lt;/bibref&gt;) consider the DOM&#10;&#9;      &lt;term&gt;user-determined ID attribute&lt;/term&gt; as being part of&#10;&#9;      the XPointer &lt;term&gt;externally-determined ID&lt;/term&gt;&#10;&#9;      definition.&#10;&#9;    &lt;/p&gt;&#10;&#9;  &lt;/note&gt;&#10;&#9;&lt;/item&gt;&#10;&#9;&lt;item&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    using mechanisms that are outside the scope of this&#10;&#9;    specification, it is then an &lt;term&gt;externally-determined&#10;&#9;    ID attribute&lt;/term&gt;. This includes using schema&#10;&#9;    languages different from XML schema and DTD.&#10;&#9;  &lt;/p&gt;&#10;&#9;&lt;/item&gt;&#10;      &lt;/ulist&gt;&#10;      &lt;p&gt;&#10;&#9;If validation occurred while invoking&#10;&#9;&lt;code&gt;Document.normalizeDocument()&lt;/code&gt;, all&#10;&#9;&lt;term&gt;user-determined ID attributes&lt;/term&gt; are reset and all&#10;&#9;attribute nodes ID information are then reevaluated in&#10;&#9;accordance to the schema used. As a consequence, if the&#10;&#9;&lt;code&gt;Attr.schemaTypeInfo&lt;/code&gt; attribute contains an ID type,&#10;&#9;&lt;code&gt;isId&lt;/code&gt; will always return true.&#10;      &lt;/p&gt;&#10;&#10;    " readonly="true" owner_id="Attr"/>
    </properties>
  </interface>
  <interface id="CDATASection" name="CDATASection" description="&#10;    &lt;p&gt;CDATA sections are used to escape blocks of text containing characters&#10;      that would otherwise be regarded as markup. The only delimiter that is&#10;      recognized in a CDATA section is the &quot;]]&amp;gt;&quot; string that ends the CDATA&#10;      section. CDATA sections cannot be nested. Their primary purpose is for&#10;      including material such as XML fragments, without needing to escape all&#10;      the delimiters.&lt;/p&gt;&#10;&lt;p&gt;The &lt;code&gt;CharacterData.data&lt;/code&gt; attribute &#10;      holds the text that is contained by the CDATA&#10;      section. Note that this &lt;emph&gt;may&lt;/emph&gt; contain characters that need to&#10;      be escaped outside of CDATA sections and that, depending on the character&#10;      encoding (&quot;charset&quot;) chosen for serialization, it may be impossible to&#10;      write out some characters as part of a CDATA section.&lt;/p&gt;&#10;    &lt;p&gt;The &lt;code&gt;CDATASection&lt;/code&gt; interface inherits from the&#10;      &lt;code&gt;CharacterData&lt;/code&gt; interface through the &lt;code&gt;Text&lt;/code&gt;&#10;      interface. Adjacent &lt;code&gt;CDATASection&lt;/code&gt; nodes are not merged by use&#10;      of the &lt;code&gt;normalize&lt;/code&gt; method of the &lt;code&gt;Node&lt;/code&gt;&#10;      interface.&lt;/p&gt;&#10;    &lt;p&gt;&#10;      No lexical check is done on the content of a CDATA section and it&#10;      is therefore possible to have the character sequence&#10;      &lt;code&gt;&quot;]]&amp;gt;&quot;&lt;/code&gt; in the content, which is illegal in a CDATA&#10;      section per section 2.7 of &lt;bibref ref=&quot;XML&quot;&gt;&lt;/bibref&gt;. The presence of&#10;      this character sequence must generate a fatal error during&#10;      serialization or the cdata section must be splitted before the&#10;      serialization (see also the parameter&#10;      &lt;code&gt;&quot;split-cdata-sections&quot;&lt;/code&gt; in the&#10;      &lt;code&gt;DOMConfiguration&lt;/code&gt; interface).&#10;    &lt;/p&gt;&#10;    &lt;note&gt;&#10;      &lt;p&gt;Because no markup is recognized within a &lt;code&gt;CDATASection&lt;/code&gt;,&#10;&#9;character numeric references cannot be used as an escape mechanism&#10;&#9;when serializing. Therefore, action needs to be taken when serializing&#10;&#9;a &lt;code&gt;CDATASection&lt;/code&gt; with a character encoding where some of&#10;&#9;the contained characters cannot be represented. Failure to do so would&#10;&#9;not produce well-formed XML.&lt;/p&gt;&#10;      &lt;p&gt;One potential solution in the serialization process is to end the&#10;&#9;CDATA section before the character, output the character using a &#10;&#9;character reference or entity reference, and open a new CDATA section &#10;&#9;for any further characters in the text node. Note, however, that some &#10;&#9;code conversion libraries at the time of writing do not return an&#10;&#9;error or exception when a character is missing from the encoding, &#10;&#9;making the task of ensuring that data is not corrupted on serialization&#10;&#9;more difficult.&lt;/p&gt; &#10;    &lt;/note&gt;&#10;  " parent_id="Text">
    <methods/>
    <properties/>
  </interface>
  <interface id="Comment" name="Comment" description="&#10;    &lt;p&gt;This interface inherits from &lt;code&gt;CharacterData&lt;/code&gt; and represents&#10;      the content of a comment, i.e., all the characters between the starting&#10;      '&lt;code&gt;&amp;lt;!--&lt;/code&gt;' and ending '&lt;code&gt;--&amp;gt;&lt;/code&gt;'. Note that this&#10;      is the definition of a comment in XML, and, in practice, HTML, although&#10;      some HTML tools may implement the full SGML comment structure.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      No lexical check is done on the content of a comment and&#10;      it is therefore possible to have the character sequence&#10;      &lt;code&gt;&quot;--&quot;&lt;/code&gt; (double-hyphen) in the content, which is illegal&#10;      in a comment per section 2.5 of &lt;bibref ref=&quot;XML&quot;&gt;&lt;/bibref&gt;. The presence&#10;      of this character sequence must generate a fatal error during&#10;      serialization.&#10;    &lt;/p&gt;&#10;  " parent_id="CharacterData">
    <methods/>
    <properties/>
  </interface>
  <interface id="CharacterData" name="CharacterData" description="&#10;    &lt;p&gt;The &lt;code&gt;CharacterData&lt;/code&gt; interface extends Node with a set of&#10;      attributes and methods for accessing character data in the DOM. For&#10;      clarity this set is defined here rather than on each object that uses&#10;      these attributes and methods. No DOM objects correspond directly to&#10;      &lt;code&gt;CharacterData&lt;/code&gt;, though &lt;code&gt;Text&lt;/code&gt; and others do&#10;      inherit the interface from it. All &lt;code&gt;offsets&lt;/code&gt; in this&#10;      interface start from &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;&#10;    &lt;p&gt;As explained in the &lt;code&gt;DOMString&lt;/code&gt; interface, text strings&#10;      in the DOM are represented in UTF-16, i.e. as a sequence of 16-bit&#10;      units. In the following, the term &lt;termref def=&quot;dt-16-bit-unit&quot;&gt;16-bit&#10;        units&lt;/termref&gt; is used whenever necessary to indicate that indexing on&#10;      CharacterData is done in 16-bit units.&lt;/p&gt;&#10;  " parent_id="Node">
    <methods>
      <method id="substringData" name="substringData" return_type="DOMString" owner_id="CharacterData" description="&#10;      &lt;p&gt;Extracts a range of data from the node.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;The specified substring. If the sum of &lt;code&gt;offset&lt;/code&gt; and&#10;&#9;  &lt;code&gt;count&lt;/code&gt; exceeds the &lt;code&gt;length&lt;/code&gt;, then all 16-bit&#10;&#9;  units to the end of the data are returned.&lt;/p&gt;&#10;      ">
        <parameter id="" name="offset" type="unsigned long" owner_id="" description="&#10;          &lt;p&gt;Start offset of substring to extract.&lt;/p&gt;&#10;        "/>
        <parameter id="" name="count" type="unsigned long" owner_id="" description="&#10;          &lt;p&gt;The number of 16-bit units to extract.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="appendData" name="appendData" return_type="void" owner_id="CharacterData" description="&#10;      &lt;p&gt;Append the string to the end of the character data of the node. Upon&#10;        success, &lt;code&gt;data&lt;/code&gt; provides access to the concatenation of&#10;        &lt;code&gt;data&lt;/code&gt; and the &lt;code&gt;DOMString&lt;/code&gt; specified.&lt;/p&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="arg" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;code&gt;DOMString&lt;/code&gt; to append.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="insertData" name="insertData" return_type="void" owner_id="CharacterData" description="&#10;      &lt;p&gt;Insert a string at the specified &lt;termref def=&quot;dt-16-bit-unit&quot;&gt;16-bit&#10;          unit&lt;/termref&gt; offset.&lt;/p&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="offset" type="unsigned long" owner_id="" description="&#10;          &lt;p&gt;The character offset at which to insert.&lt;/p&gt;&#10;        "/>
        <parameter id="" name="arg" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;code&gt;DOMString&lt;/code&gt; to insert.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="deleteData" name="deleteData" return_type="void" owner_id="CharacterData" description="&#10;      &lt;p&gt;Remove a range of &lt;termref def=&quot;dt-16-bit-unit&quot;&gt;16-bit units&lt;/termref&gt;&#10;        from the node. Upon success, &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt;&#10;        reflect the change.&lt;/p&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="offset" type="unsigned long" owner_id="" description="&#10;          &lt;p&gt;The offset from which to start removing.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="count" type="unsigned long" owner_id="" description="&#10;          &lt;p&gt;The number of 16-bit units to delete. If the sum of&#10;            &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; exceeds&#10;            &lt;code&gt;length&lt;/code&gt; then all 16-bit units from &lt;code&gt;offset&lt;/code&gt;&#10;            to the end of the data are deleted.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="replaceData" name="replaceData" return_type="void" owner_id="CharacterData" description="&#10;      &lt;p&gt;Replace the characters starting at the specified&#10;        &lt;termref def=&quot;dt-16-bit-unit&quot;&gt;16-bit unit&lt;/termref&gt; offset with the&#10;        specified string.&lt;/p&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="offset" type="unsigned long" owner_id="" description="&#10;          &lt;p&gt;The offset from which to start replacing.&lt;/p&gt;&#10;        "/>
        <parameter id="" name="count" type="unsigned long" owner_id="" description="&#10;          &lt;p&gt;The number of 16-bit units to replace. If the sum of&#10;            &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; exceeds&#10;            &lt;code&gt;length&lt;/code&gt;, then all 16-bit units to the end of the data&#10;            are replaced; (i.e., the effect is the same as a&#10;            &lt;code&gt;remove&lt;/code&gt; method call with the same range, followed by an&#10;            &lt;code&gt;append&lt;/code&gt; method invocation).&lt;/p&gt;&#10;        "/>
        <parameter id="" name="arg" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;code&gt;DOMString&lt;/code&gt; with which the range must be&#10;            replaced.&lt;/p&gt;&#10;        "/>
      </method>
    </methods>
    <properties>
      <property name="data" id="data" type="DOMString" description="&#10;      &lt;p&gt;The character data of the node that implements this interface. The DOM&#10;        implementation may not put arbitrary limits on the amount of data that&#10;        may be stored in a &lt;code&gt;CharacterData&lt;/code&gt; node. However,&#10;        implementation limits may mean that the entirety of a node's data may&#10;        not fit into a single &lt;code&gt;DOMString&lt;/code&gt;. In such cases, the user&#10;        may call &lt;code&gt;substringData&lt;/code&gt; to retrieve the data in&#10;        appropriately sized pieces.&lt;/p&gt;&#10;    " readonly="false" owner_id="CharacterData"/>
      <property name="length" id="length" type="unsigned long" description="&#10;      &lt;p&gt;The number of &lt;termref def=&quot;dt-16-bit-unit&quot;&gt;16-bit units&lt;/termref&gt;&#10;        that are available through &lt;code&gt;data&lt;/code&gt; and the&#10;        &lt;code&gt;substringData&lt;/code&gt; method below.  This may have the value zero,&#10;        i.e., &lt;code&gt;CharacterData&lt;/code&gt; nodes may be empty.&lt;/p&gt;&#10;    " readonly="true" owner_id="CharacterData"/>
    </properties>
  </interface>
  <interface id="DocumentType" name="DocumentType" description="&#10;    &lt;p&gt;Each &lt;code&gt;Document&lt;/code&gt; has a &lt;code&gt;doctype&lt;/code&gt; attribute whose&#10;      value is either &lt;code&gt;null&lt;/code&gt; or a &lt;code&gt;DocumentType&lt;/code&gt;&#10;      object. The &lt;code&gt;DocumentType&lt;/code&gt; interface in the DOM Core provides&#10;      an interface to the list of entities that are defined for the document,&#10;      and little else because the effect of namespaces and the various XML&#10;      schema efforts on DTD representation are not clearly understood as of&#10;      this writing.&lt;/p&gt;&#10;    &lt;p&gt;DOM Level 3 doesn't support editing &lt;code&gt;DocumentType&lt;/code&gt;&#10;      nodes. &lt;code&gt;DocumentType&lt;/code&gt; nodes are &lt;termref def=&quot;dt-readonly-node&quot;&gt;read-only&lt;/termref&gt;.&lt;/p&gt;&#10;  " parent_id="Node">
    <methods/>
    <properties>
      <property name="name" id="name" type="DOMString" description="&#10;      &lt;p&gt;The name of DTD; i.e., the name immediately following the&#10;        &lt;code&gt;DOCTYPE&lt;/code&gt; keyword.&lt;/p&gt;&#10;    " readonly="true" owner_id="DocumentType"/>
      <property name="entities" id="entities" type="NamedNodeMap" description="&#10;      &lt;p&gt;A &lt;code&gt;NamedNodeMap&lt;/code&gt; containing the general entities, both&#10;&#9;external and internal, declared in the DTD. Parameter entities are not &#10;        contained. Duplicates are discarded. For example in:&#10;        &lt;eg role=&quot;code&quot; xml:space=&quot;preserve&quot;&gt;&amp;lt;!DOCTYPE ex SYSTEM &quot;ex.dtd&quot; [&#10;  &amp;lt;!ENTITY foo &quot;foo&quot;&amp;gt;&#10;  &amp;lt;!ENTITY bar &quot;bar&quot;&amp;gt;&#10;  &amp;lt;!ENTITY bar &quot;bar2&quot;&amp;gt;&#10;  &amp;lt;!ENTITY % baz &quot;baz&quot;&amp;gt;&#10;]&amp;gt;&#10;&amp;lt;ex/&amp;gt;&lt;/eg&gt;  &#10;&#9;the interface provides access to &lt;code&gt;foo&lt;/code&gt; and the first&#10;        declaration of &lt;code&gt;bar&lt;/code&gt; but not the second declaration of&#10;        &lt;code&gt;bar&lt;/code&gt; or &lt;code&gt;baz&lt;/code&gt;. Every node in this map also&#10;        implements the &lt;code&gt;Entity&lt;/code&gt; interface.&lt;/p&gt;&#10;      &lt;p&gt;The DOM Level 2 does not support editing entities, therefore&#10;        &lt;code&gt;entities&lt;/code&gt; cannot be altered in any way.&lt;/p&gt;&#10;    " readonly="true" owner_id="DocumentType"/>
      <property name="notations" id="notations" type="NamedNodeMap" description="&#10;      &lt;p&gt;A &lt;code&gt;NamedNodeMap&lt;/code&gt; containing the notations declared in the&#10;        DTD. Duplicates are discarded. Every node in this map also implements&#10;        the &lt;code&gt;Notation&lt;/code&gt; interface.&lt;/p&gt;&#10;      &lt;p&gt;The DOM Level 2 does not support editing notations, therefore&#10;        &lt;code&gt;notations&lt;/code&gt; cannot be altered in any way.&lt;/p&gt;&#10;    " readonly="true" owner_id="DocumentType"/>
      <property name="publicId" id="publicId" type="DOMString" description="&#10;      &lt;p&gt;The public identifier of the external subset.&lt;/p&gt;&#10;    " readonly="true" owner_id="DocumentType"/>
      <property name="systemId" id="systemId" type="DOMString" description="&#10;      &lt;p&gt;The system identifier of the external subset. This may be an absolute&#10;        URI or not.&lt;/p&gt;&#10;    " readonly="true" owner_id="DocumentType"/>
      <property name="internalSubset" id="internalSubset" type="DOMString" description="&#10;      &lt;p&gt;The internal subset as a string, or &lt;code&gt;null&lt;/code&gt; if there is&#10;        none. This is does not contain the delimiting square brackets.&lt;/p&gt;&#10;       &lt;note&gt;&#10;        &lt;p&gt;The actual content returned depends on how much information is&#10;          available to the implementation. This may vary depending on various&#10;          parameters, including the XML processor used to build the&#10;          document.&lt;/p&gt;&#10;       &lt;/note&gt;&#10;    " readonly="true" owner_id="DocumentType"/>
    </properties>
  </interface>
  <interface id="DocumentFragment" name="DocumentFragment" description="&#10;    &lt;p&gt;&lt;code&gt;DocumentFragment&lt;/code&gt; is a &quot;lightweight&quot; or &quot;minimal&quot;&#10;      &lt;code&gt;Document&lt;/code&gt; object. It is very common to want to be able to&#10;      extract a portion of a document's tree or to create a new fragment of a&#10;      document. Imagine implementing a user command like cut or rearranging a&#10;      document by moving fragments around. It is desirable to have an object&#10;      which can hold such fragments and it is quite natural to use a Node for&#10;      this purpose. While it is true that a &lt;code&gt;Document&lt;/code&gt; object could&#10;      fulfill this role, a &lt;code&gt;Document&lt;/code&gt; object can potentially be a&#10;      heavyweight object, depending on the underlying implementation. What is&#10;      really needed for this is a very lightweight&#10;      object. &lt;code&gt;DocumentFragment&lt;/code&gt; is such an object.&lt;/p&gt;&#10;    &lt;p&gt;Furthermore, various operations -- such as inserting nodes as children&#10;      of another &lt;code&gt;Node&lt;/code&gt; -- may take &lt;code&gt;DocumentFragment&lt;/code&gt;&#10;      objects as arguments;  this results in all the child nodes of the&#10;      &lt;code&gt;DocumentFragment&lt;/code&gt; being moved to the child list of this&#10;      node.&lt;/p&gt;&#10;    &lt;p&gt;The children of a &lt;code&gt;DocumentFragment&lt;/code&gt; node are zero or more&#10;      nodes representing the tops of any sub-trees defining the structure of&#10;      the document. &lt;code&gt;DocumentFragment&lt;/code&gt; nodes do not need to be&#10;      &lt;termref def=&quot;dt-well-formed&quot;&gt;well-formed XML documents&lt;/termref&gt;&#10;      (although they do need to follow the rules imposed upon well-formed XML&#10;      parsed entities, which can have multiple top nodes). For example, a&#10;      &lt;code&gt;DocumentFragment&lt;/code&gt; might have only one child and that child&#10;      node could be a &lt;code&gt;Text&lt;/code&gt; node. Such a structure model represents&#10;      neither an HTML document nor a well-formed XML document.&lt;/p&gt;&#10;    &lt;p&gt;When a &lt;code&gt;DocumentFragment&lt;/code&gt; is inserted into a&#10;      &lt;code&gt;Document&lt;/code&gt; (or indeed any other &lt;code&gt;Node&lt;/code&gt; that may&#10;      take children) the children of the &lt;code&gt;DocumentFragment&lt;/code&gt; and not&#10;      the &lt;code&gt;DocumentFragment&lt;/code&gt; itself are inserted into the&#10;      &lt;code&gt;Node&lt;/code&gt;. This makes the &lt;code&gt;DocumentFragment&lt;/code&gt; very&#10;      useful when the user wishes to create nodes that are&#10;      &lt;termref def=&quot;dt-sibling&quot;&gt;siblings&lt;/termref&gt;; the&#10;      &lt;code&gt;DocumentFragment&lt;/code&gt; acts as the parent of these nodes so that&#10;      the user can use the standard methods from the &lt;code&gt;Node&lt;/code&gt;&#10;      interface, such as &lt;code&gt;Node.insertBefore&lt;/code&gt; and&#10;      &lt;code&gt;Node.appendChild&lt;/code&gt;.&lt;/p&gt;&#10;  " parent_id="Node">
    <methods/>
    <properties/>
  </interface>
  <interface id="DOMImplementation" name="DOMImplementation" description="&#10;    &lt;p&gt;The &lt;code&gt;DOMImplementation&lt;/code&gt; interface provides a number of&#10;      methods for performing operations that are independent of any particular&#10;      instance of the document object model.&lt;/p&gt;&#10;  ">
    <methods>
      <method id="hasFeature" name="hasFeature" return_type="boolean" owner_id="DOMImplementation" description="&#10;      &lt;p&gt;Test if the DOM implementation implements a specific feature&#10;      and version, as specified in &lt;specref ref=&quot;DOMFeatures&quot;&gt;&lt;/specref&gt;.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&lt;code&gt;true&lt;/code&gt; if the feature is implemented in the specified&#10;          version, &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt;&#10;      ">
        <parameter id="" name="feature" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    The name of the feature to test.&#10;&#9;  &lt;/p&gt;&#10;        "/>
        <parameter id="" name="version" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    This is the version number of the feature to test.&#10;&#9;  &lt;/p&gt;&#10;        "/>
      </method>
      <method id="createDocumentType" name="createDocumentType" return_type="DocumentType" owner_id="DOMImplementation" description="&#10;      &lt;p&gt;Creates an empty &lt;code&gt;DocumentType&lt;/code&gt; node. Entity declarations&#10;        and notations are not made available. Entity reference expansions and&#10;        default attribute additions do not occur.&lt;!-- It is expected that a future&#10;        version of the DOM will provide a way for populating a&#10;        &lt;code&gt;DocumentType&lt;/code&gt; --&gt;.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;A new &lt;code&gt;DocumentType&lt;/code&gt; node with&#10;          &lt;code&gt;Node.ownerDocument&lt;/code&gt; set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#10;      ">
        <parameter id="" name="qualifiedName" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-qualifiedname&quot;&gt;qualified name&lt;/termref&gt;&#10;&#9;    of the document type to be created.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="publicId" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The external subset public identifier.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="systemId" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The external subset system identifier.&lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="createDocument" name="createDocument" return_type="Document" owner_id="DOMImplementation" description="&#10;      &lt;p&gt;Creates a DOM Document object of the specified type with its document&#10;        element.&lt;/p&gt;&#10;      &lt;p&gt;Note that based on the &lt;code&gt;DocumentType&lt;/code&gt; given to create the&#10;        document, the implementation may instantiate specialized&#10;        &lt;code&gt;Document&lt;/code&gt; objects that support additional features than the&#10;        &quot;Core&quot;, such as &quot;HTML&quot; &lt;bibref role=&quot;informative&quot; ref=&quot;DOM2HTML&quot;&gt;&lt;/bibref&gt;.&#10;        On the other hand, setting the &lt;code&gt;DocumentType&lt;/code&gt; after the&#10;        document was created makes this very unlikely to happen. Alternatively,&#10;        specialized &lt;code&gt;Document&lt;/code&gt; creation methods, such as&#10;        &lt;code&gt;createHTMLDocument&lt;/code&gt;&#10;        &lt;bibref role=&quot;informative&quot; ref=&quot;DOM2HTML&quot;&gt;&lt;/bibref&gt;, can be used to obtain&#10;        specific types of &lt;code&gt;Document&lt;/code&gt; objects.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;A new &lt;code&gt;Document&lt;/code&gt; object with its document element. If the&#10;&#9;  &lt;code&gt;NamespaceURI&lt;/code&gt;, &lt;code&gt;qualifiedName&lt;/code&gt;, and&#10;&#9;  &lt;code&gt;doctype&lt;/code&gt; are &lt;code&gt;null&lt;/code&gt;, the returned&#10;&#9;  &lt;code&gt;Document&lt;/code&gt; is empty with no document element.&lt;/p&gt;&#10;      ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt; of the&#10;            document element to create or &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="qualifiedName" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-qualifiedname&quot;&gt;qualified name&lt;/termref&gt; of&#10;            the document element to be created or &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="doctype" type="DocumentType" owner_id="" description="&#10;          &lt;p&gt;The type of document to be created or &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#10;&#9;  &lt;p&gt;When &lt;code&gt;doctype&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;, its&#10;&#9;    &lt;code&gt;Node.ownerDocument&lt;/code&gt; attribute is set to the document&#10;&#9;    being created.&lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="getFeature" name="getFeature" return_type="DOMObject" owner_id="DOMImplementation" description="&#10;      &lt;p&gt;&#10;&#9;This method returns a specialized object which implements the&#10;&#9;specialized APIs of the specified feature and version, as&#10;&#9;specified in &lt;specref ref=&quot;DOMFeatures&quot;&gt;&lt;/specref&gt;. The specialized&#10;&#9;object may also be obtained by using binding-specific casting&#10;&#9;methods but is not necessarily expected to, as discussed in&#10;&#9;&lt;specref ref=&quot;Embedded-DOM&quot;&gt;&lt;/specref&gt;. This method also allow the&#10;&#9;implementation to provide specialized objects which do not&#10;&#9;support the &lt;code&gt;DOMImplementation&lt;/code&gt; interface.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;&#9;  Returns an object which implements the specialized APIs of the&#10;&#9;  specified feature and version, if any, or &lt;code&gt;null&lt;/code&gt; if&#10;&#9;  there is no object which implements interfaces associated with&#10;&#9;  that feature. If the &lt;code&gt;DOMObject&lt;/code&gt; returned by this&#10;&#9;  method implements the &lt;code&gt;DOMImplementation&lt;/code&gt;&#10;&#9;  interface, it must delegate to the primary core&#10;&#9;  &lt;code&gt;DOMImplementation&lt;/code&gt; and not return results&#10;&#9;  inconsistent with the primary core&#10;&#9;  &lt;code&gt;DOMImplementation&lt;/code&gt; such as&#10;&#9;  &lt;code&gt;hasFeature&lt;/code&gt;, &lt;code&gt;getFeature&lt;/code&gt;, etc.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="feature" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    The name of the feature requested. Note that any plus sign&#10;&#9;    &quot;+&quot; prepended to the name of the feature will be ignored&#10;&#9;    since it is not significant in the context of this method.&#10;&#9;  &lt;/p&gt;&#10;        "/>
        <parameter id="" name="version" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    This is the version number of the feature to test.&#10;&#9;  &lt;/p&gt;&#10;        "/>
      </method>
    </methods>
    <properties/>
  </interface>
  <interface id="Element" name="Element" description="&#10;    &lt;p&gt;The &lt;code&gt;Element&lt;/code&gt; interface represents an&#10;      &lt;termref def=&quot;dt-element&quot;&gt;element&lt;/termref&gt; in an HTML or XML&#10;      document. Elements may have attributes associated with them; since the&#10;      &lt;code&gt;Element&lt;/code&gt; interface inherits from &lt;code&gt;Node&lt;/code&gt;, the&#10;      generic &lt;code&gt;Node&lt;/code&gt; interface attribute &lt;code&gt;attributes&lt;/code&gt; may&#10;      be used to retrieve the set of all attributes for an element. There are&#10;      methods on the &lt;code&gt;Element&lt;/code&gt; interface to retrieve either an&#10;      &lt;code&gt;Attr&lt;/code&gt; object by name or an attribute value by name. In XML,&#10;      where an attribute value may contain entity references, an&#10;      &lt;code&gt;Attr&lt;/code&gt; object should be retrieved to examine the possibly&#10;      fairly complex sub-tree representing the attribute value. On the other&#10;      hand, in HTML, where all attributes have simple string values, methods to&#10;      directly access an attribute value can safely be used as a&#10;      &lt;termref def=&quot;dt-convenience&quot;&gt;convenience&lt;/termref&gt;.&lt;/p&gt;&#10;    &lt;note&gt;&#10;      &lt;p&gt;In DOM Level 2, the method &lt;code&gt;normalize&lt;/code&gt; is inherited from&#10;        the &lt;code&gt;Node&lt;/code&gt; interface where it was moved.&lt;/p&gt;&#10;    &lt;/note&gt;&#10;  " parent_id="Node">
    <methods>
      <method id="getAttribute" name="getAttribute" return_type="DOMString" owner_id="Element" description="&#10;      &lt;p&gt;Retrieves an attribute value by name.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;The &lt;code&gt;Attr&lt;/code&gt; value as a string, or the empty string if that&#10;          attribute does not have a specified or default value.&lt;/p&gt;&#10;      ">
        <parameter id="" name="name" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The name of the attribute to retrieve.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="setAttribute" name="setAttribute" return_type="void" owner_id="Element" description="&#10;      &lt;p&gt;Adds a new attribute. If an attribute with that name is already&#10;        present in the element, its value is changed to be that of the value&#10;        parameter. This value is a simple string; it is not parsed as it is&#10;        being set. So any markup (such as syntax to be recognized as an entity&#10;        reference) is treated as literal text, and needs to be appropriately&#10;        escaped by the implementation when it is written out. In order to&#10;        assign an attribute value that contains entity references, the user&#10;        must create an &lt;code&gt;Attr&lt;/code&gt; node plus any &lt;code&gt;Text&lt;/code&gt; and&#10;        &lt;code&gt;EntityReference&lt;/code&gt; nodes, build the appropriate subtree, and&#10;        use &lt;code&gt;setAttributeNode&lt;/code&gt; to assign it as the value of an&#10;        attribute.&lt;/p&gt;&#10;      &lt;p&gt;To set an attribute with a qualified name and namespace URI, use the&#10;        &lt;code&gt;setAttributeNS&lt;/code&gt; method.&lt;/p&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="name" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The name of the attribute to create or alter.&lt;/p&gt;&#10;        "/>
        <parameter id="" name="value" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;Value to set in string form.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="removeAttribute" name="removeAttribute" return_type="void" owner_id="Element" description="&#10;      &lt;p&gt;Removes an attribute by name. If a default value for the removed&#10;        attribute is defined in the DTD, a new attribute immediately appears&#10;        with the default value as well as the corresponding namespace URI,&#10;        local name, and prefix when applicable. The implementation may handle&#10;        default values from other schemas similarly but applications should use&#10;        &lt;code&gt;Document.normalizeDocument()&lt;/code&gt; to guarantee this information is up-to-date.&lt;/p&gt;&#10;      &lt;p&gt;If no attribute with this name is found, this method has no&#10;        effect.&lt;/p&gt;&#10;      &lt;p&gt;To remove an attribute by local name and namespace URI, use the&#10;        &lt;code&gt;removeAttributeNS&lt;/code&gt; method.&lt;/p&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="name" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The name of the attribute to remove.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="getAttributeNode" name="getAttributeNode" return_type="Attr" owner_id="Element" description="&#10;      &lt;p&gt;Retrieves an attribute node by name.&lt;/p&gt;&#10;      &lt;p&gt;To retrieve an attribute node by qualified name and namespace URI, use&#10;&#9;the &lt;code&gt;getAttributeNodeNS&lt;/code&gt; method.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;The &lt;code&gt;Attr&lt;/code&gt; node with the specified name&#10;          (&lt;code&gt;nodeName&lt;/code&gt;) or &lt;code&gt;null&lt;/code&gt; if there is no such&#10;          attribute.&lt;/p&gt;&#10;      ">
        <parameter id="" name="name" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The name (&lt;code&gt;nodeName&lt;/code&gt;) of the attribute to retrieve.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="setAttributeNode" name="setAttributeNode" return_type="Attr" owner_id="Element" description="&#10;      &lt;p&gt;Adds a new attribute node. If an attribute with that name&#10;        (&lt;code&gt;nodeName&lt;/code&gt;) is already present in the element, it is&#10;        replaced by the new one. Replacing an attribute node by itself has no&#10;        effect.&lt;/p&gt;&#10;      &lt;p&gt;To add a new attribute node with a qualified name and namespace URI,&#10;&#9;use the &lt;code&gt;setAttributeNodeNS&lt;/code&gt; method.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;If the &lt;code&gt;newAttr&lt;/code&gt; attribute replaces an existing&#10;          attribute, the replaced &lt;code&gt;Attr&lt;/code&gt; node is returned, otherwise&#10;          &lt;code&gt;null&lt;/code&gt; is returned.&lt;/p&gt;&#10;      ">
        <parameter id="" name="newAttr" type="Attr" owner_id="" description="&#10;          &lt;p&gt;The &lt;code&gt;Attr&lt;/code&gt; node to add to the attribute list.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="removeAttributeNode" name="removeAttributeNode" return_type="Attr" owner_id="Element" description="&#10;      &lt;p&gt;Removes the specified attribute node. If a default value for the&#10;        removed &lt;code&gt;Attr&lt;/code&gt; node is defined in the DTD, a new node&#10;        immediately appears with the default value as well as the corresponding&#10;        namespace URI, local name, and prefix when applicable. The&#10;        implementation may handle default values from other schemas similarly&#10;        but applications should use &lt;code&gt;Document.normalizeDocument()&lt;/code&gt; to guarantee this&#10;        information is up-to-date.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;The &lt;code&gt;Attr&lt;/code&gt; node that was removed.&lt;/p&gt;&#10;      ">
        <parameter id="" name="oldAttr" type="Attr" owner_id="" description="&#10;          &lt;p&gt;The &lt;code&gt;Attr&lt;/code&gt; node to remove from the attribute list.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="getElementsByTagName" name="getElementsByTagName" return_type="NodeList" owner_id="Element" description="&#10;      &lt;p&gt;Returns a &lt;code&gt;NodeList&lt;/code&gt; of all&#10;        &lt;termref def=&quot;dt-descendant&quot;&gt;descendant&lt;/termref&gt; &lt;code&gt;Elements&lt;/code&gt;&#10;        with a given tag name, in &lt;termref def=&quot;dt-document-order&quot;&gt;document&#10;          order&lt;/termref&gt;.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;A list of matching &lt;code&gt;Element&lt;/code&gt; nodes.&lt;/p&gt;&#10;      ">
        <parameter id="" name="name" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The name of the tag to match on. The special value &quot;*&quot; matches all&#10;            tags.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="normalize" name="normalize" return_type="void" owner_id="Element" description="&lt;p&gt;Puts all &lt;code&gt;Text&lt;/code&gt; nodes in the full depth of the&#10;        sub-tree underneath this &lt;code&gt;Element&lt;/code&gt; into a &quot;normal&quot; form&#10;&#9;where only markup (e.g., tags, comments, processing instructions, CDATA&#10;&#9;sections, and entity references) separates &lt;code&gt;Text&lt;/code&gt; nodes,&#10;&#9;i.e., there are no adjacent &lt;code&gt;Text&lt;/code&gt; nodes.  This can be used&#10;&#9;to ensure that the DOM view of a document is the same as if it were&#10;&#9;saved and re-loaded, and is useful when operations (such as XPointer&#10;&#9;lookups) that depend on a particular document tree structure are to be&#10;&#9;used.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;"/>
      <method id="getAttributeNS" name="getAttributeNS" return_type="DOMString" owner_id="Element" description="&#10;      &lt;p&gt;Retrieves an attribute value by local name and namespace URI.&lt;/p&gt;&#10;      &lt;p&gt;Per &lt;bibref ref=&quot;Namespaces&quot;&gt;&lt;/bibref&gt;, applications must use the value &lt;code&gt;null&lt;/code&gt;&#10;      as the &lt;code&gt;namespaceURI&lt;/code&gt; parameter for methods if they wish to have no&#10;      namespace.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;The &lt;code&gt;Attr&lt;/code&gt; value as a string, or the empty string if that&#10;          attribute does not have a specified or default value.&lt;/p&gt;&#10;      ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt; of the&#10;            attribute to retrieve.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="localName" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-localname&quot;&gt;local name&lt;/termref&gt; of the&#10;            attribute to retrieve.&lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="setAttributeNS" name="setAttributeNS" return_type="void" owner_id="Element" description="&#10;      &lt;p&gt;Adds a new attribute. If an attribute with the same local name&#10;&#9;and namespace URI is already present on the element, its prefix is&#10;&#9;changed to be the prefix part of the &lt;code&gt;qualifiedName&lt;/code&gt;, and&#10;&#9;its value is changed to be the &lt;code&gt;value&lt;/code&gt; parameter. This value&#10;&#9;is a simple string; it is not parsed as it is being set. So any markup&#10;&#9;(such as syntax to be recognized as an entity reference) is treated as&#10;&#9;literal text, and needs to be appropriately escaped by the&#10;&#9;implementation when it is written out. In order to assign an attribute&#10;&#9;value that contains entity references, the user must create an&#10;&#9;&lt;code&gt;Attr&lt;/code&gt; node plus any &lt;code&gt;Text&lt;/code&gt; and&#10;&#9;&lt;code&gt;EntityReference&lt;/code&gt; nodes, build the appropriate subtree, and&#10;&#9;use &lt;code&gt;setAttributeNodeNS&lt;/code&gt; or &lt;code&gt;setAttributeNode&lt;/code&gt; to&#10;&#9;assign it as the value of an attribute.&lt;/p&gt;&#10;      &lt;p&gt;Per &lt;bibref ref=&quot;Namespaces&quot;&gt;&lt;/bibref&gt;, applications must use the value &lt;code&gt;null&lt;/code&gt;&#10;      as the &lt;code&gt;namespaceURI&lt;/code&gt; parameter for methods if they wish to have no&#10;      namespace.&lt;/p&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt; of the&#10;            attribute to create or alter.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="qualifiedName" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-qualifiedname&quot;&gt;qualified name&lt;/termref&gt; of&#10;            the attribute to create or alter.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="value" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The value to set in string form.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="removeAttributeNS" name="removeAttributeNS" return_type="void" owner_id="Element" description="&#10;      &lt;p&gt;Removes an attribute by local name and namespace URI. If a default&#10;        value for the removed attribute is defined in the DTD, a new attribute&#10;        immediately appears with the default value as well as the corresponding&#10;        namespace URI, local name, and prefix when applicable. The&#10;        implementation may handle default values from other schemas similarly&#10;        but applications should use &lt;code&gt;Document.normalizeDocument()&lt;/code&gt; to guarantee this&#10;        information is up-to-date.&lt;/p&gt;&#10;      &lt;p&gt;If no attribute with this local name and namespace URI is found, this&#10;        method has no effect.&lt;/p&gt;&#10;      &lt;p&gt;Per &lt;bibref ref=&quot;Namespaces&quot;&gt;&lt;/bibref&gt;, applications must use the value &lt;code&gt;null&lt;/code&gt;&#10;      as the &lt;code&gt;namespaceURI&lt;/code&gt; parameter for methods if they wish to have no&#10;      namespace.&lt;/p&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt; of the&#10;            attribute to remove.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="localName" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-localname&quot;&gt;local name&lt;/termref&gt; of the&#10;            attribute to remove.&lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="getAttributeNodeNS" name="getAttributeNodeNS" return_type="Attr" owner_id="Element" description="&lt;p&gt;Retrieves an &lt;code&gt;Attr&lt;/code&gt; node by local name and namespace&#10;&#9;URI.&lt;/p&gt;&#10;      &lt;p&gt;Per &lt;bibref ref=&quot;Namespaces&quot;&gt;&lt;/bibref&gt;, applications must use the value &lt;code&gt;null&lt;/code&gt;&#10;      as the &lt;code&gt;namespaceURI&lt;/code&gt; parameter for methods if they wish to have no&#10;      namespace.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;The &lt;code&gt;Attr&lt;/code&gt; node with the specified attribute local name&#10;          and namespace URI or &lt;code&gt;null&lt;/code&gt; if there is no such&#10;          attribute.&lt;/p&gt;&#10;      ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt; of the&#10;            attribute to retrieve.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="localName" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-localname&quot;&gt;local name&lt;/termref&gt; of the&#10;&#9;    attribute to retrieve.&lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="setAttributeNodeNS" name="setAttributeNodeNS" return_type="Attr" owner_id="Element" description="&#10;      &lt;p&gt;Adds a new attribute. If an attribute with that local name and that&#10;        namespace URI is already present in the element, it is replaced by the&#10;        new one. Replacing an attribute node by itself has no effect.&lt;/p&gt;&#10;      &lt;p&gt;Per &lt;bibref ref=&quot;Namespaces&quot;&gt;&lt;/bibref&gt;, applications must use the value &lt;code&gt;null&lt;/code&gt;&#10;      as the &lt;code&gt;namespaceURI&lt;/code&gt; parameter for methods if they wish to have no&#10;      namespace.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;If the &lt;code&gt;newAttr&lt;/code&gt; attribute replaces an existing attribute&#10;          with the same &lt;termref def=&quot;dt-localname&quot;&gt;local name&lt;/termref&gt; and&#10;          &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt;, the replaced&#10;          &lt;code&gt;Attr&lt;/code&gt; node is returned, otherwise &lt;code&gt;null&lt;/code&gt; is&#10;          returned.&lt;/p&gt;&#10;      ">
        <parameter id="" name="newAttr" type="Attr" owner_id="" description="&#10;          &lt;p&gt;The &lt;code&gt;Attr&lt;/code&gt; node to add to the attribute list.&lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="getElementsByTagNameNS" name="getElementsByTagNameNS" return_type="NodeList" owner_id="Element" description="&#10;      &lt;p&gt;Returns a &lt;code&gt;NodeList&lt;/code&gt; of all the&#10;        &lt;termref def=&quot;dt-descendant&quot;&gt;descendant&lt;/termref&gt; &lt;code&gt;Elements&lt;/code&gt;&#10;        with a given local name and namespace URI in&#10;        &lt;termref def=&quot;dt-document-order&quot;&gt;document order&lt;/termref&gt;.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;A new &lt;code&gt;NodeList&lt;/code&gt; object containing all the matched&#10;          &lt;code&gt;Elements&lt;/code&gt;.&lt;/p&gt;&#10;      ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt; of the&#10;            elements to match on. The special value &quot;*&quot; matches all&#10;            namespaces.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="localName" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-localname&quot;&gt;local name&lt;/termref&gt; of the&#10;            elements to match on. The special value &quot;*&quot; matches all local&#10;            names.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="hasAttribute" name="hasAttribute" return_type="boolean" owner_id="Element" description="&#10;      &lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; when an attribute with a given name is&#10;        specified on this element or has a default value, &lt;code&gt;false&lt;/code&gt;&#10;        otherwise.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&lt;code&gt;true&lt;/code&gt; if an attribute with the given name is specified&#10;          on this element or has a default value, &lt;code&gt;false&lt;/code&gt;&#10;          otherwise.&lt;/p&gt;&#10;      ">
        <parameter id="" name="name" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The name of the attribute to look for.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="hasAttributeNS" name="hasAttributeNS" return_type="boolean" owner_id="Element" description="&#10;      &lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; when an attribute with a given local name&#10;        and namespace URI is specified on this element or has a default value,&#10;        &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt;&#10;      &lt;p&gt;Per &lt;bibref ref=&quot;Namespaces&quot;&gt;&lt;/bibref&gt;, applications must use the value &lt;code&gt;null&lt;/code&gt;&#10;      as the &lt;code&gt;namespaceURI&lt;/code&gt; parameter for methods if they wish to have no&#10;      namespace.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&lt;code&gt;true&lt;/code&gt; if an attribute with the given local name and&#10;          namespace URI is specified or has a default value on this element,&#10;          &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt;&#10;      ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt; of the&#10;            attribute to look for.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="localName" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-localname&quot;&gt;local name&lt;/termref&gt; of the&#10;            attribute to look for.&lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="setIdAttribute" name="setIdAttribute" return_type="void" owner_id="Element" description="&#10;      &lt;p&gt;&#10;&#9;If the parameter &lt;code&gt;isId&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, this&#10;&#9;method declares the specified attribute to be a&#10;&#9;&lt;term&gt;user-determined ID attribute&lt;/term&gt;. This affects the&#10;&#9;value of &lt;code&gt;Attr.isId&lt;/code&gt; and the behavior of&#10;&#9;&lt;code&gt;Document.getElementById&lt;/code&gt;, but does not change any&#10;&#9;schema that may be in use, in particular this does not affect&#10;&#9;the &lt;code&gt;Attr.schemaTypeInfo&lt;/code&gt; of the specified&#10;&#9;&lt;code&gt;Attr&lt;/code&gt; node. Use the value &lt;code&gt;false&lt;/code&gt; for the&#10;&#9;parameter &lt;code&gt;isId&lt;/code&gt; to undeclare an attribute for being&#10;&#9;a &lt;term&gt;user-determined ID attribute&lt;/term&gt;.&#10;      &lt;/p&gt;&#10;      &lt;p&gt;&#10;&#9;To specify an attribute by local name and namespace URI, use the&#10;&#9;&lt;code&gt;setIdAttributeNS&lt;/code&gt; method.&#10;      &lt;/p&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="name" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The name of the attribute.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="isId" type="boolean" owner_id="" description="&#10;          &lt;p&gt;Whether the attribute is a of type ID.&lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="setIdAttributeNS" name="setIdAttributeNS" return_type="void" owner_id="Element" description="&#10;      &lt;p&gt;&#10;&#9;If the parameter &lt;code&gt;isId&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, this&#10;&#9;method declares the specified attribute to be a&#10;&#9;&lt;term&gt;user-determined ID attribute&lt;/term&gt;. This affects the&#10;&#9;value of &lt;code&gt;Attr.isId&lt;/code&gt; and the behavior of&#10;&#9;&lt;code&gt;Document.getElementById&lt;/code&gt;, but does not change any&#10;&#9;schema that may be in use, in particular this does not affect&#10;&#9;the &lt;code&gt;Attr.schemaTypeInfo&lt;/code&gt; of the specified&#10;&#9;&lt;code&gt;Attr&lt;/code&gt; node. Use the value &lt;code&gt;false&lt;/code&gt; for the&#10;&#9;parameter &lt;code&gt;isId&lt;/code&gt; to undeclare an attribute for being&#10;&#9;a &lt;term&gt;user-determined ID attribute&lt;/term&gt;.&#10;      &lt;/p&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt; of the&#10;            attribute.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="localName" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-localname&quot;&gt;local name&lt;/termref&gt; of the&#10;            attribute.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="isId" type="boolean" owner_id="" description="&#10;          &lt;p&gt;Whether the attribute is a of type ID.&lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="setIdAttributeNode" name="setIdAttributeNode" return_type="void" owner_id="Element" description="&#10;      &lt;p&gt;&#10;&#9;If the parameter &lt;code&gt;isId&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, this&#10;&#9;method declares the specified attribute to be a&#10;&#9;&lt;term&gt;user-determined ID attribute&lt;/term&gt;. This affects the&#10;&#9;value of &lt;code&gt;Attr.isId&lt;/code&gt; and the behavior of&#10;&#9;&lt;code&gt;Document.getElementById&lt;/code&gt;, but does not change any&#10;&#9;schema that may be in use, in particular this does not affect&#10;&#9;the &lt;code&gt;Attr.schemaTypeInfo&lt;/code&gt; of the specified&#10;&#9;&lt;code&gt;Attr&lt;/code&gt; node. Use the value &lt;code&gt;false&lt;/code&gt; for the&#10;&#9;parameter &lt;code&gt;isId&lt;/code&gt; to undeclare an attribute for being&#10;&#9;a &lt;term&gt;user-determined ID attribute&lt;/term&gt;.&#10;      &lt;/p&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="idAttr" type="Attr" owner_id="" description="&#10;          &lt;p&gt;The attribute node.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="isId" type="boolean" owner_id="" description="&#10;          &lt;p&gt;Whether the attribute is a of type ID.&lt;/p&gt;&#10;&#9;"/>
      </method>
    </methods>
    <properties>
      <property name="tagName" id="tagName" type="DOMString" description="&#10;      &lt;p&gt;The name of the element. If &lt;code&gt;Node.localName&lt;/code&gt; is&#10;&#9;different from &lt;code&gt;null&lt;/code&gt;, this&#10;      attribute is a &lt;termref def=&quot;dt-qualifiedname&quot;&gt;qualified&#10;&#9;  name&lt;/termref&gt;. For example, in:  &#10;        &lt;eg role=&quot;code&quot; xml:space=&quot;preserve&quot;&gt;&#10;          &amp;lt;elementExample id=&quot;demo&quot;&amp;gt; &#10;          ... &#10;          &amp;lt;/elementExample&amp;gt; ,&#10;        &lt;/eg&gt;&#10;        &lt;code&gt;tagName&lt;/code&gt; has the value &lt;code&gt;&quot;elementExample&quot;&lt;/code&gt;. Note&#10;        that this is case-preserving in XML, as are all of the operations of&#10;        the DOM. The HTML DOM returns the &lt;code&gt;tagName&lt;/code&gt; of an HTML&#10;        element in the canonical uppercase form, regardless of the case in the&#10;        source HTML document.&lt;/p&gt;&#10;    " readonly="true" owner_id="Element"/>
      <property name="schemaTypeInfo" id="schemaTypeInfo" type="TypeInfo" description="&#10;      &lt;p&gt;&#10;&#9;The type information associated with this element.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="Element"/>
    </properties>
  </interface>
  <interface id="EntityReference" name="EntityReference" description="&#10;    &lt;p&gt;&lt;code&gt;EntityReference&lt;/code&gt; nodes may be used to represent an entity&#10;      reference in the tree. Note that character references&#10;      and references to predefined entities are considered to be expanded by&#10;      the HTML or XML processor so that characters are represented by their&#10;      Unicode equivalent rather than by an entity reference. Moreover, the XML&#10;      processor may completely expand references to entities while building the&#10;      &lt;code&gt;Document&lt;/code&gt;, instead of providing &lt;code&gt;EntityReference&lt;/code&gt;&#10;      nodes. If it does provide such nodes, then for an&#10;      &lt;code&gt;EntityReference&lt;/code&gt; node that represents a reference to a known&#10;      entity an &lt;code&gt;Entity&lt;/code&gt; exists, and the subtree of the&#10;      &lt;code&gt;EntityReference&lt;/code&gt; node is a copy of the&#10;      &lt;code&gt;Entity&lt;/code&gt; node subtree. However, the latter may not be true&#10;      when an entity contains an unbound &lt;termref def=&quot;dt-namespaceprefix&quot;&gt;namespace prefix&lt;/termref&gt;. In such a case, because the namespace prefix&#10;      resolution depends on where the entity reference is, the&#10;      &lt;termref def=&quot;dt-descendant&quot;&gt;descendants&lt;/termref&gt; of the&#10;      &lt;code&gt;EntityReference&lt;/code&gt; node may be bound to different&#10;      &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URIs&lt;/termref&gt;. When an&#10;      &lt;code&gt;EntityReference&lt;/code&gt; node represents a reference to an unknown&#10;      entity, the node has no children and its&#10;      replacement value, when used by &lt;code&gt;Attr.value&lt;/code&gt; for example,&#10;      is empty.&lt;/p&gt;&#10;    &lt;p&gt;As for &lt;code&gt;Entity&lt;/code&gt; nodes, &lt;code&gt;EntityReference&lt;/code&gt; nodes and&#10;      all their &lt;termref def=&quot;dt-descendant&quot;&gt;descendants&lt;/termref&gt; are&#10;      &lt;termref def=&quot;dt-readonly-node&quot;&gt;readonly&lt;/termref&gt;.&lt;/p&gt;&#10;    &lt;note&gt;&#10;      &lt;p&gt;&lt;code&gt;EntityReference&lt;/code&gt; nodes may cause element content and&#10;        attribute value normalization problems when, such as in XML 1.0 and&#10;        XML Schema, the normalization is performed after entity reference&#10;        are expanded.&lt;/p&gt;&#10;    &lt;/note&gt; &#10;  " parent_id="Node">
    <methods/>
    <properties/>
  </interface>
  <interface id="Entity" name="Entity" description="&#10;    &lt;p&gt;This interface represents a known entity, either parsed or unparsed, in an&#10;      XML document. Note that this models the entity itself &lt;emph&gt;not&lt;/emph&gt;&#10;      the entity declaration.&lt;/p&gt;&#10;    &lt;p&gt;The &lt;code&gt;nodeName&lt;/code&gt; attribute that is inherited from&#10;      &lt;code&gt;Node&lt;/code&gt; contains the name of the entity.&lt;/p&gt; &#10;    &lt;p&gt;An XML processor may choose to completely expand entities before the&#10;      structure model is passed to the DOM; in this case there will be no&#10;      &lt;code&gt;EntityReference&lt;/code&gt; nodes in the document tree.&lt;/p&gt;&#10;    &lt;p&gt;XML does not mandate that a non-validating XML processor read and&#10;      process entity declarations made in the external subset or declared in&#10;      parameter entities. This means that parsed entities declared in&#10;      the external subset need not be expanded by some classes of applications,&#10;      and that the replacement text of the entity may not be available. When the&#10;      &lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#intern-replacement&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;replacement text&lt;/xspecref&gt; is&#10;      available, the corresponding &lt;code&gt;Entity&lt;/code&gt; node's child list&#10;      represents the structure of that replacement value. Otherwise, the child&#10;      list is empty.&lt;/p&gt;&#10;    &lt;p&gt;DOM Level 3 does not support editing &lt;code&gt;Entity&lt;/code&gt; nodes; if a&#10;      user wants to make changes to the contents of an &lt;code&gt;Entity&lt;/code&gt;,&#10;      every related &lt;code&gt;EntityReference&lt;/code&gt; node has to be replaced in the&#10;      structure model by a clone of the &lt;code&gt;Entity&lt;/code&gt;'s contents, and&#10;      then the desired changes must be made to each of those clones&#10;      instead. &lt;code&gt;Entity&lt;/code&gt; nodes and all their&#10;      &lt;termref def=&quot;dt-descendant&quot;&gt;descendants&lt;/termref&gt; are&#10;      &lt;termref def=&quot;dt-readonly-node&quot;&gt;readonly&lt;/termref&gt;.&lt;/p&gt;&#10;    &lt;p&gt;An &lt;code&gt;Entity&lt;/code&gt; node does not have any parent.&lt;/p&gt;&#10;    &lt;note&gt;&#10;      &lt;p&gt;If the entity contains an unbound&#10;        &lt;termref def=&quot;dt-namespaceprefix&quot;&gt;namespace prefix&lt;/termref&gt;, the&#10;        &lt;code&gt;namespaceURI&lt;/code&gt; of the corresponding node in the&#10;        &lt;code&gt;Entity&lt;/code&gt; node subtree is &lt;code&gt;null&lt;/code&gt;. The same is&#10;        true for &lt;code&gt;EntityReference&lt;/code&gt; nodes that refer to this entity,&#10;        when they are created using the &lt;code&gt;createEntityReference&lt;/code&gt;&#10;        method of the &lt;code&gt;Document&lt;/code&gt; interface.&lt;/p&gt;&#10;    &lt;/note&gt;&#10;  " parent_id="Node">
    <methods/>
    <properties>
      <property name="publicId" id="publicId" type="DOMString" description="&#10;      &lt;p&gt;The public identifier associated with the entity if specified, and&#10;        &lt;code&gt;null&lt;/code&gt; otherwise.&lt;/p&gt;&#10;    " readonly="true" owner_id="Entity"/>
      <property name="systemId" id="systemId" type="DOMString" description="&#10;      &lt;p&gt;The system identifier associated with the entity if specified, and&#10;        &lt;code&gt;null&lt;/code&gt; otherwise. This may be an absolute URI or not.&lt;/p&gt;&#10;    " readonly="true" owner_id="Entity"/>
      <property name="notationName" id="notationName" type="DOMString" description="&#10;      &lt;p&gt;For unparsed entities, the name of the notation for the entity. For&#10;        parsed entities, this is &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#10;    " readonly="true" owner_id="Entity"/>
      <property name="inputEncoding" id="inputEncoding" type="DOMString" description="&#10;      &lt;p&gt;An attribute specifying the encoding used for this entity at&#10;&#9;the time of parsing, when it is&#10;        an external parsed entity. This is &lt;code&gt;null&lt;/code&gt; if it an&#10;&#9;entity from the internal subset or if it is not known.&lt;/p&gt;&#10;    " readonly="true" owner_id="Entity"/>
      <property name="xmlEncoding" id="xmlEncoding" type="DOMString" description="&#10;      &lt;p&gt;An attribute specifying, as part of the text declaration, the encoding&#10;        of this entity, when it is an external parsed entity. This is&#10;        &lt;code&gt;null&lt;/code&gt; otherwise.&lt;/p&gt;&#10;    " readonly="true" owner_id="Entity"/>
      <property name="xmlVersion" id="xmlVersion" type="DOMString" description="&#10;      &lt;p&gt;An attribute specifying, as part of the text declaration, the version&#10;        number of this entity, when it is an external parsed entity. This is&#10;        &lt;code&gt;null&lt;/code&gt; otherwise.&lt;/p&gt;&#10;    " readonly="true" owner_id="Entity"/>
    </properties>
  </interface>
  <interface id="HTMLAnchorElement" name="HTMLAnchorElement" description="&lt;p&gt;The anchor element. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/links.html#edef-A&quot;&gt;A element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods>
      <method id="blur" name="blur" return_type="void" owner_id="HTMLAnchorElement" description="&lt;p&gt;Removes keyboard focus from this element.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;"/>
      <method id="focus" name="focus" return_type="void" owner_id="HTMLAnchorElement" description="&lt;p&gt;Gives keyboard focus to this element.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;"/>
    </methods>
    <properties>
      <property name="accessKey" id="accessKey" type="DOMString" description="&lt;p&gt;A single character access key to give access to the form control. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-accesskey&quot;&gt;accesskey attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAnchorElement"/>
      <property name="charset" id="charset" type="DOMString" description="&lt;p&gt;The character encoding of the linked resource. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/links.html#adef-charset&quot;&gt;charset attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAnchorElement"/>
      <property name="coords" id="coords" type="DOMString" description="&lt;p&gt;Comma-separated list of lengths, defining an active region geometry.&#10;See also &lt;code&gt;shape&lt;/code&gt; for the shape of the region. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-coords&quot;&gt;coords attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAnchorElement"/>
      <property name="href" id="href" type="DOMString" description="&lt;p&gt;The URI of the linked resource. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/links.html#adef-href&quot;&gt;href attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAnchorElement"/>
      <property name="hreflang" id="hreflang" type="DOMString" description="&lt;p&gt;Language code of the linked resource. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/links.html#adef-hreflang&quot;&gt;hreflang attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAnchorElement"/>
      <property name="name" id="name" type="DOMString" description="&lt;p&gt;Anchor name. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/links.html#adef-name-A&quot;&gt;name attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAnchorElement"/>
      <property name="rel" id="rel" type="DOMString" description="&lt;p&gt;Forward link type. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/links.html#adef-rel&quot;&gt;rel attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAnchorElement"/>
      <property name="rev" id="rev" type="DOMString" description="&lt;p&gt;Reverse link type. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/links.html#adef-rev&quot;&gt;rev attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAnchorElement"/>
      <property name="shape" id="shape" type="DOMString" description="&lt;p&gt;The shape of the active area. The coordinates are given&#10;by &lt;code&gt;coords&lt;/code&gt;. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-shape&quot;&gt;shape attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAnchorElement"/>
      <property name="tabIndex" id="tabIndex" type="long" description="&lt;p&gt;Index that represents the element's position in the tabbing order. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-tabindex&quot;&gt;tabindex attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAnchorElement"/>
      <property name="target" id="target" type="DOMString" description="&lt;p&gt;Frame to render the resource in. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-target&quot;&gt;target attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAnchorElement"/>
      <property name="type" id="type" type="DOMString" description="&lt;p&gt;Advisory content type. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/links.html#adef-type-A&quot;&gt;type attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAnchorElement"/>
    </properties>
  </interface>
  <interface id="HTMLAppletElement" name="HTMLAppletElement" description="&lt;p&gt;An embedded Java applet. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#edef-APPLET&quot;&gt;APPLET element definition&lt;/loc&gt; in HTML 4.0. This element is deprecated in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="align" id="align" type="DOMString" description="&lt;p&gt;Aligns this object (vertically or horizontally) &#10;with respect to its surrounding text. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-align-IMG&quot;&gt;align attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAppletElement"/>
      <property name="alt" id="alt" type="DOMString" description="&lt;p&gt;Alternate text for user agents not rendering the normal content&#10;of this element. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-alt&quot;&gt;alt attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAppletElement"/>
      <property name="archive" id="archive" type="DOMString" description="&lt;p&gt;Comma-separated archive list. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-archive-APPLET&quot;&gt;archive attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAppletElement"/>
      <property name="code" id="code" type="DOMString" description="&lt;p&gt;Applet class file.  See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-code&quot;&gt;code attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAppletElement"/>
      <property name="codeBase" id="codeBase" type="DOMString" description="&lt;p&gt;Optional base URI for applet. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-codebase-APPLET&quot;&gt;codebase attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAppletElement"/>
      <property name="height" id="height" type="DOMString" description="&lt;p&gt;Override height. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-height-APPLET&quot;&gt;height attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAppletElement"/>
      <property name="hspace" id="hspace" type="DOMString" description="&lt;p&gt;Horizontal space to the left and right of this image, applet, or object. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-hspace&quot;&gt;hspace attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAppletElement"/>
      <property name="name" id="name" type="DOMString" description="&lt;p&gt;The name of the applet. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-name-APPLET&quot;&gt;name attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAppletElement"/>
      <property name="object" id="object" type="DOMString" description="&lt;p&gt;Serialized applet file. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-object&quot;&gt;object attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAppletElement"/>
      <property name="vspace" id="vspace" type="DOMString" description="&lt;p&gt;Vertical space above and below this image, applet, or object. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-vspace&quot;&gt;vspace attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAppletElement"/>
      <property name="width" id="width" type="DOMString" description="&lt;p&gt;Override width. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-width-APPLET&quot;&gt;width attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAppletElement"/>
    </properties>
  </interface>
  <interface id="HTMLAreaElement" name="HTMLAreaElement" description="&lt;p&gt;Client-side image map area definition. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#edef-AREA&quot;&gt;AREA element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="accessKey" id="accessKey" type="DOMString" description="&lt;p&gt;A single character access key to give access to the form control. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-accesskey&quot;&gt;accesskey attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAreaElement"/>
      <property name="alt" id="alt" type="DOMString" description="&lt;p&gt;Alternate text for user agents not rendering the normal content&#10;of this element. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-alt&quot;&gt;alt attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAreaElement"/>
      <property name="coords" id="coords" type="DOMString" description="&lt;p&gt;Comma-separated list of lengths, defining an active region geometry.&#10;See also &lt;code&gt;shape&lt;/code&gt; for the shape of the region. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-coords&quot;&gt;coords attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAreaElement"/>
      <property name="href" id="href" type="DOMString" description="&lt;p&gt;The URI of the linked resource. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/links.html#adef-href&quot;&gt;href attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAreaElement"/>
      <property name="noHref" id="noHref" type="boolean" description="&lt;p&gt;Specifies that this area is inactive, i.e., has no associated action. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-nohref&quot;&gt;nohref attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAreaElement"/>
      <property name="shape" id="shape" type="DOMString" description="&lt;p&gt;The shape of the active area. The coordinates are given&#10;by &lt;code&gt;coords&lt;/code&gt;. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-shape&quot;&gt;shape attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAreaElement"/>
      <property name="tabIndex" id="tabIndex" type="long" description="&lt;p&gt;Index that represents the element's position in the tabbing order. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-tabindex&quot;&gt;tabindex attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAreaElement"/>
      <property name="target" id="target" type="DOMString" description="&lt;p&gt;Frame to render the resource in. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-target&quot;&gt;target attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLAreaElement"/>
    </properties>
  </interface>
  <interface id="HTMLBaseElement" name="HTMLBaseElement" description="&lt;p&gt;Document base URI. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/links.html#edef-BASE&quot;&gt;BASE element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="href" id="href" type="DOMString" description="&lt;p&gt;The base URI See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/links.html#adef-href-BASE&quot;&gt;href attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLBaseElement"/>
      <property name="target" id="target" type="DOMString" description="&lt;p&gt;The default target frame. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-target&quot;&gt;target attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLBaseElement"/>
    </properties>
  </interface>
  <interface id="HTMLBaseFontElement" name="HTMLBaseFontElement" description="&lt;p&gt;Base font. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/graphics.html#edef-BASEFONT&quot;&gt;BASEFONT element definition&lt;/loc&gt; in HTML 4.0. This element is deprecated in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="color" id="color" type="DOMString" description="&lt;p&gt;Font color. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/&quot;&gt;color attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLBaseFontElement"/>
      <property name="face" id="face" type="DOMString" description="&lt;p&gt;Font face identifier. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/&quot;&gt;face attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLBaseFontElement"/>
      <property name="size" id="size" type="DOMString" description="&lt;p&gt;Font size. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/graphics.html#adef-size-BASEFONT&quot;&gt;size attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLBaseFontElement"/>
    </properties>
  </interface>
  <interface id="HTMLBlockquoteElement" name="HTMLBlockquoteElement" description="&lt;p&gt;??? See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/text.html#edef-BLOCKQUOTE&quot;&gt;BLOCKQUOTE element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="cite" id="cite" type="DOMString" description="&lt;p&gt;A URI designating a document that describes the reason for&#10;&#10;the change. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/&quot;&gt;cite attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLBlockquoteElement"/>
    </properties>
  </interface>
  <interface id="HTMLBodyElement" name="HTMLBodyElement" description="&lt;p&gt;The HTML document body. This element is always present in the DOM API,&#10;even if the tags are not present in the source document. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/global.html#edef-BODY&quot;&gt;BODY element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="aLink" id="aLink" type="DOMString" description="&lt;p&gt;Color of active links (after mouse-button down, but before&#10;mouse-button up). See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/global.html#adef-alink&quot;&gt;alink attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLBodyElement"/>
      <property name="background" id="background" type="DOMString" description="&lt;p&gt;URI of the background texture tile image. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/global.html#adef-background&quot;&gt;background attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLBodyElement"/>
      <property name="bgColor" id="bgColor" type="DOMString" description="&lt;p&gt;Document background color. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/graphics.html#adef-bgcolor&quot;&gt;bgcolor attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLBodyElement"/>
      <property name="link" id="link" type="DOMString" description="&lt;p&gt;Color of links that are not active and unvisited. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/global.html#adef-link&quot;&gt;link attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLBodyElement"/>
      <property name="text" id="text" type="DOMString" description="&lt;p&gt;Document text color. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/global.html#adef-text&quot;&gt;text attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLBodyElement"/>
      <property name="vLink" id="vLink" type="DOMString" description="&lt;p&gt;Color of links that have been visited by the user. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/global.html#adef-vlink&quot;&gt;vlink attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLBodyElement"/>
    </properties>
  </interface>
  <interface id="HTMLBRElement" name="HTMLBRElement" description="&lt;p&gt;Force a line break. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/text.html#edef-BR&quot;&gt;BR element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="clear" id="clear" type="DOMString" description="&lt;p&gt;Control flow of text around floats. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/graphics.html#adef-clear&quot;&gt;clear attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLBRElement"/>
    </properties>
  </interface>
  <interface id="HTMLButtonElement" name="HTMLButtonElement" description="&lt;p&gt;Push button. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#edef-BUTTON&quot;&gt;BUTTON element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="form" id="form" type="HTMLFormElement" description="&lt;p&gt;Returns the &lt;code&gt;FORM&lt;/code&gt; element containing this control.&#10;Returns null if this control is not within the context of a form.  &lt;/p&gt;" readonly="true" owner_id="HTMLButtonElement"/>
      <property name="accessKey" id="accessKey" type="DOMString" description="&lt;p&gt;A single character access key to give access to the form control. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-accesskey&quot;&gt;accesskey attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLButtonElement"/>
      <property name="disabled" id="disabled" type="boolean" description="&lt;p&gt;The control is unavailable in this context. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-disabled&quot;&gt;disabled attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLButtonElement"/>
      <property name="name" id="name" type="DOMString" description="&lt;p&gt;Form control or object name when submitted with a form. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-name-BUTTON&quot;&gt;name attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLButtonElement"/>
      <property name="tabIndex" id="tabIndex" type="long" description="&lt;p&gt;Index that represents the element's position in the tabbing order. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-tabindex&quot;&gt;tabindex attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLButtonElement"/>
      <property name="type" id="type" type="DOMString" description="&lt;p&gt;The type of button.&#10; See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-type-BUTTON&quot;&gt;type attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="true" owner_id="HTMLButtonElement"/>
      <property name="value" id="value" type="DOMString" description="&lt;p&gt;The current form control value. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-value-BUTTON&quot;&gt;value attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLButtonElement"/>
    </properties>
  </interface>
  <interface id="HTMLCollection" name="HTMLCollection" description="&lt;p&gt;An &lt;code&gt;HTMLCollection&lt;/code&gt; is a list of nodes. An individual node&#10;may be accessed by either ordinal index or the node's&#10;&lt;code&gt;name&lt;/code&gt; or &lt;code&gt;id&lt;/code&gt; attributes. &lt;emph&gt;Note:&lt;/emph&gt;&#10;Collections in the HTML DOM are assumed to be &lt;emph&gt;live&lt;/emph&gt; meaning&#10;that they are automatically updated when the underlying document is&#10;changed. &lt;/p&gt;">
    <methods>
      <method id="item" name="item" return_type="Node" owner_id="HTMLCollection" description="&lt;p&gt;This method retrieves a node specified by ordinal&#10;&#9;  index. Nodes are numbered in tree order (depth-first traversal&#10;&#9;  order).&lt;/p&gt;" return_description="&lt;p&gt;The &lt;code&gt;Node&lt;/code&gt; at the corresponding position upon&#10;&#9;     success. A value of &lt;code&gt;null&lt;/code&gt; is returned if the index is&#10;&#9;     out of range. &lt;/p&gt;">
        <parameter id="" name="index" type="unsigned long" owner_id="" description="&lt;p&gt;The index of the node to be fetched. The index origin is 0.&lt;/p&gt;"/>
      </method>
      <method id="namedItem" name="namedItem" return_type="Node" owner_id="HTMLCollection" description="&lt;p&gt;This method retrieves a &lt;code&gt;Node&lt;/code&gt; using a name. It&#10;&#9;  first searches for a &lt;code&gt;Node&lt;/code&gt; with a matching&#10;&#9;  &lt;code&gt;id&lt;/code&gt; attribute. If it doesn't find one, it then searches&#10;&#9;  for a &lt;code&gt;Node&lt;/code&gt; with a matching &lt;code&gt;name&lt;/code&gt; attribute,&#10;&#9;  but only on those elements that are allowed a name attribute.&#10;&#9;  &lt;/p&gt;" return_description="&lt;p&gt;The &lt;code&gt;Node&lt;/code&gt; with a &lt;code&gt;name&lt;/code&gt; or&#10;&#9;     &lt;code&gt;id&lt;/code&gt; attribute whose value corresponds to the specified&#10;&#9;     string. Upon failure (e.g., no node with this name exists),&#10;&#9;     returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;">
        <parameter id="" name="name" type="DOMString" owner_id="" description="&lt;p&gt;The name of the &lt;code&gt;Node&lt;/code&gt; to be fetched.&lt;/p&gt;"/>
      </method>
    </methods>
    <properties>
      <property name="length" id="length" type="unsigned long" description="&lt;p&gt;This attribute specifies the length or &lt;emph&gt;size&lt;/emph&gt; of the list. &lt;/p&gt;" readonly="true" owner_id="HTMLCollection"/>
    </properties>
  </interface>
  <interface id="HTMLDirectoryElement" name="HTMLDirectoryElement" description="&lt;p&gt;Directory list. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/lists.html#edef-DIR&quot;&gt;DIR element definition&lt;/loc&gt; in HTML 4.0. This element is deprecated in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="compact" id="compact" type="boolean" description="&lt;p&gt;Reduce spacing between list items. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/lists.html#adef-compact&quot;&gt;compact attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLDirectoryElement"/>
    </properties>
  </interface>
  <interface id="HTMLDivElement" name="HTMLDivElement" description="&lt;p&gt;Generic block container. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/global.html#edef-DIV&quot;&gt;DIV element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="align" id="align" type="DOMString" description="&lt;p&gt;Horizontal text alignment. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/graphics.html#adef-align&quot;&gt;align attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLDivElement"/>
    </properties>
  </interface>
  <interface id="HTMLDListElement" name="HTMLDListElement" description="&lt;p&gt;Definition list. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/lists.html#edef-DL&quot;&gt;DL element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="compact" id="compact" type="boolean" description="&lt;p&gt;Reduce spacing between list items. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/lists.html#adef-compact&quot;&gt;compact attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLDListElement"/>
    </properties>
  </interface>
  <interface id="HTMLDocument" name="HTMLDocument" description="&lt;p&gt;An &lt;code&gt;HTMLDocument&lt;/code&gt; is the root of the HTML hierarchy and&#10;holds the entire content. Beside providing access to the hierarchy, it&#10;also provides some convenience methods for accessing certain sets of&#10;information from the document.&lt;/p&gt;&#10;&#10;&lt;p&gt;The following properties have been deprecated in favor of the&#10;corresponding ones for the BODY element:&lt;/p&gt;&#10;&#10;&lt;ulist&gt;&#10;&lt;item&gt;&lt;p&gt;alinkColor&lt;/p&gt;&lt;/item&gt; &#10;&lt;item&gt;&lt;p&gt;background&lt;/p&gt;&lt;/item&gt;  &#10;&lt;item&gt;&lt;p&gt;bgColor&lt;/p&gt;&lt;/item&gt;  &#10;&lt;item&gt;&lt;p&gt;fgColor&lt;/p&gt;&lt;/item&gt;  &#10;&lt;item&gt;&lt;p&gt;linkColor&lt;/p&gt;&lt;/item&gt;  &#10;&lt;item&gt;&lt;p&gt;vlinkColor&lt;/p&gt;&lt;/item&gt;  &#10;&lt;/ulist&gt;&#10;&lt;p&gt; &lt;/p&gt;" parent_id="Document">
    <methods>
      <method id="open" name="open" return_type="void" owner_id="HTMLDocument" description="&lt;p&gt;&lt;emph&gt;Note.&lt;/emph&gt;&#10;This method and the ones following &#10;allow a user to add to or replace the structure&#10;model of a document using strings of unparsed HTML. At the time of &#10;writing alternate methods for providing similar functionality for &#10;both HTML and XML documents were being considered. The following methods&#10;may be deprecated at some point in the future in favor of a more&#10;general-purpose mechanism.&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;Open a document stream for writing. If a document exists in the&#10;target, this method clears it.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;"/>
      <method id="close" name="close" return_type="void" owner_id="HTMLDocument" description="&lt;p&gt;Closes a document stream opened by &lt;code&gt;open()&lt;/code&gt;&#10;and forces rendering.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;"/>
      <method id="write" name="write" return_type="void" owner_id="HTMLDocument" description="&lt;p&gt;Write a string of text to a document stream opened by&#10;&lt;code&gt;open()&lt;/code&gt;. The text is parsed into the document's structure&#10;model.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;">
        <parameter id="" name="text" type="DOMString" owner_id="" description="&lt;p&gt;The string to be parsed into some structure in the document structure&#10;model.&lt;/p&gt;"/>
      </method>
      <method id="writeln" name="writeln" return_type="void" owner_id="HTMLDocument" description="&lt;p&gt;Write a string of text followed by a newline character to a document&#10;stream opened by &lt;code&gt;open()&lt;/code&gt;. The text is parsed into the&#10;document's structure model.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;">
        <parameter id="" name="text" type="DOMString" owner_id="" description="&lt;p&gt;The string to be parsed into some structure in the document structure&#10;model.&lt;/p&gt;"/>
      </method>
      <method id="getElementById" name="getElementById" return_type="Element" owner_id="HTMLDocument" description="&lt;p&gt;Returns the Element whose &lt;code&gt;id&lt;/code&gt; is given by&#10;&#9;  elementId. If no such element exists, returns &lt;code&gt;null&lt;/code&gt;.&#10;&#9;  Behavior is not defined if more than one element&#10;&#9;  has this &lt;code&gt;id&lt;/code&gt;. &lt;/p&gt;" return_description="&lt;p&gt;The matching element.&lt;/p&gt;">
        <parameter id="" name="elementId" type="DOMString" owner_id="" description="&lt;p&gt;The unique &lt;code&gt;id&lt;/code&gt; value for an element.&lt;/p&gt;"/>
      </method>
      <method id="getElementsByName" name="getElementsByName" return_type="NodeList" owner_id="HTMLDocument" description="&lt;p&gt;Returns the (possibly empty) collection of elements whose&#10;&lt;code&gt;name&lt;/code&gt; value is given by &lt;code&gt;elementName&lt;/code&gt;.&lt;/p&gt;" return_description="&lt;p&gt;The matching elements.&lt;/p&gt;">
        <parameter id="" name="elementName" type="DOMString" owner_id="" description="&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; attribute value for an element.&lt;/p&gt;"/>
      </method>
    </methods>
    <properties>
      <property name="title" id="title" type="DOMString" description="&lt;p&gt;The title of a document as specified by the &lt;code&gt;TITLE&lt;/code&gt;&#10;element in the head of the document. &lt;/p&gt;" readonly="false" owner_id="HTMLDocument"/>
      <property name="referrer" id="referrer" type="DOMString" description="&lt;p&gt;Returns the URI of the page that linked to this page. The value is&#10;an empty string if the user navigated to the page directly (not&#10;through a link, but, for example, via a bookmark). &lt;/p&gt;" readonly="true" owner_id="HTMLDocument"/>
      <property name="domain" id="domain" type="DOMString" description="&lt;p&gt;The domain name of the server that served the document, or a null&#10;string if the server cannot be identified by a domain name. &lt;/p&gt;" readonly="true" owner_id="HTMLDocument"/>
      <property name="URL" id="URL" type="DOMString" description="&lt;p&gt;The complete URI of the document. &lt;/p&gt;" readonly="true" owner_id="HTMLDocument"/>
      <property name="body" id="body" type="HTMLElement" description="&lt;p&gt;The element that contains the content for the document. In documents&#10;with &lt;code&gt;BODY&lt;/code&gt; contents, returns the &lt;code&gt;BODY&lt;/code&gt;&#10;element, and in frameset documents, this returns the outermost&#10;&lt;code&gt;FRAMESET&lt;/code&gt; element. &lt;/p&gt;" readonly="false" owner_id="HTMLDocument"/>
      <property name="images" id="images" type="HTMLCollection" description="&lt;p&gt;A collection of all the &lt;code&gt;IMG&lt;/code&gt; elements in a document.&#10;The behavior is limited to &lt;code&gt;IMG&lt;/code&gt; elements for&#10;backwards compatibility.&#10; &lt;/p&gt;" readonly="true" owner_id="HTMLDocument"/>
      <property name="applets" id="applets" type="HTMLCollection" description="&lt;p&gt;A collection of all the &lt;code&gt;OBJECT&lt;/code&gt; elements that include&#10;applets and &lt;code&gt;APPLET&lt;/code&gt; (&lt;emph&gt;deprecated&lt;/emph&gt;) elements in&#10;a document. &lt;/p&gt;" readonly="true" owner_id="HTMLDocument"/>
      <property name="links" id="links" type="HTMLCollection" description="&lt;p&gt;A collection of all &lt;code&gt;AREA&lt;/code&gt; elements and&#10;anchor (&lt;code&gt;A&lt;/code&gt;) elements in a document&#10;with a value for the &lt;code&gt;href&lt;/code&gt; attribute. &lt;/p&gt;" readonly="true" owner_id="HTMLDocument"/>
      <property name="forms" id="forms" type="HTMLCollection" description="&lt;p&gt;A collection of all the forms of a document. &lt;/p&gt;" readonly="true" owner_id="HTMLDocument"/>
      <property name="anchors" id="anchors" type="HTMLCollection" description="&lt;p&gt;A collection of all the anchor (&lt;code&gt;A&lt;/code&gt;) elements in a document&#10;with a value for the &lt;code&gt;name&lt;/code&gt; attribute.&lt;emph&gt;Note.&lt;/emph&gt; For reasons of backwards&#10;compatibility, the returned set of anchors only contains those anchors created with the &lt;code&gt;name&lt;/code&gt; &#10;attribute, not those created with the &lt;code&gt;id&lt;/code&gt; attribute. &lt;/p&gt;" readonly="true" owner_id="HTMLDocument"/>
      <property name="cookie" id="cookie" type="DOMString" description="&lt;p&gt;The cookies associated with this document. If there are none, the&#10;value is an empty string. Otherwise, the value is a string: a&#10;semicolon-delimited list of &quot;name, value&quot; pairs for all the cookies&#10;associated with the page. For example, &lt;code&gt;name=value;expires=date&lt;/code&gt;. &lt;/p&gt;" readonly="false" owner_id="HTMLDocument"/>
    </properties>
  </interface>
  <interface id="HTMLElement" name="HTMLElement" description="&lt;p&gt;All HTML element interfaces derive from this class. Elements that only expose&#10;the HTML core attributes are represented by the base&#10;&lt;code&gt;HTMLElement&lt;/code&gt; interface. These elements are as follows:&lt;/p&gt;&#10;&#10;&lt;ulist&gt;&#10;&lt;item&gt;&lt;p&gt;HEAD&lt;/p&gt;&lt;/item&gt;  &#10;&lt;item&gt;&lt;p&gt;special: SUB, SUP, SPAN, BDO&lt;/p&gt;&lt;/item&gt;  &#10;&lt;item&gt;&lt;p&gt;font: TT, I, B, U, S, STRIKE, BIG, SMALL&lt;/p&gt;&lt;/item&gt;  &#10;&lt;item&gt;&lt;p&gt;phrase: EM, STRONG, DFN, CODE, SAMP, KBD, VAR, CITE, ACRONYM, ABBR&lt;/p&gt;&lt;/item&gt; &#10;&lt;item&gt;&lt;p&gt;list: DD, DT&lt;/p&gt;&lt;/item&gt; &#10;&lt;item&gt;&lt;p&gt;NOFRAMES, NOSCRIPT&lt;/p&gt;&lt;/item&gt;  &#10;&lt;item&gt;&lt;p&gt;ADDRESS, CENTER&lt;/p&gt;&lt;/item&gt;  &#10;&lt;/ulist&gt;&#10;&#10;&lt;p&gt;&lt;emph&gt;Note.&lt;/emph&gt; The &lt;code&gt;style&lt;/code&gt; attribute for this&#10;interface is reserved for future usage.&#10; &lt;/p&gt;" parent_id="Element">
    <methods/>
    <properties>
      <property name="id" id="id" type="DOMString" description="&lt;p&gt;The element's identifier. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/global.html#adef-id&quot;&gt;id attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLElement"/>
      <property name="title" id="title" type="DOMString" description="&lt;p&gt;The element's advisory title. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/global.html#adef-title&quot;&gt;title attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLElement"/>
      <property name="lang" id="lang" type="DOMString" description="&lt;p&gt;Language code defined in RFC 1766. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/dirlang.html#adef-lang&quot;&gt;lang attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLElement"/>
      <property name="dir" id="dir" type="DOMString" description="&lt;p&gt;Specifies the base direction of directionally neutral&#10;text and the directionality of tables. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/dirlang.html#adef-dir&quot;&gt;dir attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLElement"/>
      <property name="className" id="className" type="DOMString" description="&lt;p&gt;The class attribute of the element. This attribute has been renamed&#10;due to conflicts with the &quot;class&quot; keyword exposed by many languages. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/global.html#adef-class&quot;&gt;class attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLElement"/>
    </properties>
  </interface>
  <interface id="HTMLFieldSetElement" name="HTMLFieldSetElement" description="&lt;p&gt;Organizes form controls into logical groups. See the &#10;           &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#edef-FIELDSET&quot;&gt;FIELDSET &#10;           element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="form" id="form" type="HTMLFormElement" description="&lt;p&gt;Returns the &lt;code&gt;FORM&lt;/code&gt; element containing this control.&#10;Returns null if this control is not within the context of a form.  &lt;/p&gt;" readonly="true" owner_id="HTMLFieldSetElement"/>
    </properties>
  </interface>
  <interface id="HTMLFontElement" name="HTMLFontElement" description="&lt;p&gt;Local change to font. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/graphics.html#edef-FONT&quot;&gt;FONT element definition&lt;/loc&gt; in HTML 4.0. This element is deprecated in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="color" id="color" type="DOMString" description="&lt;p&gt;Font color. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/graphics.html#adef-color-FONT&quot;&gt;color attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLFontElement"/>
      <property name="face" id="face" type="DOMString" description="&lt;p&gt;Font face identifier. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/graphics.html#adef-face-FONT&quot;&gt;face attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLFontElement"/>
      <property name="size" id="size" type="DOMString" description="&lt;p&gt;Font size. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/graphics.html#adef-size-FONT&quot;&gt;size attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLFontElement"/>
    </properties>
  </interface>
  <interface id="HTMLFormElement" name="HTMLFormElement" description="&lt;p&gt;The &lt;code&gt;FORM&lt;/code&gt; element encompasses behavior similar to a&#10;collection and an element. It provides direct access to the contained&#10;input elements as well as the attributes of the form element. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#edef-FORM&quot;&gt;FORM element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods>
      <method id="submit" name="submit" return_type="void" owner_id="HTMLFormElement" description="&lt;p&gt;Submits the form. It performs the same action as a &#10;           submit button.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;"/>
      <method id="reset" name="reset" return_type="void" owner_id="HTMLFormElement" description="&lt;p&gt;Restores a form element's default values. It performs &#10;            the same action as a reset button.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;"/>
    </methods>
    <properties>
      <property name="elements" id="elements" type="HTMLCollection" description="&lt;p&gt;Returns a collection of all control elements in the form.&#10; &lt;/p&gt;" readonly="true" owner_id="HTMLFormElement"/>
      <property name="length" id="length" type="long" description="&lt;p&gt;The number of form controls in the form.&lt;/p&gt;" readonly="true" owner_id="HTMLFormElement"/>
      <property name="name" id="name" type="DOMString" description="&lt;p&gt;Names the form. &lt;/p&gt;" readonly="false" owner_id="HTMLFormElement"/>
      <property name="acceptCharset" id="acceptCharset" type="DOMString" description="&lt;p&gt;List of character sets supported by the server. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-accept-charset&quot;&gt;accept-charset attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLFormElement"/>
      <property name="action" id="action" type="DOMString" description="&lt;p&gt;Server-side form handler. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-action&quot;&gt;action attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLFormElement"/>
      <property name="enctype" id="enctype" type="DOMString" description="&lt;p&gt;The content type of the submitted form, &#10;generally &quot;application/x-www-form-urlencoded&quot;.  See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-enctype&quot;&gt;enctype attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLFormElement"/>
      <property name="method" id="method" type="DOMString" description="&lt;p&gt;HTTP method used to submit form. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-method&quot;&gt;method attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLFormElement"/>
      <property name="target" id="target" type="DOMString" description="&lt;p&gt;Frame to render the resource in. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-target&quot;&gt;target attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLFormElement"/>
    </properties>
  </interface>
  <interface id="HTMLFrameElement" name="HTMLFrameElement" description="&lt;p&gt;Create a frame. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#edef-FRAME&quot;&gt;FRAME element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="frameBorder" id="frameBorder" type="DOMString" description="&lt;p&gt;Request frame borders. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-frameborder&quot;&gt;frameborder attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLFrameElement"/>
      <property name="longDesc" id="longDesc" type="DOMString" description="&lt;p&gt;URI designating a long description of this image or frame. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-longdesc-FRAME&quot;&gt;longdesc attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLFrameElement"/>
      <property name="marginHeight" id="marginHeight" type="DOMString" description="&lt;p&gt;Frame margin height, in pixels. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-marginheight&quot;&gt;marginheight attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLFrameElement"/>
      <property name="marginWidth" id="marginWidth" type="DOMString" description="&lt;p&gt;Frame margin width, in pixels. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-marginwidth&quot;&gt;marginwidth attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLFrameElement"/>
      <property name="name" id="name" type="DOMString" description="&lt;p&gt;The frame name (object of the &lt;code&gt;target&lt;/code&gt; attribute). See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-name-FRAME&quot;&gt;name attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLFrameElement"/>
      <property name="noResize" id="noResize" type="boolean" description="&lt;p&gt;When true, forbid user from resizing frame. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-noresize&quot;&gt;noresize attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLFrameElement"/>
      <property name="scrolling" id="scrolling" type="DOMString" description="&lt;p&gt;Specify whether or not the frame should have scrollbars. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-scrolling&quot;&gt;scrolling attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLFrameElement"/>
      <property name="src" id="src" type="DOMString" description="&lt;p&gt;A URI designating the initial frame contents. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-src-FRAME&quot;&gt;src attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLFrameElement"/>
    </properties>
  </interface>
  <interface id="HTMLFrameSetElement" name="HTMLFrameSetElement" description="&lt;p&gt;Create a grid of frames. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#edef-FRAMESET&quot;&gt;FRAMESET element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="cols" id="cols" type="DOMString" description="&lt;p&gt;The number of columns of frames in the frameset. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-cols-FRAMESET&quot;&gt;cols attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLFrameSetElement"/>
      <property name="rows" id="rows" type="DOMString" description="&lt;p&gt;The number of rows of frames in the frameset. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-rows-FRAMESET&quot;&gt;rows attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLFrameSetElement"/>
    </properties>
  </interface>
  <interface id="HTMLHeadElement" name="HTMLHeadElement" description="&lt;p&gt;Document head information. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/global.html#edef-HEAD&quot;&gt;HEAD element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="profile" id="profile" type="DOMString" description="&lt;p&gt;URI designating a metadata profile. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/global.html#adef-profile&quot;&gt;profile attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLHeadElement"/>
    </properties>
  </interface>
  <interface id="HTMLHeadingElement" name="HTMLHeadingElement" description="&lt;p&gt;For the &lt;code&gt;H1&lt;/code&gt; to &lt;code&gt;H6&lt;/code&gt; elements. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/global.html#edef-H1&quot;&gt;H1 element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="align" id="align" type="DOMString" description="&lt;p&gt;Horizontal text alignment. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/graphics.html#adef-align&quot;&gt;align attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLHeadingElement"/>
    </properties>
  </interface>
  <interface id="HTMLHRElement" name="HTMLHRElement" description="&lt;p&gt;Create a horizontal rule. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/graphics.html#edef-HR&quot;&gt;HR element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="align" id="align" type="DOMString" description="&lt;p&gt;Align the rule on the page. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/graphics.html#adef-align-HR&quot;&gt;align attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLHRElement"/>
      <property name="noShade" id="noShade" type="boolean" description="&lt;p&gt;Indicates to the user agent that there should be no shading in the&#10;rendering of this element. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/graphics.html#adef-noshade&quot;&gt;noshade attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLHRElement"/>
      <property name="size" id="size" type="DOMString" description="&lt;p&gt;The height of the rule. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/graphics.html#adef-size-HR&quot;&gt;size attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLHRElement"/>
      <property name="width" id="width" type="DOMString" description="&lt;p&gt;The width of the rule. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/graphics.html#adef-width-HR&quot;&gt;width attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLHRElement"/>
    </properties>
  </interface>
  <interface id="HTMLHtmlElement" name="HTMLHtmlElement" description="&lt;p&gt;Root of an HTML document. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/global.html#edef-HTML&quot;&gt;HTML element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="version" id="version" type="DOMString" description="&lt;p&gt;Version information about the document's DTD. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/global.html#adef-version&quot;&gt;version attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLHtmlElement"/>
    </properties>
  </interface>
  <interface id="HTMLIFrameElement" name="HTMLIFrameElement" description="&lt;p&gt;Inline subwindows. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#edef-IFRAME&quot;&gt;IFRAME element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="align" id="align" type="DOMString" description="&lt;p&gt;Aligns this object (vertically or horizontally) &#10;with respect to its surrounding text. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-align-IMG&quot;&gt;align attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLIFrameElement"/>
      <property name="frameBorder" id="frameBorder" type="DOMString" description="&lt;p&gt;Request frame borders. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-frameborder&quot;&gt;frameborder attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLIFrameElement"/>
      <property name="height" id="height" type="DOMString" description="&lt;p&gt;Frame height. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-height-IFRAME&quot;&gt;height attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLIFrameElement"/>
      <property name="longDesc" id="longDesc" type="DOMString" description="&lt;p&gt;URI designating a long description of this image or frame. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-longdesc-IFRAME&quot;&gt;longdesc attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLIFrameElement"/>
      <property name="marginHeight" id="marginHeight" type="DOMString" description="&lt;p&gt;Frame margin height, in pixels. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-marginheight&quot;&gt;marginheight attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLIFrameElement"/>
      <property name="marginWidth" id="marginWidth" type="DOMString" description="&lt;p&gt;Frame margin width, in pixels. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-marginwidth&quot;&gt;marginwidth attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLIFrameElement"/>
      <property name="name" id="name" type="DOMString" description="&lt;p&gt;The frame name (object of the &lt;code&gt;target&lt;/code&gt; attribute). See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-name-IFRAME&quot;&gt;name attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLIFrameElement"/>
      <property name="scrolling" id="scrolling" type="DOMString" description="&lt;p&gt;Specify whether or not the frame should have scrollbars. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-scrolling&quot;&gt;scrolling attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLIFrameElement"/>
      <property name="src" id="src" type="DOMString" description="&lt;p&gt;A URI designating the initial frame contents. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-src-FRAME&quot;&gt;src attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLIFrameElement"/>
      <property name="width" id="width" type="DOMString" description="&lt;p&gt;Frame width. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-width-IFRAME&quot;&gt;width attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLIFrameElement"/>
    </properties>
  </interface>
  <interface id="HTMLImageElement" name="HTMLImageElement" description="&lt;p&gt;Embedded image. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#edef-IMG&quot;&gt;IMG element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="lowSrc" id="lowSrc" type="DOMString" description="&lt;p&gt;URI designating the source of this image, for low-resolution output. &lt;/p&gt;" readonly="false" owner_id="HTMLImageElement"/>
      <property name="name" id="name" type="DOMString" description="&lt;p&gt;The name of the element (for backwards compatibility). &lt;/p&gt;" readonly="false" owner_id="HTMLImageElement"/>
      <property name="align" id="align" type="DOMString" description="&lt;p&gt;Aligns this object (vertically or horizontally) &#10;with respect to its surrounding text. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-align-IMG&quot;&gt;align attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLImageElement"/>
      <property name="alt" id="alt" type="DOMString" description="&lt;p&gt;Alternate text for user agents not rendering the normal content&#10;of this element. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-alt&quot;&gt;alt attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLImageElement"/>
      <property name="border" id="border" type="DOMString" description="&lt;p&gt;Width of border around image. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-border-IMG&quot;&gt;border attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLImageElement"/>
      <property name="height" id="height" type="DOMString" description="&lt;p&gt;Override height. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-height-IMG&quot;&gt;height attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLImageElement"/>
      <property name="hspace" id="hspace" type="DOMString" description="&lt;p&gt;Horizontal space to the left and right of this image. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-hspace&quot;&gt;hspace attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLImageElement"/>
      <property name="isMap" id="isMap" type="boolean" description="&lt;p&gt;Use server-side image map. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-ismap&quot;&gt;ismap attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLImageElement"/>
      <property name="longDesc" id="longDesc" type="DOMString" description="&lt;p&gt;URI designating a long description of this image or frame. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-longdesc-IMG&quot;&gt;longdesc attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLImageElement"/>
      <property name="src" id="src" type="DOMString" description="&lt;p&gt;URI designating the source of this image. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-src-IMG&quot;&gt;src attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLImageElement"/>
      <property name="useMap" id="useMap" type="DOMString" description="&lt;p&gt;Use client-side image map. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-usemap&quot;&gt;usemap attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLImageElement"/>
      <property name="vspace" id="vspace" type="DOMString" description="&lt;p&gt;Vertical space above and below this image. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-vspace&quot;&gt;vspace attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLImageElement"/>
      <property name="width" id="width" type="DOMString" description="&lt;p&gt;Override width. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-width-IMG&quot;&gt;width attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLImageElement"/>
    </properties>
  </interface>
  <interface id="HTMLInputElement" name="HTMLInputElement" description="&lt;p&gt;Form control. &lt;emph&gt;Note.&lt;/emph&gt; Depending upon the environment&#10;the page is being viewed, the value property may be read-only for the&#10;file upload input type. For the &quot;password&quot; input type, the actual value&#10;returned may be masked to prevent unauthorized use. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#edef-INPUT&quot;&gt;INPUT element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods>
      <method id="blur" name="blur" return_type="void" owner_id="HTMLInputElement" description="&lt;p&gt;Removes keyboard focus from this element.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;"/>
      <method id="focus" name="focus" return_type="void" owner_id="HTMLInputElement" description="&lt;p&gt;Gives keyboard focus to this element.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;"/>
      <method id="select" name="select" return_type="void" owner_id="HTMLInputElement" description="&lt;p&gt;Select the contents of the text area. For &lt;code&gt;INPUT&lt;/code&gt; elements&#10;whose &lt;code&gt;type&lt;/code&gt; attribute has one of the following values:&#10;&quot;Text&quot;, &quot;File&quot;, or &quot;Password&quot;.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;"/>
      <method id="click" name="click" return_type="void" owner_id="HTMLInputElement" description="&lt;p&gt;Simulate a mouse-click. For &lt;code&gt;INPUT&lt;/code&gt; elements whose&#10;&lt;code&gt;type&lt;/code&gt; attribute has one of the following&#10;values: &quot;Button&quot;, &quot;Checkbox&quot;, &quot;Radio&quot;, &quot;Reset&quot;, or &quot;Submit&quot;.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;"/>
    </methods>
    <properties>
      <property name="defaultValue" id="defaultValue" type="DOMString" description="&lt;p&gt;Stores the initial control value (i.e., the initial value of&#10;&lt;code&gt;value&lt;/code&gt;). &lt;/p&gt;" readonly="false" owner_id="HTMLInputElement"/>
      <property name="defaultChecked" id="defaultChecked" type="boolean" description="&lt;p&gt;When &lt;code&gt;type&lt;/code&gt; has the value &quot;Radio&quot; or &quot;Checkbox&quot;, &#10;stores the initial value of the &lt;code&gt;checked&lt;/code&gt; attribute. &lt;/p&gt;" readonly="false" owner_id="HTMLInputElement"/>
      <property name="form" id="form" type="HTMLFormElement" description="&lt;p&gt;Returns the &lt;code&gt;FORM&lt;/code&gt; element containing this control.&#10;Returns null if this control is not within the context of a form.  &lt;/p&gt;" readonly="true" owner_id="HTMLInputElement"/>
      <property name="accept" id="accept" type="DOMString" description="&lt;p&gt;A comma-separated list of content types that a server processing this&#10;form will handle correctly. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-accept&quot;&gt;accept attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLInputElement"/>
      <property name="accessKey" id="accessKey" type="DOMString" description="&lt;p&gt;A single character access key to give access to the form control. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-accesskey&quot;&gt;accesskey attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLInputElement"/>
      <property name="align" id="align" type="DOMString" description="&lt;p&gt;Aligns this object (vertically or horizontally) &#10;with respect to its surrounding text. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-align-IMG&quot;&gt;align attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLInputElement"/>
      <property name="alt" id="alt" type="DOMString" description="&lt;p&gt;Alternate text for user agents not rendering the normal content&#10;of this element. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-alt&quot;&gt;alt attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLInputElement"/>
      <property name="checked" id="checked" type="boolean" description="&lt;p&gt;Describes whether a radio or check box is checked, when&#10;&lt;code&gt;type&lt;/code&gt; has the value &quot;Radio&quot; or &quot;Checkbox&quot;.  The value is&#10;TRUE if explicitly set. Represents the current state of the checkbox&#10;or radio button. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-checked&quot;&gt;checked attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLInputElement"/>
      <property name="disabled" id="disabled" type="boolean" description="&lt;p&gt;The control is unavailable in this context. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-disabled&quot;&gt;disabled attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLInputElement"/>
      <property name="maxLength" id="maxLength" type="long" description="&lt;p&gt;Maximum number of characters for text fields, when &lt;code&gt;type&lt;/code&gt;&#10;has the value &quot;Text&quot; or &quot;Password&quot;. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-maxlength&quot;&gt;maxlength attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLInputElement"/>
      <property name="name" id="name" type="DOMString" description="&lt;p&gt;Form control or object name when submitted with a form. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-name-INPUT&quot;&gt;name attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLInputElement"/>
      <property name="readOnly" id="readOnly" type="boolean" description="&lt;p&gt;This control is read-only. When &lt;code&gt;type&lt;/code&gt; has the value &quot;text&quot;&#10;or &quot;password&quot; only. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-readonly&quot;&gt;readonly attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLInputElement"/>
      <property name="size" id="size" type="DOMString" description="&lt;p&gt;Size information. The precise meaning is specific to each type of&#10;field. &#10; See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-size-INPUT&quot;&gt;size attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLInputElement"/>
      <property name="src" id="src" type="DOMString" description="&lt;p&gt;When the &lt;code&gt;type&lt;/code&gt; attribute has the value &quot;Image&quot;, this&#10;attribute specifies the location of the image to be used to decorate&#10;the graphical submit button. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-src&quot;&gt;src attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLInputElement"/>
      <property name="tabIndex" id="tabIndex" type="long" description="&lt;p&gt;Index that represents the element's position in the tabbing order. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-tabindex&quot;&gt;tabindex attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLInputElement"/>
      <property name="type" id="type" type="DOMString" description="&lt;p&gt;The type of control created. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-type-INPUT&quot;&gt;type attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="true" owner_id="HTMLInputElement"/>
      <property name="useMap" id="useMap" type="DOMString" description="&lt;p&gt;Use client-side image map. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-usemap&quot;&gt;usemap attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLInputElement"/>
      <property name="value" id="value" type="DOMString" description="&lt;p&gt;The current form control value. Used for radio buttons and check boxes. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-value-INPUT&quot;&gt;value attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLInputElement"/>
    </properties>
  </interface>
  <interface id="HTMLIsIndexElement" name="HTMLIsIndexElement" description="&lt;p&gt;This element is used&#10;for single-line text input. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#edef-ISINDEX&quot;&gt;ISINDEX element definition&lt;/loc&gt; in HTML 4.0. This element is deprecated in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="form" id="form" type="HTMLFormElement" description="&lt;p&gt;Returns the &lt;code&gt;FORM&lt;/code&gt; element containing this control.&#10;Returns null if this control is not within the context of a form.  &lt;/p&gt;" readonly="true" owner_id="HTMLIsIndexElement"/>
      <property name="prompt" id="prompt" type="DOMString" description="&lt;p&gt;The prompt message. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-prompt&quot;&gt;prompt attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLIsIndexElement"/>
    </properties>
  </interface>
  <interface id="HTMLLabelElement" name="HTMLLabelElement" description="&lt;p&gt;Form field label text. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#edef-LABEL&quot;&gt;LABEL element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="form" id="form" type="HTMLFormElement" description="&lt;p&gt;Returns the &lt;code&gt;FORM&lt;/code&gt; element containing this control.&#10;Returns null if this control is not within the context of a form.  &lt;/p&gt;" readonly="true" owner_id="HTMLLabelElement"/>
      <property name="accessKey" id="accessKey" type="DOMString" description="&lt;p&gt;A single character access key to give access to the form control. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-accesskey&quot;&gt;accesskey attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLLabelElement"/>
      <property name="htmlFor" id="htmlFor" type="DOMString" description="&lt;p&gt;This attribute links this label with another form control&#10;by &lt;code&gt;id&lt;/code&gt; attribute. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-for&quot;&gt;for attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLLabelElement"/>
    </properties>
  </interface>
  <interface id="HTMLLegendElement" name="HTMLLegendElement" description="&lt;p&gt;Provides a caption for a &lt;code&gt;FIELDSET&lt;/code&gt; grouping.  See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#edef-LEGEND&quot;&gt;LEGEND element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="form" id="form" type="HTMLFormElement" description="&lt;p&gt;Returns the &lt;code&gt;FORM&lt;/code&gt; element containing this control.&#10;Returns null if this control is not within the context of a form.  &lt;/p&gt;" readonly="true" owner_id="HTMLLegendElement"/>
      <property name="accessKey" id="accessKey" type="DOMString" description="&lt;p&gt;A single character access key to give access to the form control. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-accesskey&quot;&gt;accesskey attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLLegendElement"/>
      <property name="align" id="align" type="DOMString" description="&lt;p&gt;Text alignment relative to &lt;code&gt;FIELDSET&lt;/code&gt;. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-align-LEGEND&quot;&gt;align attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLLegendElement"/>
    </properties>
  </interface>
  <interface id="HTMLLIElement" name="HTMLLIElement" description="&lt;p&gt;List item. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/lists.html#edef-LI&quot;&gt;LI element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="type" id="type" type="DOMString" description="&lt;p&gt;List item bullet style. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/lists.html#adef-type-LI&quot;&gt;type attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLLIElement"/>
      <property name="value" id="value" type="long" description="&lt;p&gt;Reset sequence number when used in &lt;code&gt;OL&lt;/code&gt; See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/lists.html#adef-value-LI&quot;&gt;value attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLLIElement"/>
    </properties>
  </interface>
  <interface id="HTMLLinkElement" name="HTMLLinkElement" description="&lt;p&gt;The &lt;code&gt;LINK&lt;/code&gt; element specifies a link to an external&#10;resource, and defines this document's relationship to that resource&#10;(or vice versa).  See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/links.html#edef-LINK&quot;&gt;LINK element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="disabled" id="disabled" type="boolean" description="&lt;p&gt;Enables/disables the link. This is currently only used for style sheet&#10;links, and may be used to activate or deactivate style sheets. &lt;/p&gt;" readonly="false" owner_id="HTMLLinkElement"/>
      <property name="charset" id="charset" type="DOMString" description="&lt;p&gt;The character encoding of the resource being linked to. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/links.html#adef-charset&quot;&gt;charset attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLLinkElement"/>
      <property name="href" id="href" type="DOMString" description="&lt;p&gt;The URI of the linked resource. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/links.html#adef-href&quot;&gt;href attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLLinkElement"/>
      <property name="hreflang" id="hreflang" type="DOMString" description="&lt;p&gt;Language code of the linked resource. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/links.html#adef-hreflang&quot;&gt;hreflang attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLLinkElement"/>
      <property name="media" id="media" type="DOMString" description="&lt;p&gt;Designed for use with one or more target media. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/styles.html#adef-media&quot;&gt;media attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLLinkElement"/>
      <property name="rel" id="rel" type="DOMString" description="&lt;p&gt;Forward link type. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/links.html#adef-rel&quot;&gt;rel attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLLinkElement"/>
      <property name="rev" id="rev" type="DOMString" description="&lt;p&gt;Reverse link type. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/links.html#adef-rev&quot;&gt;rev attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLLinkElement"/>
      <property name="target" id="target" type="DOMString" description="&lt;p&gt;Frame to render the resource in. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-target&quot;&gt;target attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLLinkElement"/>
      <property name="type" id="type" type="DOMString" description="&lt;p&gt;Advisory content type. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/links.html#adef-type-A&quot;&gt;type attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLLinkElement"/>
    </properties>
  </interface>
  <interface id="HTMLMapElement" name="HTMLMapElement" description="&lt;p&gt;Client-side image map. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#edef-MAP&quot;&gt;MAP element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="areas" id="areas" type="HTMLCollection" description="&lt;p&gt;The list of areas defined for the image map. &lt;/p&gt;" readonly="true" owner_id="HTMLMapElement"/>
      <property name="name" id="name" type="DOMString" description="&lt;p&gt;Names the map (for use with &lt;code&gt;usemap&lt;/code&gt;). See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-name-MAP&quot;&gt;name attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLMapElement"/>
    </properties>
  </interface>
  <interface id="HTMLMenuElement" name="HTMLMenuElement" description="&lt;p&gt;Menu list. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/lists.html#edef-MENU&quot;&gt;MENU element definition&lt;/loc&gt; in HTML 4.0. This element is deprecated in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="compact" id="compact" type="boolean" description="&lt;p&gt;Reduce spacing between list items. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/lists.html#adef-compact&quot;&gt;compact attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLMenuElement"/>
    </properties>
  </interface>
  <interface id="HTMLMetaElement" name="HTMLMetaElement" description="&lt;p&gt;This contains generic meta-information about the document. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/global.html#edef-META&quot;&gt;META element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="content" id="content" type="DOMString" description="&lt;p&gt;Associated information. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/global.html#adef-content&quot;&gt;content attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLMetaElement"/>
      <property name="httpEquiv" id="httpEquiv" type="DOMString" description="&lt;p&gt;HTTP response header name. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/global.html#adef-http-equiv&quot;&gt;http-equiv attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLMetaElement"/>
      <property name="name" id="name" type="DOMString" description="&lt;p&gt;Meta information name. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/global.html#adef-name-META&quot;&gt;name attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLMetaElement"/>
      <property name="scheme" id="scheme" type="DOMString" description="&lt;p&gt;Select form of content. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/global.html#adef-scheme&quot;&gt;scheme attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLMetaElement"/>
    </properties>
  </interface>
  <interface id="HTMLModElement" name="HTMLModElement" description="&lt;p&gt;Notice of modification to part of a document. See the &#10;&#9;&lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/text.html#edef-ins&quot;&gt;INS&lt;/loc&gt; &#10;&#9;and &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/text.html#edef-del&quot;&gt;DEL&lt;/loc&gt; &#10;&#9;element definitions in HTML 4.0. &lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="cite" id="cite" type="DOMString" description="&lt;p&gt;A URI designating a document that describes the reason for&#10;the change. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/&quot;&gt;cite attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLModElement"/>
      <property name="dateTime" id="dateTime" type="DOMString" description="&lt;p&gt;The date and time of the change. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/text.html#adef-datetime&quot;&gt;datetime attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLModElement"/>
    </properties>
  </interface>
  <interface id="HTMLObjectElement" name="HTMLObjectElement" description="&lt;p&gt;Generic embedded object. &lt;emph&gt;Note.&lt;/emph&gt; In principle, all&#10;properties on the object element are read-write but in some&#10;environments some properties may be read-only once the underlying&#10;object is instantiated. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#edef-OBJECT&quot;&gt;OBJECT element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="form" id="form" type="HTMLFormElement" description="&lt;p&gt;Returns the &lt;code&gt;FORM&lt;/code&gt; element containing this control.&#10;Returns null if this control is not within the context of a form.  &lt;/p&gt;" readonly="true" owner_id="HTMLObjectElement"/>
      <property name="code" id="code" type="DOMString" description="&lt;p&gt;Applet class file. See the &lt;code&gt;code&lt;/code&gt; attribute for&#10;HTMLAppletElement. &lt;/p&gt;" readonly="false" owner_id="HTMLObjectElement"/>
      <property name="align" id="align" type="DOMString" description="&lt;p&gt;Aligns this object (vertically or horizontally) &#10;with respect to its surrounding text. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-align-IMG&quot;&gt;align attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLObjectElement"/>
      <property name="archive" id="archive" type="DOMString" description="&lt;p&gt;Space-separated list of archives. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-archive-OBJECT&quot;&gt;archive attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLObjectElement"/>
      <property name="border" id="border" type="DOMString" description="&lt;p&gt;Width of border around the object. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-border&quot;&gt;border attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLObjectElement"/>
      <property name="codeBase" id="codeBase" type="DOMString" description="&lt;p&gt;Base URI for &lt;code&gt;classid&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt;, and&#10;&lt;code&gt;archive&lt;/code&gt; attributes. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-codebase-OBJECT&quot;&gt;codebase attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLObjectElement"/>
      <property name="codeType" id="codeType" type="DOMString" description="&lt;p&gt;Content type for data downloaded via &lt;code&gt;classid&lt;/code&gt; attribute. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-codetype&quot;&gt;codetype attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLObjectElement"/>
      <property name="data" id="data" type="DOMString" description="&lt;p&gt;A URI specifying the location of the object's data.  See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-data&quot;&gt;data attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLObjectElement"/>
      <property name="declare" id="declare" type="boolean" description="&lt;p&gt;Declare (for future reference), but do not instantiate, this&#10;object. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-declare&quot;&gt;declare attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLObjectElement"/>
      <property name="height" id="height" type="DOMString" description="&lt;p&gt;Override height. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-height-IMG&quot;&gt;height attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLObjectElement"/>
      <property name="hspace" id="hspace" type="DOMString" description="&lt;p&gt;Horizontal space to the left and right of this image, applet, or object. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-hspace&quot;&gt;hspace attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLObjectElement"/>
      <property name="name" id="name" type="DOMString" description="&lt;p&gt;Form control or object name when submitted with a form. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-name-INPUT&quot;&gt;name attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLObjectElement"/>
      <property name="standby" id="standby" type="DOMString" description="&lt;p&gt;Message to render while loading the object. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-standby&quot;&gt;standby attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLObjectElement"/>
      <property name="tabIndex" id="tabIndex" type="long" description="&lt;p&gt;Index that represents the element's position in the tabbing order. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-tabindex&quot;&gt;tabindex attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLObjectElement"/>
      <property name="type" id="type" type="DOMString" description="&lt;p&gt;Content type for data downloaded via &lt;code&gt;data&lt;/code&gt; attribute. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-type-OBJECT&quot;&gt;type attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLObjectElement"/>
      <property name="useMap" id="useMap" type="DOMString" description="&lt;p&gt;Use client-side image map. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-usemap&quot;&gt;usemap attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLObjectElement"/>
      <property name="vspace" id="vspace" type="DOMString" description="&lt;p&gt;Vertical space above and below this image, applet, or object. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-vspace&quot;&gt;vspace attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLObjectElement"/>
      <property name="width" id="width" type="DOMString" description="&lt;p&gt;Override width. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-width-IMG&quot;&gt;width attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLObjectElement"/>
    </properties>
  </interface>
  <interface id="HTMLOListElement" name="HTMLOListElement" description="&lt;p&gt;Ordered list. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/lists.html#edef-OL&quot;&gt;OL element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="compact" id="compact" type="boolean" description="&lt;p&gt;Reduce spacing between list items. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/lists.html#adef-compact&quot;&gt;compact attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLOListElement"/>
      <property name="start" id="start" type="long" description="&lt;p&gt;Starting sequence number. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/lists.html#adef-start&quot;&gt;start attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLOListElement"/>
      <property name="type" id="type" type="DOMString" description="&lt;p&gt;Numbering style. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/lists.html#adef-type-OL&quot;&gt;type attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLOListElement"/>
    </properties>
  </interface>
  <interface id="HTMLOptGroupElement" name="HTMLOptGroupElement" description="&lt;p&gt;Group options together in logical subdivisions. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#edef-OPTGROUP&quot;&gt;OPTGROUP element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="disabled" id="disabled" type="boolean" description="&lt;p&gt;The control is unavailable in this context. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-disabled&quot;&gt;disabled attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLOptGroupElement"/>
      <property name="label" id="label" type="DOMString" description="&lt;p&gt;Assigns a label to this option group. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-label-OPTGROUP&quot;&gt;label attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLOptGroupElement"/>
    </properties>
  </interface>
  <interface id="HTMLOptionElement" name="HTMLOptionElement" description="&lt;p&gt;A selectable choice. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#edef-OPTION&quot;&gt;OPTION element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="form" id="form" type="HTMLFormElement" description="&lt;p&gt;Returns the &lt;code&gt;FORM&lt;/code&gt; element containing this control.&#10;Returns null if this control is not within the context of a form.  &lt;/p&gt;" readonly="true" owner_id="HTMLOptionElement"/>
      <property name="defaultSelected" id="defaultSelected" type="boolean" description="&lt;p&gt;Stores the initial value of the &lt;code&gt;selected&lt;/code&gt; attribute. &lt;/p&gt;" readonly="false" owner_id="HTMLOptionElement"/>
      <property name="text" id="text" type="DOMString" description="&lt;p&gt;The text contained within the option element.  &lt;/p&gt;" readonly="true" owner_id="HTMLOptionElement"/>
      <property name="index" id="index" type="long" description="&lt;p&gt;The index of this &lt;code&gt;OPTION&lt;/code&gt; in its parent &lt;code&gt;SELECT&lt;/code&gt;.  &lt;/p&gt;" readonly="false" owner_id="HTMLOptionElement"/>
      <property name="disabled" id="disabled" type="boolean" description="&lt;p&gt;The control is unavailable in this context. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-disabled&quot;&gt;disabled attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLOptionElement"/>
      <property name="label" id="label" type="DOMString" description="&lt;p&gt;Option label for use in hierarchical menus. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-label-OPTION&quot;&gt;label attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLOptionElement"/>
      <property name="selected" id="selected" type="boolean" description="&lt;p&gt;Means that this option is initially selected. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-selected&quot;&gt;selected attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="true" owner_id="HTMLOptionElement"/>
      <property name="value" id="value" type="DOMString" description="&lt;p&gt;The current form control value. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-value-OPTION&quot;&gt;value attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLOptionElement"/>
    </properties>
  </interface>
  <interface id="HTMLParagraphElement" name="HTMLParagraphElement" description="&lt;p&gt;Paragraphs. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/text.html#edef-P&quot;&gt;P element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="align" id="align" type="DOMString" description="&lt;p&gt;Horizontal text alignment. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/graphics.html#adef-align&quot;&gt;align attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLParagraphElement"/>
    </properties>
  </interface>
  <interface id="HTMLParamElement" name="HTMLParamElement" description="&lt;p&gt;Parameters fed to the &lt;code&gt;OBJECT&lt;/code&gt; element. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#edef-PARAM&quot;&gt;PARAM element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="name" id="name" type="DOMString" description="&lt;p&gt;The name of a run-time parameter. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-name-PARAM&quot;&gt;name attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLParamElement"/>
      <property name="type" id="type" type="DOMString" description="&lt;p&gt;Content type for the &lt;code&gt;value&lt;/code&gt; attribute when&#10;&lt;code&gt;valuetype&lt;/code&gt; has the value &quot;ref&quot;. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-type-PARAM&quot;&gt;type attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLParamElement"/>
      <property name="value" id="value" type="DOMString" description="&lt;p&gt;The value of a run-time parameter. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-value-PARAM&quot;&gt;value attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLParamElement"/>
      <property name="valueType" id="valueType" type="DOMString" description="&lt;p&gt;Information about the meaning of the &lt;code&gt;value&lt;/code&gt; attribute&#10;value. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/objects.html#adef-valuetype&quot;&gt;valuetype attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLParamElement"/>
    </properties>
  </interface>
  <interface id="HTMLPreElement" name="HTMLPreElement" description="&lt;p&gt;Preformatted text. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/text.html#edef-PRE&quot;&gt;PRE element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="width" id="width" type="long" description="&lt;p&gt;Fixed width for content. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/text.html#adef-width-PRE&quot;&gt;width attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLPreElement"/>
    </properties>
  </interface>
  <interface id="HTMLQuoteElement" name="HTMLQuoteElement" description="&lt;p&gt;For the &lt;code&gt;Q&lt;/code&gt; and &lt;code&gt;BLOCKQUOTE&lt;/code&gt; elements. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/text.html#edef-Q&quot;&gt;Q element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="cite" id="cite" type="DOMString" description="&lt;p&gt;A URI designating a document that designates a source document or message. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/text.html#adef-cite-Q&quot;&gt;cite attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLQuoteElement"/>
    </properties>
  </interface>
  <interface id="HTMLScriptElement" name="HTMLScriptElement" description="&lt;p&gt;Script statements. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/scripts.html#edef-SCRIPT&quot;&gt;SCRIPT element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="text" id="text" type="DOMString" description="&lt;p&gt;The script content of the element. &lt;/p&gt;" readonly="false" owner_id="HTMLScriptElement"/>
      <property name="htmlFor" id="htmlFor" type="DOMString" description="&lt;p&gt;&lt;emph&gt;Reserved for future use.&lt;/emph&gt; &lt;/p&gt;" readonly="false" owner_id="HTMLScriptElement"/>
      <property name="event" id="event" type="DOMString" description="&lt;p&gt;&lt;emph&gt;Reserved for future use.&lt;/emph&gt; &lt;/p&gt;" readonly="false" owner_id="HTMLScriptElement"/>
      <property name="charset" id="charset" type="DOMString" description="&lt;p&gt;The character encoding of the linked resource. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/links.html#adef-charset&quot;&gt;charset attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLScriptElement"/>
      <property name="defer" id="defer" type="boolean" description="&lt;p&gt;Indicates that the user agent can defer processing of the script.  See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/scripts.html#adef-defer&quot;&gt;defer attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLScriptElement"/>
      <property name="src" id="src" type="DOMString" description="&lt;p&gt;URI designating an external script. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/scripts.html#adef-src-SCRIPT&quot;&gt;src attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLScriptElement"/>
      <property name="type" id="type" type="DOMString" description="&lt;p&gt;The content type of the script language. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/scripts.html#adef-type-SCRIPT&quot;&gt;type attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLScriptElement"/>
    </properties>
  </interface>
  <interface id="HTMLSelectElement" name="HTMLSelectElement" description="&lt;p&gt;The select element allows the selection of an option. The contained&#10;options can be directly accessed through the select element as a&#10;collection. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#edef-SELECT&quot;&gt;SELECT element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods>
      <method id="add" name="add" return_type="void" owner_id="HTMLSelectElement" description="&lt;p&gt;Add a new element to the collection of &lt;code&gt;OPTION&lt;/code&gt; elements&#10;for this &lt;code&gt;SELECT&lt;/code&gt;.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;">
        <parameter id="" name="element" type="HTMLElement" owner_id="" description="&lt;p&gt;The element to add.&lt;/p&gt;"/>
        <parameter id="" name="before" type="HTMLElement" owner_id="" description="&lt;p&gt;The element to insert before, or NULL for the head of the list.&lt;/p&gt;"/>
      </method>
      <method id="remove" name="remove" return_type="void" owner_id="HTMLSelectElement" description="&lt;p&gt;Remove an element from the collection of &lt;code&gt;OPTION&lt;/code&gt; elements&#10;for this &lt;code&gt;SELECT&lt;/code&gt;. Does nothing if no element has the given&#10;index.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;">
        <parameter id="" name="index" type="long" owner_id="" description="&lt;p&gt;The index of the item to remove.&lt;/p&gt;"/>
      </method>
      <method id="blur" name="blur" return_type="void" owner_id="HTMLSelectElement" description="&lt;p&gt;Removes keyboard focus from this element.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;"/>
      <method id="focus" name="focus" return_type="void" owner_id="HTMLSelectElement" description="&lt;p&gt;Gives keyboard focus to this element.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;"/>
    </methods>
    <properties>
      <property name="type" id="type" type="DOMString" description="&lt;p&gt;The type of control created. &lt;/p&gt;" readonly="true" owner_id="HTMLSelectElement"/>
      <property name="selectedIndex" id="selectedIndex" type="long" description="&lt;p&gt;The ordinal index of the selected option. The value -1 is returned if&#10;no element is selected. If multiple options are selected, the index of&#10;the first selected option is returned. &lt;/p&gt;" readonly="false" owner_id="HTMLSelectElement"/>
      <property name="value" id="value" type="DOMString" description="&lt;p&gt;The current form control value. &lt;/p&gt;" readonly="false" owner_id="HTMLSelectElement"/>
      <property name="length" id="length" type="long" description="&lt;p&gt;The number of options in this &lt;code&gt;SELECT&lt;/code&gt;. &lt;/p&gt;" readonly="true" owner_id="HTMLSelectElement"/>
      <property name="form" id="form" type="HTMLFormElement" description="&lt;p&gt;Returns the &lt;code&gt;FORM&lt;/code&gt; element containing this control.&#10;Returns null if this control is not within the context of a form.  &lt;/p&gt;" readonly="true" owner_id="HTMLSelectElement"/>
      <property name="options" id="options" type="HTMLCollection" description="&lt;p&gt;The collection of &lt;code&gt;OPTION&lt;/code&gt; elements contained by this element. &lt;/p&gt;" readonly="true" owner_id="HTMLSelectElement"/>
      <property name="disabled" id="disabled" type="boolean" description="&lt;p&gt;The control is unavailable in this context. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-disabled&quot;&gt;disabled attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLSelectElement"/>
      <property name="multiple" id="multiple" type="boolean" description="&lt;p&gt;If true, multiple &lt;code&gt;OPTION&lt;/code&gt; elements may &#10;be selected in this &lt;code&gt;SELECT&lt;/code&gt;. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-multiple&quot;&gt;multiple attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLSelectElement"/>
      <property name="name" id="name" type="DOMString" description="&lt;p&gt;Form control or object name when submitted with a form. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-name-SELECT&quot;&gt;name attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLSelectElement"/>
      <property name="size" id="size" type="long" description="&lt;p&gt;Number of visible rows. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-size-SELECT&quot;&gt;size attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLSelectElement"/>
      <property name="tabIndex" id="tabIndex" type="long" description="&lt;p&gt;Index that represents the element's position in the tabbing order. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-tabindex&quot;&gt;tabindex attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLSelectElement"/>
    </properties>
  </interface>
  <interface id="HTMLStyleElement" name="HTMLStyleElement" description="&lt;p&gt;Style information. A more detailed style sheet object model&#10;&#9;is planned to be&#10;defined in a separate document. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/styles.html#edef-STYLE&quot;&gt;STYLE element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="disabled" id="disabled" type="boolean" description="&lt;p&gt;Enables/disables the style sheet.  &lt;/p&gt;" readonly="false" owner_id="HTMLStyleElement"/>
      <property name="media" id="media" type="DOMString" description="&lt;p&gt;Designed for use with one or more target media. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/styles.html#adef-media&quot;&gt;media attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLStyleElement"/>
      <property name="type" id="type" type="DOMString" description="&lt;p&gt;The style sheet language (Internet media type). See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/styles.html#adef-type-STYLE&quot;&gt;type attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLStyleElement"/>
    </properties>
  </interface>
  <interface id="HTMLTableCaptionElement" name="HTMLTableCaptionElement" description="&lt;p&gt;Table caption See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#edef-CAPTION&quot;&gt;CAPTION element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="align" id="align" type="DOMString" description="&lt;p&gt;Caption alignment with respect to the table. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-align-CAPTION&quot;&gt;align attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableCaptionElement"/>
    </properties>
  </interface>
  <interface id="HTMLTableCellElement" name="HTMLTableCellElement" description="&lt;p&gt;The object used to represent the &lt;code&gt;TH&lt;/code&gt; and &lt;code&gt;TD&lt;/code&gt;&#10;elements. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#edef-TD&quot;&gt;TD element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="cellIndex" id="cellIndex" type="long" description="&lt;p&gt;The index of this cell in the row. &lt;/p&gt;" readonly="false" owner_id="HTMLTableCellElement"/>
      <property name="abbr" id="abbr" type="DOMString" description="&lt;p&gt;Abbreviation for header cells. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-abbr&quot;&gt;abbr attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableCellElement"/>
      <property name="align" id="align" type="DOMString" description="&lt;p&gt;Horizontal alignment of data in cell. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-align-TD&quot;&gt;align attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableCellElement"/>
      <property name="axis" id="axis" type="DOMString" description="&lt;p&gt;Names group of related headers. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-axis&quot;&gt;axis attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableCellElement"/>
      <property name="bgColor" id="bgColor" type="DOMString" description="&lt;p&gt;Cell background color. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/graphics.html#adef-bgcolor&quot;&gt;bgcolor attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableCellElement"/>
      <property name="ch" id="ch" type="DOMString" description="&lt;p&gt;Alignment character for cells in a column. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-char&quot;&gt;char attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableCellElement"/>
      <property name="chOff" id="chOff" type="DOMString" description="&lt;p&gt;Offset of alignment character. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-charoff&quot;&gt;charoff attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableCellElement"/>
      <property name="colSpan" id="colSpan" type="long" description="&lt;p&gt;Number of columns spanned by cell. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-colspan&quot;&gt;colspan attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableCellElement"/>
      <property name="headers" id="headers" type="DOMString" description="&lt;p&gt;List of &lt;code&gt;id&lt;/code&gt; attribute values for header cells. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-headers&quot;&gt;headers attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableCellElement"/>
      <property name="height" id="height" type="DOMString" description="&lt;p&gt;Cell height. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-height-TH&quot;&gt;height attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableCellElement"/>
      <property name="noWrap" id="noWrap" type="boolean" description="&lt;p&gt;Suppress word wrapping. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-nowrap&quot;&gt;nowrap attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableCellElement"/>
      <property name="rowSpan" id="rowSpan" type="long" description="&lt;p&gt;Number of rows spanned by cell. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-rowspan&quot;&gt;rowspan attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableCellElement"/>
      <property name="scope" id="scope" type="DOMString" description="&lt;p&gt;Scope covered by header cells. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-scope&quot;&gt;scope attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableCellElement"/>
      <property name="vAlign" id="vAlign" type="DOMString" description="&lt;p&gt;Vertical alignment of data in cell. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-valign&quot;&gt;valign attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableCellElement"/>
      <property name="width" id="width" type="DOMString" description="&lt;p&gt;Cell width. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-width-TH&quot;&gt;width attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableCellElement"/>
    </properties>
  </interface>
  <interface id="HTMLTableColElement" name="HTMLTableColElement" description="&lt;p&gt;Regroups the &lt;code&gt;COL&lt;/code&gt; and &lt;code&gt;COLGROUP&lt;/code&gt; elements. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#edef-COL&quot;&gt;COL element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="align" id="align" type="DOMString" description="&lt;p&gt;Horizontal alignment of cell data in column. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-align-TD&quot;&gt;align attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableColElement"/>
      <property name="ch" id="ch" type="DOMString" description="&lt;p&gt;Alignment character for cells in a column. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-char&quot;&gt;char attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableColElement"/>
      <property name="chOff" id="chOff" type="DOMString" description="&lt;p&gt;Offset of alignment character. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-charoff&quot;&gt;charoff attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableColElement"/>
      <property name="span" id="span" type="long" description="&lt;p&gt;Indicates the number of columns in a group or affected by a grouping. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-span-COL&quot;&gt;span attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableColElement"/>
      <property name="vAlign" id="vAlign" type="DOMString" description="&lt;p&gt;Vertical alignment of cell data in column. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-valign&quot;&gt;valign attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableColElement"/>
      <property name="width" id="width" type="DOMString" description="&lt;p&gt;Default column width. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-width-COL&quot;&gt;width attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableColElement"/>
    </properties>
  </interface>
  <interface id="HTMLTableElement" name="HTMLTableElement" description="&lt;p&gt;The create* and delete* methods on the table allow authors to construct&#10;and modify tables. HTML 4.0 specifies that only one of each of the&#10; &lt;code&gt;CAPTION&lt;/code&gt;, &lt;code&gt;THEAD&lt;/code&gt;, and &lt;code&gt;TFOOT&lt;/code&gt;&#10;elements may exist in a table. Therefore, if one exists, and the&#10;createTHead() or createTFoot() method is called, the method returns&#10;the existing THead or TFoot element. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#edef-TABLE&quot;&gt;TABLE element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods>
      <method id="createTHead" name="createTHead" return_type="HTMLElement" owner_id="HTMLTableElement" description="&lt;p&gt;Create a table header row or return an existing one.&lt;/p&gt;" return_description="&lt;p&gt;A new table header element (&lt;code&gt;THEAD&lt;/code&gt;).&lt;/p&gt;"/>
      <method id="deleteTHead" name="deleteTHead" return_type="void" owner_id="HTMLTableElement" description="&lt;p&gt;Delete the header from the table, if one exists.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;"/>
      <method id="createTFoot" name="createTFoot" return_type="HTMLElement" owner_id="HTMLTableElement" description="&lt;p&gt;Create a table footer row or return an existing one.&lt;/p&gt;" return_description="&lt;p&gt;A footer element (&lt;code&gt;TFOOT&lt;/code&gt;).&lt;/p&gt;"/>
      <method id="deleteTFoot" name="deleteTFoot" return_type="void" owner_id="HTMLTableElement" description="&lt;p&gt;Delete the footer from the table, if one exists.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;"/>
      <method id="createCaption" name="createCaption" return_type="HTMLElement" owner_id="HTMLTableElement" description="&lt;p&gt;Create a new table caption object or return an existing one.&lt;/p&gt;" return_description="&lt;p&gt;A &lt;code&gt;CAPTION&lt;/code&gt; element.&lt;/p&gt;"/>
      <method id="deleteCaption" name="deleteCaption" return_type="void" owner_id="HTMLTableElement" description="&lt;p&gt;Delete the table caption, if one exists.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;"/>
      <method id="insertRow" name="insertRow" return_type="HTMLElement" owner_id="HTMLTableElement" description="&lt;p&gt;Insert a new empty row in the table.&#10;&lt;emph&gt;Note.&lt;/emph&gt; A table row cannot be empty&#10;according to HTML 4.0 Recommendation. &lt;/p&gt;" return_description="&lt;p&gt;The newly created row.&lt;/p&gt;">
        <parameter id="" name="index" type="long" owner_id="" description="&lt;p&gt;The row number where to insert a new row.&lt;/p&gt;"/>
      </method>
      <method id="deleteRow" name="deleteRow" return_type="void" owner_id="HTMLTableElement" description="&lt;p&gt;Delete a table row.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;">
        <parameter id="" name="index" type="long" owner_id="" description="&lt;p&gt;The index of the row to be deleted.&lt;/p&gt;"/>
      </method>
    </methods>
    <properties>
      <property name="caption" id="caption" type="HTMLTableCaptionElement" description="&lt;p&gt;Returns the table's &lt;code&gt;CAPTION&lt;/code&gt;, or void if none exists. &lt;/p&gt;" readonly="false" owner_id="HTMLTableElement"/>
      <property name="tHead" id="tHead" type="HTMLTableSectionElement" description="&lt;p&gt;Returns the table's &lt;code&gt;THEAD&lt;/code&gt;, or&#10;&#9;  &lt;code&gt;null&lt;/code&gt; if none exists.&#10; &lt;/p&gt;" readonly="false" owner_id="HTMLTableElement"/>
      <property name="tFoot" id="tFoot" type="HTMLTableSectionElement" description="&lt;p&gt;Returns the table's &lt;code&gt;TFOOT&lt;/code&gt;, or&#10;&#9;  &lt;code&gt;null&lt;/code&gt; if none exists.&#10; &lt;/p&gt;" readonly="false" owner_id="HTMLTableElement"/>
      <property name="rows" id="rows" type="HTMLCollection" description="&lt;p&gt;Returns a collection of all the rows in the table,&#10;&#9;  including all in &lt;code&gt;THEAD&lt;/code&gt;, &lt;code&gt;TFOOT&lt;/code&gt;, all&#10;&#9;&lt;code&gt;TBODY&lt;/code&gt; elements. &lt;/p&gt;" readonly="true" owner_id="HTMLTableElement"/>
      <property name="tBodies" id="tBodies" type="HTMLCollection" description="&lt;p&gt;Returns a collection of the defined table bodies. &lt;/p&gt;" readonly="true" owner_id="HTMLTableElement"/>
      <property name="align" id="align" type="DOMString" description="&lt;p&gt;Specifies the table's position with respect to the rest of the document. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-align-TABLE&quot;&gt;align attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableElement"/>
      <property name="bgColor" id="bgColor" type="DOMString" description="&lt;p&gt;Cell background color. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/graphics.html#adef-bgcolor&quot;&gt;bgcolor attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableElement"/>
      <property name="border" id="border" type="DOMString" description="&lt;p&gt;The width of the border around the table. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-border-TABLE&quot;&gt;border attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableElement"/>
      <property name="cellPadding" id="cellPadding" type="DOMString" description="&lt;p&gt;Specifies the horizontal and vertical space between cell content and&#10;cell borders. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-cellpadding&quot;&gt;cellpadding attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableElement"/>
      <property name="cellSpacing" id="cellSpacing" type="DOMString" description="&lt;p&gt;Specifies the horizontal and vertical separation between cells. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-cellspacing&quot;&gt;cellspacing attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableElement"/>
      <property name="frame" id="frame" type="DOMString" description="&lt;p&gt;Specifies which external table borders to render. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-frame&quot;&gt;frame attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableElement"/>
      <property name="rules" id="rules" type="DOMString" description="&lt;p&gt;Specifies which internal table borders to render. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-rules&quot;&gt;rules attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableElement"/>
      <property name="summary" id="summary" type="DOMString" description="&lt;p&gt;Supplementary description about the purpose or structure&#10;of a table. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-summary&quot;&gt;summary attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableElement"/>
      <property name="width" id="width" type="DOMString" description="&lt;p&gt;Specifies the desired table width. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-width-TABLE&quot;&gt;width attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableElement"/>
    </properties>
  </interface>
  <interface id="HTMLTableRowElement" name="HTMLTableRowElement" description="&lt;p&gt;A row in a table. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#edef-TR&quot;&gt;TR element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods>
      <method id="insertCell" name="insertCell" return_type="HTMLElement" owner_id="HTMLTableRowElement" description="&lt;p&gt;Insert an empty &lt;code&gt;TD&lt;/code&gt; cell into this row.&lt;/p&gt;" return_description="&lt;p&gt;The newly created cell.&lt;/p&gt;">
        <parameter id="" name="index" type="long" owner_id="" description="&lt;p&gt;The place to insert the cell.&lt;/p&gt;"/>
      </method>
      <method id="deleteCell" name="deleteCell" return_type="void" owner_id="HTMLTableRowElement" description="&lt;p&gt;Delete a cell from the current row.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;">
        <parameter id="" name="index" type="long" owner_id="" description="&lt;p&gt;The index of the cell to delete.&lt;/p&gt;"/>
      </method>
    </methods>
    <properties>
      <property name="rowIndex" id="rowIndex" type="long" description="&lt;p&gt;The index of this row, relative to the entire table. &lt;/p&gt;" readonly="false" owner_id="HTMLTableRowElement"/>
      <property name="sectionRowIndex" id="sectionRowIndex" type="long" description="&lt;p&gt;The index of this row, relative to the current section&#10;(&lt;code&gt;THEAD&lt;/code&gt;, &lt;code&gt;TFOOT&lt;/code&gt;, or &lt;code&gt;TBODY&lt;/code&gt;). &lt;/p&gt;" readonly="false" owner_id="HTMLTableRowElement"/>
      <property name="cells" id="cells" type="HTMLCollection" description="&lt;p&gt;The collection of cells in this row. &lt;/p&gt;" readonly="false" owner_id="HTMLTableRowElement"/>
      <property name="align" id="align" type="DOMString" description="&lt;p&gt;Horizontal alignment of data within cells of this row. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-align-TD&quot;&gt;align attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableRowElement"/>
      <property name="bgColor" id="bgColor" type="DOMString" description="&lt;p&gt;Background color for rows. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/present/graphics.html#adef-bgcolor&quot;&gt;bgcolor attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableRowElement"/>
      <property name="ch" id="ch" type="DOMString" description="&lt;p&gt;Alignment character for cells in a column. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-char&quot;&gt;char attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableRowElement"/>
      <property name="chOff" id="chOff" type="DOMString" description="&lt;p&gt;Offset of alignment character. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-charoff&quot;&gt;charoff attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableRowElement"/>
      <property name="vAlign" id="vAlign" type="DOMString" description="&lt;p&gt;Vertical alignment of data within cells of this row. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-valign&quot;&gt;valign attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableRowElement"/>
    </properties>
  </interface>
  <interface id="HTMLTableSectionElement" name="HTMLTableSectionElement" description="&lt;p&gt;The &lt;code&gt;THEAD&lt;/code&gt;, &lt;code&gt;TFOOT&lt;/code&gt;, and &lt;code&gt;TBODY&lt;/code&gt;&#10;elements. &lt;/p&gt;" parent_id="HTMLElement">
    <methods>
      <method id="insertRow" name="insertRow" return_type="HTMLElement" owner_id="HTMLTableSectionElement" description="&lt;p&gt;Insert a row into this section.&lt;/p&gt;" return_description="&lt;p&gt;The newly created row.&lt;/p&gt;">
        <parameter id="" name="index" type="long" owner_id="" description="&lt;p&gt;The row number where to insert a new row.&lt;/p&gt;"/>
      </method>
      <method id="deleteRow" name="deleteRow" return_type="void" owner_id="HTMLTableSectionElement" description="&lt;p&gt;Delete a row from this section.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;">
        <parameter id="" name="index" type="long" owner_id="" description="&lt;p&gt;The index of the row to be deleted.&lt;/p&gt;"/>
      </method>
    </methods>
    <properties>
      <property name="align" id="align" type="DOMString" description="&lt;p&gt;Horizontal alignment of data in cells. See the &lt;code&gt;align&lt;/code&gt;&#10;attribute for HTMLTheadElement for details. &lt;/p&gt;" readonly="false" owner_id="HTMLTableSectionElement"/>
      <property name="ch" id="ch" type="DOMString" description="&lt;p&gt;Alignment character for cells in a column. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-char&quot;&gt;char attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableSectionElement"/>
      <property name="chOff" id="chOff" type="DOMString" description="&lt;p&gt;Offset of alignment character. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/tables.html#adef-charoff&quot;&gt;charoff attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTableSectionElement"/>
      <property name="vAlign" id="vAlign" type="DOMString" description="&lt;p&gt;Vertical alignment of data in cells.&#10;See the &lt;code&gt;valign&lt;/code&gt;&#10;attribute for HTMLTheadElement for details. &lt;/p&gt;" readonly="false" owner_id="HTMLTableSectionElement"/>
      <property name="rows" id="rows" type="HTMLCollection" description="&lt;p&gt;The collection of rows in this table section. &lt;/p&gt;" readonly="true" owner_id="HTMLTableSectionElement"/>
    </properties>
  </interface>
  <interface id="HTMLTextAreaElement" name="HTMLTextAreaElement" description="&lt;p&gt;Multi-line text field. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#edef-TEXTAREA&quot;&gt;TEXTAREA element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods>
      <method id="blur" name="blur" return_type="void" owner_id="HTMLTextAreaElement" description="&lt;p&gt;Removes keyboard focus from this element.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;"/>
      <method id="focus" name="focus" return_type="void" owner_id="HTMLTextAreaElement" description="&lt;p&gt;Gives keyboard focus to this element.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;"/>
      <method id="select" name="select" return_type="void" owner_id="HTMLTextAreaElement" description="&lt;p&gt;Select the contents of the &lt;code&gt;TEXTAREA&lt;/code&gt;.&lt;/p&gt;" return_description="&lt;p&gt;&lt;/p&gt;"/>
    </methods>
    <properties>
      <property name="defaultValue" id="defaultValue" type="DOMString" description="&lt;p&gt;Stores the initial control value (i.e., the initial value of&#10;&lt;code&gt;value&lt;/code&gt;). &lt;/p&gt;" readonly="false" owner_id="HTMLTextAreaElement"/>
      <property name="form" id="form" type="HTMLFormElement" description="&lt;p&gt;Returns the &lt;code&gt;FORM&lt;/code&gt; element containing this control.&#10;Returns null if this control is not within the context of a form.  &lt;/p&gt;" readonly="true" owner_id="HTMLTextAreaElement"/>
      <property name="accessKey" id="accessKey" type="DOMString" description="&lt;p&gt;A single character access key to give access to the form control. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-accesskey&quot;&gt;accesskey attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTextAreaElement"/>
      <property name="cols" id="cols" type="long" description="&lt;p&gt;Width of control (in characters). See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-cols-TEXTAREA&quot;&gt;cols attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTextAreaElement"/>
      <property name="disabled" id="disabled" type="boolean" description="&lt;p&gt;The control is unavailable in this context. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-disabled&quot;&gt;disabled attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTextAreaElement"/>
      <property name="name" id="name" type="DOMString" description="&lt;p&gt;Form control or object name when submitted with a form. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-name-TEXTAREA&quot;&gt;name attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTextAreaElement"/>
      <property name="readOnly" id="readOnly" type="boolean" description="&lt;p&gt;This control is read-only. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-readonly&quot;&gt;readonly attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTextAreaElement"/>
      <property name="rows" id="rows" type="long" description="&lt;p&gt;Number of text rows. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-rows-TEXTAREA&quot;&gt;rows attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTextAreaElement"/>
      <property name="tabIndex" id="tabIndex" type="long" description="&lt;p&gt;Index that represents the element's position in the tabbing order. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/interact/forms.html#adef-tabindex&quot;&gt;tabindex attribute definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLTextAreaElement"/>
      <property name="type" id="type" type="DOMString" description="&lt;p&gt;The type of this form control. &lt;/p&gt;" readonly="true" owner_id="HTMLTextAreaElement"/>
      <property name="value" id="value" type="DOMString" description="&lt;p&gt;The current textual content of the multi-line text&#10;          field. If the entirety of the data can not fit into a single wstring,&#10;          the implementation may truncate the data.&lt;/p&gt;" readonly="false" owner_id="HTMLTextAreaElement"/>
    </properties>
  </interface>
  <interface id="HTMLTitleElement" name="HTMLTitleElement" description="&lt;p&gt;The document title. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/global.html#edef-TITLE&quot;&gt;TITLE element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="text" id="text" type="DOMString" description="&lt;p&gt;The specified title as a string. &lt;/p&gt;" readonly="false" owner_id="HTMLTitleElement"/>
    </properties>
  </interface>
  <interface id="HTMLUListElement" name="HTMLUListElement" description="&lt;p&gt;Unordered list. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/lists.html#edef-UL&quot;&gt;UL element definition&lt;/loc&gt; in HTML 4.0.&lt;/p&gt;" parent_id="HTMLElement">
    <methods/>
    <properties>
      <property name="compact" id="compact" type="boolean" description="&lt;p&gt;Reduce spacing between list items. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/lists.html#adef-compact&quot;&gt;compact attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLUListElement"/>
      <property name="type" id="type" type="DOMString" description="&lt;p&gt;Bullet style. See the &lt;loc href=&quot;http://www.w3.org/TR/REC-html40/struct/lists.html#adef-type-UL&quot;&gt;type attribute definition&lt;/loc&gt; in HTML 4.0. This attribute is deprecated in HTML 4.0.&lt;/p&gt;" readonly="false" owner_id="HTMLUListElement"/>
    </properties>
  </interface>
  <interface id="NamedNodeMap" name="NamedNodeMap" description="&#10;    &lt;p&gt;Objects implementing the &lt;code&gt;NamedNodeMap&lt;/code&gt; interface are used to&#10;      represent collections of nodes that can be accessed by name. Note that&#10;      &lt;code&gt;NamedNodeMap&lt;/code&gt; does not inherit from &lt;code&gt;NodeList&lt;/code&gt;;&#10;      &lt;code&gt;NamedNodeMaps&lt;/code&gt; are not maintained in any particular&#10;      order. Objects contained in an object implementing&#10;      &lt;code&gt;NamedNodeMap&lt;/code&gt; may also be accessed by an ordinal index, but&#10;      this is simply to allow convenient enumeration of the contents of a&#10;      &lt;code&gt;NamedNodeMap&lt;/code&gt;, and does not imply that the DOM specifies an&#10;      order to these Nodes. &lt;/p&gt;&#10;    &lt;p&gt;&lt;code&gt;NamedNodeMap&lt;/code&gt; objects in the DOM are&#10;      &lt;termref def=&quot;td-live&quot;&gt;live&lt;/termref&gt;.&lt;/p&gt;&#10;  " parent_id="">
    <methods>
      <method id="getNamedItem" name="getNamedItem" return_type="Node" owner_id="NamedNodeMap" description="&#10;      &lt;p&gt;Retrieves a node specified by name.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;A &lt;code&gt;Node&lt;/code&gt; (of any type) with the specified&#10;          &lt;code&gt;nodeName&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if it does not identify&#10;          any node in this map.&lt;/p&gt;&#10;      ">
        <parameter id="" name="name" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;code&gt;nodeName&lt;/code&gt; of a node to retrieve.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="setNamedItem" name="setNamedItem" return_type="Node" owner_id="NamedNodeMap" description="&#10;      &lt;p&gt;Adds a node using its &lt;code&gt;nodeName&lt;/code&gt; attribute. If a node with&#10;&#9;that name is already present in this map, it is replaced by the new&#10;&#9;one. Replacing a node by itself has no effect.&lt;/p&gt;&#10;      &lt;p&gt;As the &lt;code&gt;nodeName&lt;/code&gt; attribute is used to derive the name&#10;        which the node must be stored under, multiple nodes of certain types&#10;        (those that have a &quot;special&quot; string value) cannot be stored as the&#10;        names would clash. This is seen as preferable to allowing nodes to be&#10;        aliased.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;If the new &lt;code&gt;Node&lt;/code&gt; replaces an existing node the replaced&#10;          &lt;code&gt;Node&lt;/code&gt; is returned, otherwise &lt;code&gt;null&lt;/code&gt; is&#10;          returned.&lt;/p&gt;&#10;      ">
        <parameter id="" name="arg" type="Node" owner_id="" description="&#10;          &lt;p&gt;A node to store in this map. The node will later be accessible&#10;            using the value of its &lt;code&gt;nodeName&lt;/code&gt; attribute.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="removeNamedItem" name="removeNamedItem" return_type="Node" owner_id="NamedNodeMap" description="&#10;      &lt;p&gt;Removes a node specified by name. When this map contains the&#10;        attributes attached to an element, if the removed attribute is known to&#10;        have a default value, an attribute immediately appears containing the&#10;        default value as well as the corresponding namespace URI, local name,&#10;        and prefix when applicable.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;The node removed from this map if a node with such a name&#10;          exists.&lt;/p&gt;&#10;      ">
        <parameter id="" name="name" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;code&gt;nodeName&lt;/code&gt; of the node to remove.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="item" name="item" return_type="Node" owner_id="NamedNodeMap" description="&#10;      &lt;p&gt;Returns the &lt;code&gt;index&lt;/code&gt;th item in the map. If&#10;        &lt;code&gt;index&lt;/code&gt; is greater than or equal to the number of nodes in&#10;        this map, this returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;The node at the &lt;code&gt;index&lt;/code&gt;th position in the map, or&#10;          &lt;code&gt;null&lt;/code&gt; if that is not a valid index.&lt;/p&gt;&#10;      ">
        <parameter id="" name="index" type="unsigned long" owner_id="" description="&lt;p&gt;Index into this map.&lt;/p&gt;"/>
      </method>
      <method id="getNamedItemNS" name="getNamedItemNS" return_type="Node" owner_id="NamedNodeMap" description="&#10;      &lt;p&gt;Retrieves a node specified by local name and namespace URI.&lt;/p&gt;&#10;      &lt;p&gt;Per &lt;bibref ref=&quot;Namespaces&quot;&gt;&lt;/bibref&gt;, applications must use the value null&#10;      as the namespaceURI parameter for methods if they wish to have no&#10;      namespace.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;A &lt;code&gt;Node&lt;/code&gt; (of any type) with the specified local name and&#10;          namespace URI, or &lt;code&gt;null&lt;/code&gt; if they do not identify any node&#10;          in this map.&lt;/p&gt;&#10;      ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt; of the&#10;            node to retrieve.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="localName" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-localname&quot;&gt;local name&lt;/termref&gt; of the node&#10;            to retrieve.&lt;/p&gt;"/>
      </method>
      <method id="setNamedItemNS" name="setNamedItemNS" return_type="Node" owner_id="NamedNodeMap" description="&#10;      &lt;p&gt;Adds a node using its &lt;code&gt;namespaceURI&lt;/code&gt; and&#10;        &lt;code&gt;localName&lt;/code&gt;. If a node with that namespace URI and that&#10;        local name is already present in this map, it is replaced by the new&#10;        one. Replacing a node by itself has no effect.&lt;/p&gt;&#10;      &lt;p&gt;Per &lt;bibref ref=&quot;Namespaces&quot;&gt;&lt;/bibref&gt;, applications must use the value null&#10;      as the namespaceURI parameter for methods if they wish to have no&#10;      namespace.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;If the new &lt;code&gt;Node&lt;/code&gt; replaces an existing node the replaced&#10;          &lt;code&gt;Node&lt;/code&gt; is returned, otherwise &lt;code&gt;null&lt;/code&gt; is&#10;          returned.&lt;/p&gt;&#10;      ">
        <parameter id="" name="arg" type="Node" owner_id="" description="&#10;          &lt;p&gt;A node to store in this map. The node will later be accessible&#10;            using the value of its &lt;code&gt;namespaceURI&lt;/code&gt; and&#10;            &lt;code&gt;localName&lt;/code&gt; attributes.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="removeNamedItemNS" name="removeNamedItemNS" return_type="Node" owner_id="NamedNodeMap" description="&#10;      &lt;p&gt;Removes a node specified by local name and namespace URI. A removed&#10;        attribute may be known to have a default value when this map contains&#10;        the attributes attached to an element, as returned by the attributes&#10;        attribute of the &lt;code&gt;Node&lt;/code&gt; interface. If so, an attribute&#10;        immediately appears containing the default value as well as the&#10;        corresponding namespace URI, local name, and prefix when&#10;        applicable.&lt;/p&gt;&#10;      &lt;p&gt;Per &lt;bibref ref=&quot;Namespaces&quot;&gt;&lt;/bibref&gt;, applications must use the value null&#10;      as the namespaceURI parameter for methods if they wish to have no&#10;      namespace.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;The node removed from this map if a node with such a local name and&#10;          namespace URI exists.&lt;/p&gt;&#10;      ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt; of the&#10;            node to remove.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="localName" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-localname&quot;&gt;local name&lt;/termref&gt; of the node&#10;            to remove.&lt;/p&gt;&#10;        "/>
      </method>
    </methods>
    <properties>
      <property name="length" id="length" type="unsigned long" description="&#10;      &lt;p&gt;The number of nodes in this map. The range of valid child node indices&#10;        is &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;length-1&lt;/code&gt; inclusive.&lt;/p&gt;&#10;    " readonly="true" owner_id="NamedNodeMap"/>
    </properties>
  </interface>
  <interface id="NodeList" name="NodeList" description="&#10;    &lt;p&gt;The &lt;code&gt;NodeList&lt;/code&gt; interface provides the abstraction of an&#10;      ordered collection of nodes, without defining or constraining how this&#10;      collection is implemented. &lt;code&gt;NodeList&lt;/code&gt; objects in the DOM are&#10;      &lt;termref def=&quot;td-live&quot;&gt;live&lt;/termref&gt;.&lt;/p&gt;&#10;    &lt;p&gt;The items in the &lt;code&gt;NodeList&lt;/code&gt; are accessible via an&#10;      integral index, starting from 0.&lt;/p&gt;&#10;  ">
    <methods>
      <method id="item" name="item" return_type="Node" owner_id="NodeList" description="&#10;      &lt;p&gt;Returns the &lt;code&gt;index&lt;/code&gt;th item in the collection. If&#10;        &lt;code&gt;index&lt;/code&gt; is greater than or equal to the number of nodes in&#10;        the list, this returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;The node at the &lt;code&gt;index&lt;/code&gt;th position in the&#10;          &lt;code&gt;NodeList&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if that is not a valid&#10;          index.&lt;/p&gt;&#10;      ">
        <parameter id="" name="index" type="unsigned long" owner_id="" description="&#10;          &lt;p&gt;Index into the collection.&lt;/p&gt;&#10;        "/>
      </method>
    </methods>
    <properties>
      <property name="length" id="length" type="unsigned long" description="&#10;      &lt;p&gt;The number of nodes in the list. The range of valid child node indices&#10;        is 0 to &lt;code&gt;length-1&lt;/code&gt; inclusive.&lt;/p&gt;&#10;    " readonly="true" owner_id="NodeList"/>
    </properties>
  </interface>
  <interface id="Node" name="Node" description="&#10;    &lt;p&gt;The &lt;code&gt;Node&lt;/code&gt; interface is the primary datatype for the entire&#10;      Document Object Model. It represents a single node in the document&#10;      tree. While all objects implementing the &lt;code&gt;Node&lt;/code&gt; interface&#10;      expose methods for dealing with children, not all objects implementing&#10;      the &lt;code&gt;Node&lt;/code&gt; interface may have children. For example,&#10;      &lt;code&gt;Text&lt;/code&gt; nodes may not have children, and adding children to&#10;      such nodes results in a &lt;code&gt;DOMException&lt;/code&gt; being raised.&lt;/p&gt;&#10;    &lt;p&gt;The attributes &lt;code&gt;nodeName&lt;/code&gt;, &lt;code&gt;nodeValue&lt;/code&gt; and&#10;      &lt;code&gt;attributes&lt;/code&gt; are included as a mechanism to get at node&#10;      information without casting down to the specific derived interface. In&#10;      cases where there is no obvious mapping of these attributes for a&#10;      specific &lt;code&gt;nodeType&lt;/code&gt; (e.g., &lt;code&gt;nodeValue&lt;/code&gt; for an&#10;      &lt;code&gt;Element&lt;/code&gt; or &lt;code&gt;attributes&lt;/code&gt; for a&#10;      &lt;code&gt;Comment&lt;/code&gt;), this returns &lt;code&gt;null&lt;/code&gt;. Note that the&#10;      specialized interfaces may contain additional and more convenient&#10;      mechanisms to get and set the relevant information.&lt;/p&gt;&#10;  " parent_id="EventTarget">
    <methods>
      <method id="insertBefore" name="insertBefore" return_type="Node" owner_id="Node" description="&#10;      &lt;p&gt;Inserts the node &lt;code&gt;newChild&lt;/code&gt; before the existing child node&#10;        &lt;code&gt;refChild&lt;/code&gt;. If &lt;code&gt;refChild&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,&#10;        insert &lt;code&gt;newChild&lt;/code&gt; at the end of the list of children.&lt;/p&gt;&#10;      &lt;p&gt;If &lt;code&gt;newChild&lt;/code&gt; is a &lt;code&gt;DocumentFragment&lt;/code&gt; object,&#10;        all of its children are inserted, in the same order, before&#10;        &lt;code&gt;refChild&lt;/code&gt;. If the &lt;code&gt;newChild&lt;/code&gt; is already in the&#10;        tree, it is first removed.&lt;/p&gt;&#10;      &lt;note&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  Inserting a node before itself is implementation dependent.&#10;&#9;&lt;/p&gt;&#10;      &lt;/note&gt;&#10;    " return_description="&#10;        &lt;p&gt;The node being inserted.&lt;/p&gt;&#10;      ">
        <parameter id="" name="newChild" type="Node" owner_id="" description="&#10;          &lt;p&gt;The node to insert.&lt;/p&gt;&#10;        "/>
        <parameter id="" name="refChild" type="Node" owner_id="" description="&#10;          &lt;p&gt;The reference node, i.e., the node before which the new node must&#10;            be inserted.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="replaceChild" name="replaceChild" return_type="Node" owner_id="Node" description="&#10;      &lt;p&gt;Replaces the child node &lt;code&gt;oldChild&lt;/code&gt; with&#10;        &lt;code&gt;newChild&lt;/code&gt; in the list of children, and returns the&#10;        &lt;code&gt;oldChild&lt;/code&gt; node.&lt;/p&gt;&#10;      &lt;p&gt;If &lt;code&gt;newChild&lt;/code&gt; is a &lt;code&gt;DocumentFragment&lt;/code&gt; object,&#10;        &lt;code&gt;oldChild&lt;/code&gt; is replaced by all of the&#10;        &lt;code&gt;DocumentFragment&lt;/code&gt; children, which are inserted in the same&#10;        order. If the &lt;code&gt;newChild&lt;/code&gt; is already in the tree, it is first&#10;        removed.&lt;/p&gt;&#10;      &lt;note&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  Replacing a node with itself is implementation dependent.&#10;&#9;&lt;/p&gt;&#10;      &lt;/note&gt;&#10;    " return_description="&#10;        &lt;p&gt;The node replaced.&lt;/p&gt;&#10;      ">
        <parameter id="" name="newChild" type="Node" owner_id="" description="&#10;          &lt;p&gt;The new node to put in the child list.&lt;/p&gt;&#10;        "/>
        <parameter id="" name="oldChild" type="Node" owner_id="" description="&#10;          &lt;p&gt;The node being replaced in the list.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="removeChild" name="removeChild" return_type="Node" owner_id="Node" description="&#10;      &lt;p&gt;Removes the child node indicated by &lt;code&gt;oldChild&lt;/code&gt; from the&#10;        list of children, and returns it.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;The node removed.&lt;/p&gt;&#10;      ">
        <parameter id="" name="oldChild" type="Node" owner_id="" description="&#10;          &lt;p&gt;The node being removed.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="appendChild" name="appendChild" return_type="Node" owner_id="Node" description="&#10;      &lt;p&gt;Adds the node &lt;code&gt;newChild&lt;/code&gt; to the end of the list of children&#10;        of this node. If the &lt;code&gt;newChild&lt;/code&gt; is already in the tree, it&#10;        is first removed.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;The node added.&lt;/p&gt;&#10;      ">
        <parameter id="" name="newChild" type="Node" owner_id="" description="&#10;          &lt;p&gt;The node to add.&lt;/p&gt; &#10;          &lt;p&gt;If it is a &lt;code&gt;DocumentFragment&lt;/code&gt; object, the entire&#10;            contents of the document fragment are moved into the child list of&#10;            this node&lt;/p&gt;&#10;        "/>
      </method>
      <method id="hasChildNodes" name="hasChildNodes" return_type="boolean" owner_id="Node" description="&#10;      &lt;p&gt;Returns whether this node has any children.&lt;/p&gt; &#10;    " return_description="&#10;        &lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if this node has any children,&#10;          &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt;&#10;      "/>
      <method id="cloneNode" name="cloneNode" return_type="Node" owner_id="Node" description="&#10;      &lt;p&gt;Returns a duplicate of this node, i.e., serves as a generic copy&#10;        constructor for nodes. The duplicate node has no parent&#10;        (&lt;code&gt;parentNode&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;) and no user data. User&#10;        data associated to the imported node is not carried over. However,&#10;        if any &lt;code&gt;UserDataHandlers&lt;/code&gt; has been specified along with the&#10;        associated data these handlers will be called with the appropriate&#10;        parameters before this method returns.&lt;/p&gt;&#10;      &lt;p&gt;Cloning an &lt;code&gt;Element&lt;/code&gt; copies all attributes and their&#10;        values, including those generated by the XML processor to represent&#10;        defaulted attributes, but this method does not copy any children it&#10;        contains unless it is a deep clone. This includes text contained in an&#10;        the &lt;code&gt;Element&lt;/code&gt; since the text is contained in a child&#10;        &lt;code&gt;Text&lt;/code&gt; node. Cloning an &lt;code&gt;Attr&lt;/code&gt; directly, as&#10;        opposed to be cloned as part of an &lt;code&gt;Element&lt;/code&gt; cloning&#10;        operation, returns a specified attribute (&lt;code&gt;specified&lt;/code&gt; is&#10;        &lt;code&gt;true&lt;/code&gt;). Cloning an &lt;code&gt;Attr&lt;/code&gt; always clones its&#10;        children, since they represent its value, no matter whether this is a&#10;        deep clone or not. Cloning an &lt;code&gt;EntityReference&lt;/code&gt;&#10;        automatically constructs its subtree if a corresponding&#10;        &lt;code&gt;Entity&lt;/code&gt; is available, no matter whether this is a deep&#10;        clone or not. Cloning any other type of node simply returns a copy of&#10;        this node.&lt;/p&gt;&#10;      &lt;p&gt;Note that cloning an immutable subtree results in a mutable copy, but&#10;        the children of an &lt;code&gt;EntityReference&lt;/code&gt; clone are&#10;        &lt;termref def=&quot;dt-readonly-node&quot;&gt;readonly&lt;/termref&gt;. In addition, clones&#10;        of unspecified &lt;code&gt;Attr&lt;/code&gt; nodes are specified. And, cloning&#10;        &lt;code&gt;Document&lt;/code&gt;, &lt;code&gt;DocumentType&lt;/code&gt;, &lt;code&gt;Entity&lt;/code&gt;,&#10;        and &lt;code&gt;Notation&lt;/code&gt; nodes is implementation dependent.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;The duplicate node.&lt;/p&gt;&#10;      ">
        <parameter id="" name="deep" type="boolean" owner_id="" description="&#10;          &lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, recursively clone the subtree under the&#10;            specified node; if &lt;code&gt;false&lt;/code&gt;, clone only the node itself&#10;            (and its attributes, if it is an &lt;code&gt;Element&lt;/code&gt;).&lt;/p&gt;&#10;        "/>
      </method>
      <method id="normalize" name="normalize" return_type="void" owner_id="Node" description="&#10;      &lt;p&gt;&#10;&#9;Puts all &lt;code&gt;Text&lt;/code&gt; nodes in the full depth of the&#10;&#9;sub-tree underneath this &lt;code&gt;Node&lt;/code&gt;, including attribute&#10;&#9;nodes, into a &quot;normal&quot; form where only structure (e.g.,&#10;&#9;elements, comments, processing instructions, CDATA sections, and&#10;&#9;entity references) separates &lt;code&gt;Text&lt;/code&gt; nodes, i.e.,&#10;&#9;there are neither adjacent &lt;code&gt;Text&lt;/code&gt; nodes nor empty&#10;&#9;&lt;code&gt;Text&lt;/code&gt; nodes. This can be used to ensure that the DOM&#10;&#9;view of a document is the same as if it were saved and&#10;&#9;re-loaded, and is useful when operations (such as XPointer&#10;&#9;&lt;bibref role=&quot;informative&quot; ref=&quot;XPointer&quot;&gt;&lt;/bibref&gt; lookups) that depend&#10;&#9;on a particular document tree structure are to be used. If the&#10;&#9;parameter &quot;&lt;termref def=&quot;parameter-normalize-characters&quot;&gt;normalize-characters&lt;/termref&gt;&quot;&#10;&#9;of the &lt;code&gt;DOMConfiguration&lt;/code&gt; object attached to the&#10;&#9;&lt;code&gt;Node.ownerDocument&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, this&#10;&#9;method will also fully normalize the characters of the&#10;&#9;&lt;code&gt;Text&lt;/code&gt; nodes.&#10;      &lt;/p&gt;&#10;      &lt;note&gt;&#10;        &lt;p&gt;In cases where the document contains &lt;code&gt;CDATASections&lt;/code&gt;, the&#10;          normalize operation alone may not be sufficient, since XPointers do&#10;          not differentiate between &lt;code&gt;Text&lt;/code&gt; nodes and&#10;          &lt;code&gt;CDATASection&lt;/code&gt; nodes.&lt;/p&gt;&#10;      &lt;/note&gt; &#10;    " return_description="&#10;        &lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;&#10;      "/>
      <method id="isSupported" name="isSupported" return_type="boolean" owner_id="Node" description="&#10;      &lt;p&gt;&#10;&#9;Tests whether the DOM implementation implements a specific feature and&#10;        that feature is supported by this node, as specified in &lt;specref ref=&quot;DOMFeatures&quot;&gt;&lt;/specref&gt;.&#10;      &lt;/p&gt; &#10;    " return_description="&#10;        &lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if the specified feature is supported on&#10;          this node, &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt;&#10;      ">
        <parameter id="" name="feature" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    The name of the feature to test.&#10;&#9;  &lt;/p&gt;&#10;        "/>
        <parameter id="" name="version" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    This is the version number of the feature to test.&#10;&#9;  &lt;/p&gt;&#10;        "/>
      </method>
      <method id="hasAttributes" name="hasAttributes" return_type="boolean" owner_id="Node" description="&#10;      &lt;p&gt;Returns whether this node (if it is an element) has any&#10;        attributes.&lt;/p&gt; &#10;    " return_description="&#10;        &lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if this node has any attributes,&#10;          &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt;&#10;      "/>
      <method id="compareDocumentPosition" name="compareDocumentPosition" return_type="unsigned short" owner_id="Node" description="&#10;      &lt;p&gt;Compares the reference node, i.e. the node on which this method&#10;      is being called, with a node, i.e. the one passed as a parameter, with&#10;      regard to their position in the document and according to the&#10;      &lt;termref def=&quot;dt-document-order&quot;&gt;document order&lt;/termref&gt;.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;Returns how the node is positioned relatively to the&#10;&#9;  reference node.&lt;/p&gt;&#10;      ">
        <parameter id="" name="other" type="Node" owner_id="" description="&#10;          &lt;p&gt;The node to compare against the reference node.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="isSameNode" name="isSameNode" return_type="boolean" owner_id="Node" description="&#10;      &lt;p&gt;Returns whether this node is the same node as the given one.&lt;/p&gt;&#10;      &lt;p&gt;This method provides a way to determine whether two &lt;code&gt;Node&lt;/code&gt;&#10;        references returned by the implementation reference the same&#10;        object. When two &lt;code&gt;Node&lt;/code&gt; references are references to the&#10;        same object, even if through a proxy, the references may be used&#10;        completely interchangeably, such that all attributes have the same&#10;        values and calling the same DOM method on either reference always has&#10;        exactly the same effect.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if the nodes are the same,&#10;          &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt;&#10;      ">
        <parameter id="" name="other" type="Node" owner_id="" description="&#10;          &lt;p&gt;The node to test against.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="lookupPrefix" name="lookupPrefix" return_type="DOMString" owner_id="Node" description="&#10;      &lt;p&gt;Look up the prefix associated to the given namespace URI, starting&#10;        from this node. The default namespace declarations are ignored by this method.&lt;/p&gt;&#10;      &lt;p&gt;See &lt;specref ref=&quot;lookupNamespacePrefixAlgo&quot;&gt;&lt;/specref&gt; for details on the&#10;          algorithm used by this method.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;Returns an associated namespace prefix if found or &lt;code&gt;null&lt;/code&gt;&#10;        if none is found. If more than one prefix are associated to the namespace &#10;        prefix, the returned namespace prefix is implementation dependent.&lt;/p&gt;&#10;      ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The namespace URI to look for.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="isDefaultNamespace" name="isDefaultNamespace" return_type="boolean" owner_id="Node" description="&#10;      &lt;p&gt;&#10;&#9;This method checks if the specified &lt;code&gt;namespaceURI&lt;/code&gt; is the&#10;&#9;default namespace or not.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if the specified &lt;code&gt;namespaceURI&lt;/code&gt;&#10;&#9;  is the default namespace, &lt;code&gt;false&lt;/code&gt; otherwise.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The namespace URI to look for.&lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="lookupNamespaceURI" name="lookupNamespaceURI" return_type="DOMString" owner_id="Node" description="&#10;      &lt;p&gt;Look up the namespace URI associated to the given prefix, starting&#10;        from this node.&lt;/p&gt;&#10;      &lt;p&gt;See &lt;specref ref=&quot;lookupNamespaceURIAlgo&quot;&gt;&lt;/specref&gt; for details on the&#10;          algorithm used by this method.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;Returns the associated namespace URI or &lt;code&gt;null&lt;/code&gt; if none is&#10;          found.&lt;/p&gt;&#10;      ">
        <parameter id="" name="prefix" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The prefix to look for. If this parameter is &lt;code&gt;null&lt;/code&gt;,&#10;&#9;    the method will return the default namespace URI if any.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="isEqualNode" name="isEqualNode" return_type="boolean" owner_id="Node" description="&#10;      &lt;p&gt;Tests whether two nodes are equal.&lt;/p&gt;&#10;      &lt;p&gt;This method tests for equality of nodes, not sameness (i.e., whether&#10;        the two nodes are references to the same object) which can be tested&#10;        with &lt;code&gt;Node.isSameNode()&lt;/code&gt;. All nodes that are the same will&#10;        also be equal, though the reverse may not be true.&lt;/p&gt;&#10;      &lt;p&gt;Two nodes are equal if and only if the following conditions are&#10;        satisfied:&#10;        &lt;ulist&gt;&#10;          &lt;item&gt;&lt;p&gt;The two nodes are of the same type.&lt;/p&gt;&lt;/item&gt;&#10;          &lt;item&gt;&lt;p&gt;The following string attributes are equal:&#10;              &lt;code&gt;nodeName&lt;/code&gt;, &lt;code&gt;localName&lt;/code&gt;,&#10;              &lt;code&gt;namespaceURI&lt;/code&gt;, &lt;code&gt;prefix&lt;/code&gt;,&#10;              &lt;code&gt;nodeValue&lt;/code&gt;. This is: they are&#10;              both &lt;code&gt;null&lt;/code&gt;, or they have the same length and are&#10;              character for character identical.&lt;/p&gt;&lt;/item&gt;&#10;          &lt;item&gt;&lt;p&gt;The &lt;code&gt;attributes&lt;/code&gt; &lt;code&gt;NamedNodeMaps&lt;/code&gt; are&#10;              equal. This is: they are both &lt;code&gt;null&lt;/code&gt;, or they have the&#10;              same length and for each node that exists in one map there is a&#10;              node that exists in the other map and is equal, although not&#10;              necessarily at the same index.&lt;/p&gt;&lt;/item&gt;&#10;          &lt;item&gt;&lt;p&gt;The &lt;code&gt;childNodes&lt;/code&gt; &lt;code&gt;NodeLists&lt;/code&gt; are&#10;              equal. This is: they are both &lt;code&gt;null&lt;/code&gt;, or they&#10;              have the same length and contain equal nodes at the same index.&#10;              Note that normalization can affect equality; to avoid this, nodes&#10;              should be normalized before being compared.&lt;/p&gt;&lt;/item&gt;&#10;        &lt;/ulist&gt;&#10;      &lt;/p&gt;&#10;      &lt;p&gt;For two &lt;code&gt;DocumentType&lt;/code&gt; nodes to be equal, the following&#10;        conditions must also be satisfied:&#10;        &lt;ulist&gt;&#10;          &lt;item&gt;&lt;p&gt;The following string attributes are equal:&#10;              &lt;code&gt;publicId&lt;/code&gt;, &lt;code&gt;systemId&lt;/code&gt;,&#10;              &lt;code&gt;internalSubset&lt;/code&gt;.&lt;/p&gt;&lt;/item&gt;&#10;          &lt;item&gt;&lt;p&gt;The &lt;code&gt;entities&lt;/code&gt; &lt;code&gt;NamedNodeMaps&lt;/code&gt; are&#10;            equal.&lt;/p&gt;&lt;/item&gt;&#10;          &lt;item&gt;&lt;p&gt;The &lt;code&gt;notations&lt;/code&gt; &lt;code&gt;NamedNodeMaps&lt;/code&gt; are&#10;            equal.&lt;/p&gt;&lt;/item&gt;&#10;        &lt;/ulist&gt;&#10;      &lt;/p&gt;&#10;      &lt;p&gt;On the other hand, the following do not affect equality:&#10;        the &lt;code&gt;ownerDocument&lt;/code&gt;, &lt;code&gt;baseURI&lt;/code&gt;, and&#10;        &lt;code&gt;parentNode&lt;/code&gt; attributes, the &lt;code&gt;specified&lt;/code&gt;&#10;&#9;attribute for &lt;code&gt;Attr&lt;/code&gt; nodes, the &lt;code&gt;schemaTypeInfo&lt;/code&gt;&#10;        attribute for &lt;code&gt;Attr&lt;/code&gt; and &lt;code&gt;Element&lt;/code&gt; nodes, the&#10;        &lt;code&gt;Text.isElementContentWhitespace&lt;/code&gt; attribute for&#10;        &lt;code&gt;Text&lt;/code&gt; nodes, as well as any user data or event listeners&#10;        registered on the nodes.&#10;      &lt;/p&gt;&#10;      &lt;note&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  As a general rule, anything not mentioned in the description&#10;&#9;  above is not significant in consideration of equality&#10;&#9;  checking. Note that future versions of this specification may&#10;&#9;  take into account more attributes and implementations conform&#10;&#9;  to this specification are expected to be updated accordingly.&#10;&#9;&lt;/p&gt;&#10;      &lt;/note&gt;&#10;    " return_description="&#10;        &lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if the nodes are equal, &lt;code&gt;false&lt;/code&gt;&#10;          otherwise.&lt;/p&gt;&#10;      ">
        <parameter id="" name="arg" type="Node" owner_id="" description="&#10;          &lt;p&gt;The node to compare equality with.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="getFeature" name="getFeature" return_type="DOMObject" owner_id="Node" description="&#10;      &lt;p&gt;&#10;&#9;This method returns a specialized object which implements the&#10;&#9;specialized APIs of the specified feature and version, as&#10;&#9;specified in &lt;specref ref=&quot;DOMFeatures&quot;&gt;&lt;/specref&gt;. The specialized object&#10;&#9;may also be obtained by using binding-specific casting methods&#10;&#9;but is not necessarily expected to, as discussed in &lt;specref ref=&quot;Embedded-DOM&quot;&gt;&lt;/specref&gt;. This method also allow the implementation&#10;&#9;to provide specialized objects which do not support the&#10;&#9;&lt;code&gt;Node&lt;/code&gt; interface.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;&#9;  Returns an object which implements the specialized APIs of the&#10;&#9;  specified feature and version, if any, or &lt;code&gt;null&lt;/code&gt; if&#10;&#9;  there is no object which implements interfaces associated with&#10;&#9;  that feature. If the &lt;code&gt;DOMObject&lt;/code&gt; returned by this&#10;&#9;  method implements the &lt;code&gt;Node&lt;/code&gt; interface, it must&#10;&#9;  delegate to the primary core &lt;code&gt;Node&lt;/code&gt; and not return&#10;&#9;  results inconsistent with the primary core &lt;code&gt;Node&lt;/code&gt;&#10;&#9;  such as attributes, childNodes, etc.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="feature" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    The name of the feature requested. Note that any plus sign&#10;&#9;    &quot;+&quot; prepended to the name of the feature will be ignored&#10;&#9;    since it is not significant in the context of this method.&#10;&#9;  &lt;/p&gt;&#10;        "/>
        <parameter id="" name="version" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    This is the version number of the feature to test.&#10;&#9;  &lt;/p&gt;&#10;        "/>
      </method>
      <method id="setUserData" name="setUserData" return_type="DOMUserData" owner_id="Node" description="&#10;      &lt;p&gt;Associate an object to a key on this node. The object can later be&#10;        retrieved from this node by calling &lt;code&gt;getUserData&lt;/code&gt; with the&#10;        same key.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;Returns the &lt;code&gt;DOMUserData&lt;/code&gt; previously associated to&#10;&#9;  the given key on this node, or &lt;code&gt;null&lt;/code&gt; if there was none.&lt;/p&gt;&#10;      ">
        <parameter id="" name="key" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The key to associate the object to.&lt;/p&gt;&#10;        "/>
        <parameter id="" name="data" type="DOMUserData" owner_id="" description="&#10;          &lt;p&gt;The object to associate to the given key, or &lt;code&gt;null&lt;/code&gt; to&#10;            remove any existing association to that key.&lt;/p&gt;&#10;        "/>
        <parameter id="" name="handler" type="UserDataHandler" owner_id="" description="&#10;          &lt;p&gt;The handler to associate to that key, or &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="getUserData" name="getUserData" return_type="DOMUserData" owner_id="Node" description="&#10;      &lt;p&gt;Retrieves the object associated to a key on a this node. The object&#10;        must first have been set to this node by calling&#10;        &lt;code&gt;setUserData&lt;/code&gt; with the same key.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;Returns the &lt;code&gt;DOMUserData&lt;/code&gt; associated to the given&#10;&#9;  key on this node, or &lt;code&gt;null&lt;/code&gt; if there was none.&lt;/p&gt;&#10;      ">
        <parameter id="" name="key" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The key the object is associated to.&lt;/p&gt;&#10;        "/>
      </method>
    </methods>
    <properties>
      <property name="nodeName" id="nodeName" type="DOMString" description=" &#10;      &lt;p&gt;The name of this node, depending on its type; see the table above.&lt;/p&gt;&#10;    " readonly="true" owner_id="Node"/>
      <property name="nodeValue" id="nodeValue" type="DOMString" description=" &#10;      &lt;p&gt;The value of this node, depending on its type; see the table&#10;        above. When it is defined to be &lt;code&gt;null&lt;/code&gt;, setting it has no effect,&#10;&#9;  including if the node is &lt;termref def=&quot;dt-readonly-node&quot;&gt;read-only&lt;/termref&gt;.&lt;/p&gt;&#10;    " readonly="false" owner_id="Node"/>
      <property name="nodeType" id="nodeType" type="unsigned short" description="&#10;      &lt;p&gt;A code representing the type of the underlying object, as defined&#10;        above.&lt;/p&gt;&#10;    " readonly="true" owner_id="Node"/>
      <property name="parentNode" id="parentNode" type="Node" description="&#10;      &lt;p&gt;The &lt;termref def=&quot;dt-parent&quot;&gt;parent&lt;/termref&gt; of this node. All nodes,&#10;        except &lt;code&gt;Attr&lt;/code&gt;, &lt;code&gt;Document&lt;/code&gt;,&#10;        &lt;code&gt;DocumentFragment&lt;/code&gt;, &lt;code&gt;Entity&lt;/code&gt;, and&#10;        &lt;code&gt;Notation&lt;/code&gt; may have a parent. However, if a node has just&#10;        been created and not yet added to the tree, or if it has been removed&#10;        from the tree, this is &lt;code&gt;null&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="Node"/>
      <property name="childNodes" id="childNodes" type="NodeList" description="&#10;      &lt;p&gt;A &lt;code&gt;NodeList&lt;/code&gt; that contains all children of this node. If&#10;        there are no children, this is a &lt;code&gt;NodeList&lt;/code&gt; containing no&#10;        nodes.&lt;/p&gt;&#10;    " readonly="true" owner_id="Node"/>
      <property name="firstChild" id="firstChild" type="Node" description="&#10;      &lt;p&gt;The first child of this node. If there is no such node, this returns&#10;        &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#10;    " readonly="true" owner_id="Node"/>
      <property name="lastChild" id="lastChild" type="Node" description="&#10;      &lt;p&gt;The last child of this node. If there is no such node, this returns&#10;        &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#10;    " readonly="true" owner_id="Node"/>
      <property name="previousSibling" id="previousSibling" type="Node" description="&#10;      &lt;p&gt;The node immediately preceding this node. If there is no such node,&#10;        this returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#10;    " readonly="true" owner_id="Node"/>
      <property name="nextSibling" id="nextSibling" type="Node" description="&#10;      &lt;p&gt;The node immediately following this node. If there is no such node,&#10;        this returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#10;    " readonly="true" owner_id="Node"/>
      <property name="attributes" id="attributes" type="NamedNodeMap" description="&#10;      &lt;p&gt;A &lt;code&gt;NamedNodeMap&lt;/code&gt; containing the attributes of this node (if&#10;        it is an &lt;code&gt;Element&lt;/code&gt;) or &lt;code&gt;null&lt;/code&gt; otherwise.&lt;/p&gt;&#10;    " readonly="true" owner_id="Node"/>
      <property name="ownerDocument" id="ownerDocument" type="Document" description="&#10;      &lt;p&gt;The &lt;code&gt;Document&lt;/code&gt; object associated with this node. This is&#10;        also the &lt;code&gt;Document&lt;/code&gt; object used to create new nodes. When&#10;        this node is a &lt;code&gt;Document&lt;/code&gt; or a &lt;code&gt;DocumentType&lt;/code&gt;&#10;        which is not used with any &lt;code&gt;Document&lt;/code&gt; yet, this is&#10;        &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#10;    " readonly="true" owner_id="Node"/>
      <property name="namespaceURI" id="namespaceURI" type="DOMString" description="&#10;      &lt;p&gt;The &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt; of this&#10;        node, or &lt;code&gt;null&lt;/code&gt; if it is unspecified (see &lt;specref ref=&quot;Namespaces-Considerations&quot;&gt;&lt;/specref&gt;).&lt;/p&gt; &#10;&#10;      &lt;p&gt;This is not a computed value that is the result of a namespace lookup&#10;        based on an examination of the namespace declarations in scope. It is&#10;        merely the namespace URI given at creation time.&lt;/p&gt; &#10;&#10;      &lt;p&gt;For nodes of any type other than &lt;code&gt;ELEMENT_NODE&lt;/code&gt; and&#10;        &lt;code&gt;ATTRIBUTE_NODE&lt;/code&gt; and nodes created with a DOM Level 1&#10;        method, such as &lt;code&gt;Document.createElement()&lt;/code&gt;, this is&#10;&#9;always &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#10;      &lt;note&gt;&#10;        &lt;p&gt;Per the &lt;emph&gt;Namespaces in XML&lt;/emph&gt; Specification&#10;          &lt;bibref ref=&quot;Namespaces&quot;&gt;&lt;/bibref&gt; an attribute does not inherit its&#10;            namespace from the element it is attached to. If an attribute is&#10;            not explicitly given a namespace, it simply has no namespace.&lt;/p&gt; &#10;      &lt;/note&gt; &#10;    " readonly="true" owner_id="Node"/>
      <property name="prefix" id="prefix" type="DOMString" description="&#10;      &lt;p&gt;The &lt;termref def=&quot;dt-namespaceprefix&quot;&gt;namespace&#10;      prefix&lt;/termref&gt; of this node, or &lt;code&gt;null&lt;/code&gt; if it is&#10;      unspecified. When it is defined to be &lt;code&gt;null&lt;/code&gt;, setting&#10;      it has no effect, including if the node is &lt;termref def=&quot;dt-readonly-node&quot;&gt;read-only&lt;/termref&gt;.&lt;/p&gt;&#10;      &#10;      &lt;p&gt;Note that setting this attribute, when permitted, changes the&#10;        &lt;code&gt;nodeName&lt;/code&gt; attribute, which holds the&#10;        &lt;termref def=&quot;dt-qualifiedname&quot;&gt;qualified name&lt;/termref&gt;, as well as&#10;        the &lt;code&gt;tagName&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; attributes of the&#10;        &lt;code&gt;Element&lt;/code&gt; and &lt;code&gt;Attr&lt;/code&gt; interfaces, when&#10;        applicable.&lt;/p&gt;&#10;      &lt;p&gt;Setting the prefix to &lt;code&gt;null&lt;/code&gt; makes it unspecified, setting&#10;        it to an empty string is implementation dependent.&lt;/p&gt;&#10;      &lt;p&gt;Note also that changing the prefix of an attribute that is known to&#10;        have a default value, does not make a new attribute with the default&#10;        value and the original prefix appear, since the&#10;        &lt;code&gt;namespaceURI&lt;/code&gt; and &lt;code&gt;localName&lt;/code&gt; do not change.&lt;/p&gt;&#10;      &lt;p&gt;For nodes of any type other than &lt;code&gt;ELEMENT_NODE&lt;/code&gt; and&#10;        &lt;code&gt;ATTRIBUTE_NODE&lt;/code&gt; and nodes created with a DOM Level 1&#10;        method, such as &lt;code&gt;createElement&lt;/code&gt; from the&#10;        &lt;code&gt;Document&lt;/code&gt; interface, this is always &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#10;    " readonly="false" owner_id="Node"/>
      <property name="localName" id="localName" type="DOMString" description="&#10;      &lt;p&gt;Returns the local part of the&#10;        &lt;termref def=&quot;dt-qualifiedname&quot;&gt;qualified name&lt;/termref&gt; of this&#10;        node.&lt;/p&gt;&#10;&#10;      &lt;p&gt;For nodes of any type other than &lt;code&gt;ELEMENT_NODE&lt;/code&gt; and&#10;        &lt;code&gt;ATTRIBUTE_NODE&lt;/code&gt; and nodes created with a DOM Level 1&#10;        method, such as &lt;code&gt;Document.createElement()&lt;/code&gt;,&#10;&#9;this is always &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#10;    " readonly="true" owner_id="Node"/>
      <property name="baseURI" id="baseURI" type="DOMString" description="&#10;      &lt;p&gt;The absolute base URI of this node or &lt;code&gt;null&lt;/code&gt; if the&#10;      implementation wasn't able to obtain an absolute URI. This value&#10;      is computed as described in &lt;specref ref=&quot;baseURIs-Considerations&quot;&gt;&lt;/specref&gt;.  However, when the&#10;      &lt;code&gt;Document&lt;/code&gt; supports the feature &quot;HTML&quot; &lt;bibref role=&quot;informative&quot; ref=&quot;DOM2HTML&quot;&gt;&lt;/bibref&gt;, the base URI is computed&#10;      using first the value of the href attribute of the HTML BASE&#10;      element if any, and the value of the &lt;code&gt;documentURI&lt;/code&gt;&#10;      attribute from the &lt;code&gt;Document&lt;/code&gt; interface otherwise.&lt;/p&gt;&#10;&#10;    " readonly="true" owner_id="Node"/>
      <property name="textContent" id="textContent" type="DOMString" description="&#10;&#10;      &lt;p&gt;This attribute returns the text content of this node and its&#10;      descendants. When it is defined to be &lt;code&gt;null&lt;/code&gt;, setting it&#10;      has no effect. On setting, any possible children this node may have are&#10;      removed and, if it the new string is not empty or &lt;code&gt;null&lt;/code&gt;,&#10;      replaced by a single &lt;code&gt;Text&lt;/code&gt; node containing the string&#10;      this attribute is set to.&#10;      &lt;/p&gt;&#10;      &lt;p&gt;&#10;&#9;On getting, no serialization is performed, the returned string&#10;&#9;does not contain any markup. No whitespace normalization is&#10;&#9;performed and the returned string does not contain the white&#10;&#9;spaces in element content (see the attribute&#10;&#9;&lt;code&gt;Text.isElementContentWhitespace&lt;/code&gt;). Similarly, on&#10;&#9;setting, no parsing is performed either, the input string is&#10;&#9;taken as pure textual content.&#10;      &lt;/p&gt;&#10;      &lt;p&gt;The string returned is&#10;&#9;made of the text content of this node depending on its type, as&#10;&#9;defined below:&#10;      &lt;/p&gt;&#10;        &lt;table cellpadding=&quot;3&quot; summary=&quot;The string returned is made of the text content of the                node. The first cell of this table contains the type of the                Node, the second cell indicates the string returned by                textContent.&quot; border=&quot;1&quot;&gt;&#10;&#10;          &lt;tbody&gt;&#10;            &lt;tr&gt;&#10;              &lt;th rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;Node type&lt;/th&gt;&#10;&lt;th rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;Content&lt;/th&gt;&#10;            &lt;/tr&gt;&#10;            &lt;tr&gt;&#10;              &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;ELEMENT_NODE, ATTRIBUTE_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE,&#10;                DOCUMENT_FRAGMENT_NODE&lt;/td&gt;&#10;              &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;concatenation of the &lt;code&gt;textContent&lt;/code&gt; attribute value&#10;                of every child node, excluding COMMENT_NODE and&#10;                PROCESSING_INSTRUCTION_NODE nodes. This is the empty string if&#10;                the node has no children.&lt;/td&gt;&#10;            &lt;/tr&gt;&#10;            &lt;tr&gt;&#10;              &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;TEXT_NODE, CDATA_SECTION_NODE,&#10;                COMMENT_NODE, PROCESSING_INSTRUCTION_NODE&lt;/td&gt;&#10;              &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;code&gt;nodeValue&lt;/code&gt;&lt;/td&gt;&#10;            &lt;/tr&gt;&#10;            &lt;tr&gt;&#10;              &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;DOCUMENT_NODE, DOCUMENT_TYPE_NODE, NOTATION_NODE&lt;/td&gt;&#10;              &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;emph&gt;null&lt;/emph&gt;&lt;/td&gt;&#10;            &lt;/tr&gt;&#10;          &lt;/tbody&gt;&#10;        &lt;/table&gt;&#10;&#10;    " readonly="false" owner_id="Node"/>
    </properties>
  </interface>
  <interface id="Notation" name="Notation" description="&#10;    &lt;p&gt;This interface represents a notation declared in the DTD. A notation&#10;    either declares, by name, the format of an unparsed entity (see  &lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#Notations&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;section 4.7&lt;/xspecref&gt;&#10;    of the XML 1.0 specification &lt;bibref ref=&quot;XML&quot;&gt;&lt;/bibref&gt;), or is used for formal&#10;      declaration of&#10;    processing instruction targets (see &lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#sec-pi&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;section 2.6&lt;/xspecref&gt; of the XML 1.0&#10;    specification &lt;bibref ref=&quot;XML&quot;&gt;&lt;/bibref&gt;). The &lt;code&gt;nodeName&lt;/code&gt; attribute&#10;      inherited from&#10;    &lt;code&gt;Node&lt;/code&gt; is set to the declared name of the notation.&lt;/p&gt;&#10;    &lt;p&gt;The DOM Core does not support editing &lt;code&gt;Notation&lt;/code&gt;&#10;      nodes; they are therefore&#10;      &lt;termref def=&quot;dt-readonly-node&quot;&gt;readonly&lt;/termref&gt;.&lt;/p&gt;&#10;    &lt;p&gt;A &lt;code&gt;Notation&lt;/code&gt; node does not have any parent.&lt;/p&gt;&#10;&#10;  " parent_id="Node">
    <methods/>
    <properties>
      <property name="publicId" id="publicId" type="DOMString" description="&lt;p&gt;The public identifier of this notation. If the &#10;&#9;public identifier was not specified, this is &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#10;    " readonly="true" owner_id="Notation"/>
      <property name="systemId" id="systemId" type="DOMString" description="&lt;p&gt;The system identifier of this notation. If the system identifier&#10;        was not specified, this is &lt;code&gt;null&lt;/code&gt;. This may be an absolute&#10;        URI or not.&lt;/p&gt;&#10;    " readonly="true" owner_id="Notation"/>
    </properties>
  </interface>
  <interface id="ProcessingInstruction" name="ProcessingInstruction" description="&#10;    &lt;p&gt;The &lt;code&gt;ProcessingInstruction&lt;/code&gt; interface represents a&#10;      &quot;processing instruction&quot;, used in XML as a way to keep&#10;      processor-specific information in the text of the document.&lt;/p&gt;&#10;    &lt;p&gt;&#10;      No lexical check is done on the content of a processing&#10;      instruction and it is therefore possible to have the character&#10;      sequence &lt;code&gt;&quot;?&amp;gt;&quot;&lt;/code&gt; in the content, which is illegal a&#10;      processing instruction per section 2.6 of &lt;bibref ref=&quot;XML&quot;&gt;&lt;/bibref&gt;. The&#10;      presence of this character sequence must generate a fatal error&#10;      during serialization.&#10;    &lt;/p&gt;&#10;  " parent_id="Node">
    <methods/>
    <properties>
      <property name="target" id="target" type="DOMString" description="&#10;      &lt;p&gt;The target of this processing instruction. XML defines this as being&#10;        the first &lt;termref def=&quot;dt-token&quot;&gt;token&lt;/termref&gt; following the markup&#10;        that begins the processing instruction.&lt;/p&gt;&#10;    " readonly="true" owner_id="ProcessingInstruction"/>
      <property name="data" id="data" type="DOMString" description="&#10;      &lt;p&gt;The content of this processing instruction. This is from the first non&#10;        white space character after the target to the character immediately&#10;        preceding the &lt;code&gt;?&amp;gt;&lt;/code&gt;.&lt;/p&gt;&#10;    " readonly="false" owner_id="ProcessingInstruction"/>
    </properties>
  </interface>
  <interface id="Text" name="Text" description="&#10;    &lt;p&gt;The &lt;code&gt;Text&lt;/code&gt; interface inherits from &lt;code&gt;CharacterData&lt;/code&gt;&#10;      and represents the textual content (termed&#10;      &lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#syntax&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;character data&lt;/xspecref&gt; in XML) of&#10;      an &lt;code&gt;Element&lt;/code&gt; or &lt;code&gt;Attr&lt;/code&gt;. If there is no markup&#10;      inside an element's content, the text is contained in a single object&#10;      implementing the &lt;code&gt;Text&lt;/code&gt; interface that is the only child of&#10;      the element. If there is markup, it is parsed into the&#10;      &lt;termref def=&quot;dt-infoitem&quot;&gt;information items&lt;/termref&gt; (elements,&#10;      comments, etc.) and &lt;code&gt;Text&lt;/code&gt; nodes that form the list of&#10;      children of the element.&lt;/p&gt;&#10;    &lt;p&gt;When a document is first made available via the DOM, there is only one&#10;      &lt;code&gt;Text&lt;/code&gt; node for each block of text. Users may create adjacent&#10;      &lt;code&gt;Text&lt;/code&gt; nodes that represent the contents of a given element&#10;      without any intervening markup, but should be aware that there is no way&#10;      to represent the separations between these nodes in XML or HTML, so they&#10;      will not (in general) persist between DOM editing sessions. The&#10;      &lt;code&gt;Node.normalize()&lt;/code&gt; method merges any such&#10;      adjacent &lt;code&gt;Text&lt;/code&gt; objects into a single node for each block of&#10;      text.&lt;/p&gt;&#10;    &lt;p&gt;&#10;      No lexical check is done on the content of a &lt;code&gt;Text&lt;/code&gt;&#10;      node and, depending on its position in the document, some&#10;      characters must be escaped during serialization using character&#10;      references; e.g. the characters &quot;&amp;lt;&amp;amp;&quot; if&#10;      the textual content is part of an element or of an attribute, the&#10;      character sequence &quot;]]&amp;gt;&quot; when part of an element, the quotation&#10;      mark character &quot; or the apostrophe character ' when part of an&#10;      attribute.&#10;    &lt;/p&gt;&#10;  " parent_id="CharacterData">
    <methods>
      <method id="splitText" name="splitText" return_type="Text" owner_id="Text" description="&#10;      &lt;p&gt;Breaks this node into two nodes at the specified &lt;code&gt;offset&lt;/code&gt;,&#10;        keeping both in the tree as&#10;        &lt;termref def=&quot;dt-sibling&quot;&gt;siblings&lt;/termref&gt;. After being split, this&#10;        node will contain all the content up to the &lt;code&gt;offset&lt;/code&gt;&#10;        point. A new node of the same type, which contains all the content at&#10;        and after the &lt;code&gt;offset&lt;/code&gt; point, is returned. If the original&#10;        node had a parent node, the new node is inserted as the next&#10;        &lt;termref def=&quot;dt-sibling&quot;&gt;sibling&lt;/termref&gt; of the original node. When&#10;        the &lt;code&gt;offset&lt;/code&gt; is equal to the length of this node, the new&#10;        node has no data.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;The new node, of the same type as this node.&lt;/p&gt;&#10;      ">
        <parameter id="" name="offset" type="unsigned long" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-16-bit-unit&quot;&gt;16-bit unit&lt;/termref&gt; offset at&#10;            which to split, starting from &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="replaceWholeText" name="replaceWholeText" return_type="Text" owner_id="Text" description="&#10;      &lt;p&gt;Replaces the text of the current node and&#10;      all &lt;termref def=&quot;dt-logically-adjacent-text-nodes&quot;&gt;logically-adjacent&#10;      text nodes&lt;/termref&gt; with the specified text. All &lt;termref def=&quot;dt-logically-adjacent-text-nodes&quot;&gt;logically-adjacent text&#10;      nodes&lt;/termref&gt; are removed including the current node unless it was the&#10;      recipient of the replacement text.&lt;/p&gt;&#10;&#10;      &lt;p&gt;This method returns the node which received the replacement&#10;      text. The returned node is:&#10;      &lt;/p&gt;&#10;      &lt;ulist&gt;&#10;&#9;&lt;item&gt;&#10;&#9;  &lt;p&gt;&lt;code&gt;null&lt;/code&gt;, when the replacement text is the empty&#10;&#9;  string;&lt;/p&gt;&#10;&#9;&lt;/item&gt;&#10;&#9;&lt;item&gt;&#10;&#9;  &lt;p&gt;the current node, except when the current node is &lt;termref def=&quot;dt-readonly-node&quot;&gt;read-only&lt;/termref&gt;;&lt;/p&gt;&#10;&#9;&lt;/item&gt;&#10;&#9;&lt;item&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    a new &lt;code&gt;Text&lt;/code&gt; node of the same type&#10;&#9;    (&lt;code&gt;Text&lt;/code&gt; or &lt;code&gt;CDATASection&lt;/code&gt;) as the&#10;&#9;    current node inserted at the location of the replacement.&lt;/p&gt;&#10;&#9;&lt;/item&gt;&#10;      &lt;/ulist&gt;&#10;&#10;      &lt;p&gt;For instance, in the above example calling&#10;        &lt;code&gt;replaceWholeText&lt;/code&gt; on the &lt;code&gt;Text&lt;/code&gt; node that&#10;        contains &quot;bar&quot; with &quot;yo&quot; in argument results in the following:&#10;      &lt;/p&gt;&#10;      &lt;graphic xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; source=&quot;./images/wholeTextExmpl2.png&quot; alt='barTextNode.replaceWholeText(&quot;yo&quot;) modifies the textual content of barTextNode with &quot;yo&quot;' xlink:type=&quot;simple&quot; xlink:show=&quot;embed&quot; xlink:actuate=&quot;onLoad&quot;&gt;&lt;/graphic&gt;&#10;&#10;      &lt;p&gt;Where the nodes to be removed are read-only descendants of an&#10;      &lt;code&gt;EntityReference&lt;/code&gt;, the &lt;code&gt;EntityReference&lt;/code&gt; must be&#10;      removed instead of the read-only nodes. If any&#10;      &lt;code&gt;EntityReference&lt;/code&gt; to be removed has descendants that are not&#10;      &lt;code&gt;EntityReference&lt;/code&gt;, &lt;code&gt;Text&lt;/code&gt;, or&#10;      &lt;code&gt;CDATASection&lt;/code&gt; nodes, the &lt;code&gt;replaceWholeText&lt;/code&gt; method&#10;      must fail before performing any modification of the document, raising a&#10;      &lt;code&gt;DOMException&lt;/code&gt; with the code&#10;      &lt;code&gt;NO_MODIFICATION_ALLOWED_ERR&lt;/code&gt;.&lt;/p&gt;&#10;&#10;      &lt;p&gt;For instance, in the example below calling&#10;      &lt;code&gt;replaceWholeText&lt;/code&gt; on the &lt;code&gt;Text&lt;/code&gt; node that&#10;      contains &quot;bar&quot; fails, because the &lt;code&gt;EntityReference&lt;/code&gt;&#10;      node &quot;ent&quot; contains an &lt;code&gt;Element&lt;/code&gt; node which cannot be&#10;      removed.&lt;/p&gt;&#10;      &lt;graphic xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; source=&quot;./images/wholeTextExmpl3.png&quot; alt='barTextNode.replaceWholeText(&quot;yo&quot;) raises a NO_MODIFICATION_ALLOWED_ERR DOMException' xlink:type=&quot;simple&quot; xlink:show=&quot;embed&quot; xlink:actuate=&quot;onLoad&quot;&gt;&lt;/graphic&gt;&#10;&#10;    " return_description="&#10;        &lt;p&gt;The &lt;code&gt;Text&lt;/code&gt; node created with the specified content.&lt;/p&gt;&#10;      ">
        <parameter id="" name="content" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The content of the replacing &lt;code&gt;Text&lt;/code&gt; node.&lt;/p&gt;&#10;        "/>
      </method>
    </methods>
    <properties>
      <property name="isElementContentWhitespace" id="isElementContentWhitespace" type="boolean" description="&#10;      &lt;p&gt;Returns whether this text node contains &lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2004/REC-xml-infoset-20040204#infoitem.character&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;element&#10;&#9;  content whitespace&lt;/xspecref&gt;,&#10;        often abusively called &quot;ignorable whitespace&quot;. The text node is&#10;&#9;determined to contain whitespace in element content during the&#10;&#9;load of the document or if validation occurs while using&#10;&#9;&lt;code&gt;Document.normalizeDocument()&lt;/code&gt;.&lt;/p&gt;&#10;    " readonly="true" owner_id="Text"/>
      <property name="wholeText" id="wholeText" type="DOMString" description="&#10;&#10;      &lt;p&gt;Returns all text of &lt;code&gt;Text&lt;/code&gt; nodes &lt;termref def=&quot;dt-logically-adjacent-text-nodes&quot;&gt;logically-adjacent text&#10;       nodes&lt;/termref&gt; to this node, concatenated in document order.&lt;/p&gt;&#10;      &lt;p&gt;For instance, in the example below &lt;code&gt;wholeText&lt;/code&gt; on the&#10;        &lt;code&gt;Text&lt;/code&gt; node that contains &quot;bar&quot; returns &quot;barfoo&quot;, while on&#10;        the &lt;code&gt;Text&lt;/code&gt; node that contains &quot;foo&quot; it returns &quot;barfoo&quot;.&#10;      &lt;/p&gt;&#10;      &lt;graphic xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; source=&quot;./images/wholeTextExmpl.png&quot; alt='barTextNode.wholeText value is &quot;barfoo&quot;' xlink:type=&quot;simple&quot; xlink:show=&quot;embed&quot; xlink:actuate=&quot;onLoad&quot;&gt;&lt;/graphic&gt;&#10;&#10;    " readonly="true" owner_id="Text"/>
    </properties>
  </interface>
  <interface id="Counter" name="Counter" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;Counter&lt;/code&gt; interface is used to represent any &lt;xspecref href=&quot;/syndata.html#value-def-counter&quot;&gt;counter or&#10;      counters function&lt;/xspecref&gt; value. This interface reflects the values in &#10;      the underlying style property.&#10;    &lt;/p&gt;&#10;  ">
    <methods/>
    <properties>
      <property name="identifier" id="identifier" type="DOMString" description="&#10;      &lt;p&gt;&#10;        This attribute is used for the identifier of the counter.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="Counter"/>
      <property name="listStyle" id="listStyle" type="DOMString" description="&#10;      &lt;p&gt;&#10;        This attribute is used for the style of the list.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="Counter"/>
      <property name="separator" id="separator" type="DOMString" description="&#10;      &lt;p&gt;&#10;        This attribute is used for the separator of the nested counters.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="Counter"/>
    </properties>
  </interface>
  <interface id="CSS2Properties" name="CSS2Properties" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;CSS2Properties&lt;/code&gt; interface represents a convenience&#10;      mechanism for retrieving and setting properties within a&#10;      &lt;code&gt;CSSStyleDeclaration&lt;/code&gt;. The attributes of this interface&#10;      correspond to all the &lt;xspecref href=&quot;/propidx.html&quot;&gt;properties specified in&#10;&#9;CSS2&lt;/xspecref&gt;. Getting an attribute of this interface is equivalent to&#10;      calling the &lt;code&gt;getPropertyValue&lt;/code&gt; method of the&#10;      &lt;code&gt;CSSStyleDeclaration&lt;/code&gt; interface. Setting an attribute of this&#10;      interface is equivalent to calling the &lt;code&gt;setProperty&lt;/code&gt; method of&#10;      the &lt;code&gt;CSSStyleDeclaration&lt;/code&gt; interface.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      A conformant implementation of the CSS module is not required to implement the&#10;      &lt;code&gt;CSS2Properties&lt;/code&gt; interface. If an implementation does&#10;      implement this interface, the expectation is that language-specific&#10;      methods can be used to cast from an instance of the&#10;      &lt;code&gt;CSSStyleDeclaration&lt;/code&gt; interface to the&#10;      &lt;code&gt;CSS2Properties&lt;/code&gt; interface.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      If an implementation does implement this interface, it is expected to&#10;      understand the specific syntax of the shorthand properties, and apply&#10;      their semantics; when the &lt;code&gt;margin&lt;/code&gt; property is set, for&#10;      example, the &lt;code&gt;marginTop&lt;/code&gt;, &lt;code&gt;marginRight&lt;/code&gt;,&#10;      &lt;code&gt;marginBottom&lt;/code&gt; and &lt;code&gt;marginLeft&lt;/code&gt; properties are&#10;      actually being set by the underlying implementation.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      When dealing with CSS &quot;shorthand&quot; properties, the shorthand&#10;      properties should be decomposed into their component longhand&#10;      properties as appropriate, and when querying for their value, the&#10;      form returned should be the shortest form exactly equivalent to the&#10;      declarations made in the ruleset.  However, if there is no shorthand&#10;      declaration that could be added to the ruleset without changing in&#10;      any way the rules already declared in the ruleset (i.e., by adding&#10;      longhand rules that were previously not declared in the ruleset),&#10;      then the empty string should be returned for the shorthand property.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      For example, querying for the &lt;code&gt;font&lt;/code&gt; property should not&#10;      return &quot;normal normal normal 14pt/normal Arial, sans-serif&quot;, when&#10;      &quot;14pt Arial, sans-serif&quot; suffices. (The normals are initial values,&#10;      and are implied by use of the longhand property.)&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      If the values for all the longhand properties that compose a&#10;      particular string are the initial values, then a string consisting of&#10;      all the initial values should be returned (e.g.  a&#10;      &lt;code&gt;border-width&lt;/code&gt; value of &quot;medium&quot; should be returned as&#10;      such, not as &quot;&quot;).&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      For some shorthand properties that take missing values from other&#10;      sides, such as the &lt;code&gt;margin&lt;/code&gt;, &lt;code&gt;padding&lt;/code&gt;, and&#10;      &lt;code&gt;border-[width|style|color]&lt;/code&gt; properties, the minimum&#10;      number of sides possible should be used; i.e., &quot;0px 10px&quot; will be&#10;      returned instead of &quot;0px 10px 0px 10px&quot;.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      If the value of a shorthand property can not be decomposed into its&#10;      component longhand properties, as is the case for the&#10;      &lt;code&gt;font&lt;/code&gt; property with a value of &quot;menu&quot;, querying for the&#10;      values of the component longhand properties should return the empty&#10;      string.&#10;    &lt;/p&gt;&#10;  ">
    <methods/>
    <properties>
      <property name="azimuth" id="azimuth" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/aural.html#propdef-azimuth&quot;&gt;azimuth property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="background" id="background" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/colors.html#propdef-background&quot;&gt;background property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="backgroundAttachment" id="backgroundAttachment" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/colors.html#propdef-background-attachment&quot;&gt;background-attachment property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="backgroundColor" id="backgroundColor" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/colors.html#propdef-background-color&quot;&gt;background-color property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="backgroundImage" id="backgroundImage" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/colors.html#propdef-background-image&quot;&gt;background-image property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="backgroundPosition" id="backgroundPosition" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/colors.html#propdef-background-position&quot;&gt;background-position property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="backgroundRepeat" id="backgroundRepeat" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/colors.html#propdef-background-repeat&quot;&gt;background-repeat property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="border" id="border" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-border&quot;&gt;border property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="borderCollapse" id="borderCollapse" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/tables.html#propdef-border-collapse&quot;&gt;border-collapse property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="borderColor" id="borderColor" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-border-color&quot;&gt;border-color property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="borderSpacing" id="borderSpacing" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/tables.html#propdef-border-spacing&quot;&gt;border-spacing property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="borderStyle" id="borderStyle" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-border-style&quot;&gt;border-style property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="borderTop" id="borderTop" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-border-top&quot;&gt;border-top property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="borderRight" id="borderRight" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-border-right&quot;&gt;border-right property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="borderBottom" id="borderBottom" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-border-bottom&quot;&gt;border-bottom property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="borderLeft" id="borderLeft" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-border-left&quot;&gt;border-left property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="borderTopColor" id="borderTopColor" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-border-top-color&quot;&gt;border-top-color property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="borderRightColor" id="borderRightColor" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-border-right-color&quot;&gt;border-right-color property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="borderBottomColor" id="borderBottomColor" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-border-bottom-color&quot;&gt;border-bottom-color property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="borderLeftColor" id="borderLeftColor" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-border-left-color&quot;&gt;border-left-color property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="borderTopStyle" id="borderTopStyle" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-border-top-style&quot;&gt;border-top-style property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="borderRightStyle" id="borderRightStyle" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-border-right-style&quot;&gt;border-right-style property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="borderBottomStyle" id="borderBottomStyle" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-border-bottom-style&quot;&gt;border-bottom-style property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="borderLeftStyle" id="borderLeftStyle" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-border-left-style&quot;&gt;border-left-style property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="borderTopWidth" id="borderTopWidth" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-border-top-width&quot;&gt;border-top-width property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="borderRightWidth" id="borderRightWidth" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-border-right-width&quot;&gt;border-right-width property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="borderBottomWidth" id="borderBottomWidth" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-border-bottom-width&quot;&gt;border-bottom-width property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="borderLeftWidth" id="borderLeftWidth" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-border-left-width&quot;&gt;border-left-width property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="borderWidth" id="borderWidth" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-border-width&quot;&gt;border-width property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="bottom" id="bottom" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/visuren.html#propdef-bottom&quot;&gt;bottom property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="captionSide" id="captionSide" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/tables.html#propdef-caption-side&quot;&gt;caption-side property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="clear" id="clear" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/visuren.html#propdef-clear&quot;&gt;clear property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="clip" id="clip" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/visufx#propdef-clip&quot;&gt;clip property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="color" id="color" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/colors.html#propdef-color&quot;&gt;color property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="content" id="content" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/generate.html#propdef-content&quot;&gt;content property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="counterIncrement" id="counterIncrement" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/generate.html#propdef-counter-increment&quot;&gt;counter-increment property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="counterReset" id="counterReset" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/generate.html#propdef-counter-reset&quot;&gt;counter-reset property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="cue" id="cue" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/aural.html#propdef-cue&quot;&gt;cue property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="cueAfter" id="cueAfter" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/aural.html#propdef-cue-after&quot;&gt;cue-after property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="cueBefore" id="cueBefore" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/aural.html#propdef-cue-before&quot;&gt;cue-before property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="cursor" id="cursor" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/ui.html#propdef-cursor&quot;&gt;cursor property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="direction" id="direction" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/visuren.html#propdef-direction&quot;&gt;direction property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="display" id="display" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/visuren.html#propdef-display&quot;&gt;display property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="elevation" id="elevation" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/aural.html#propdef-elevation&quot;&gt;elevation property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="emptyCells" id="emptyCells" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/tables.html#propdef-empty-cells&quot;&gt;empty-cells property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="cssFloat" id="cssFloat" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/visuren.html#propdef-float&quot;&gt;float property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="font" id="font" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/fonts.html#propdef-font&quot;&gt;font property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="fontFamily" id="fontFamily" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/fonts.html#propdef-font-family&quot;&gt;font-family property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="fontSize" id="fontSize" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/fonts.html#propdef-font-size&quot;&gt;font-size property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="fontSizeAdjust" id="fontSizeAdjust" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/fonts.html#propdef-font-size-adjust&quot;&gt;font-size-adjust property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="fontStretch" id="fontStretch" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/fonts.html#propdef-font-stretch&quot;&gt;font-stretch property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="fontStyle" id="fontStyle" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/fonts.html#propdef-font-style&quot;&gt;font-style property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="fontVariant" id="fontVariant" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/fonts.html#propdef-font-variant&quot;&gt;font-variant property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="fontWeight" id="fontWeight" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/fonts.html#propdef-font-weight&quot;&gt;font-weight property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="height" id="height" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/visudet.html#propdef-height&quot;&gt;height property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="left" id="left" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/visuren.html#propdef-left&quot;&gt;left property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="letterSpacing" id="letterSpacing" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/text.html#propdef-letter-spacing&quot;&gt;letter-spacing property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="lineHeight" id="lineHeight" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/visudet.html#propdef-line-height&quot;&gt;line-height property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="listStyle" id="listStyle" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/generate.html#propdef-list-style&quot;&gt;list-style property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="listStyleImage" id="listStyleImage" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/generate.html#propdef-list-style-image&quot;&gt;list-style-image property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="listStylePosition" id="listStylePosition" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/generate.html#propdef-list-style-position&quot;&gt;list-style-position property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="listStyleType" id="listStyleType" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/generate.html#propdef-list-style-type&quot;&gt;list-style-type property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="margin" id="margin" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-margin&quot;&gt;margin property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="marginTop" id="marginTop" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-margin-top&quot;&gt;margin-top property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="marginRight" id="marginRight" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-margin-right&quot;&gt;margin-right property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="marginBottom" id="marginBottom" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-margin-bottom&quot;&gt;margin-bottom property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="marginLeft" id="marginLeft" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-margin-left&quot;&gt;margin-left property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="markerOffset" id="markerOffset" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/generate.html#propdef-marker-offset&quot;&gt;marker-offset property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="marks" id="marks" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/page.html#propdef-marks&quot;&gt;marks property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="maxHeight" id="maxHeight" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/visudet.html#propdef-max-height&quot;&gt;max-height property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="maxWidth" id="maxWidth" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/visudet.html#propdef-max-width&quot;&gt;max-width property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="minHeight" id="minHeight" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/visudet.html#propdef-min-height&quot;&gt;min-height property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="minWidth" id="minWidth" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/visudet.html#propdef-min-width&quot;&gt;min-width property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="orphans" id="orphans" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/page.html#propdef-orphans&quot;&gt;orphans property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="outline" id="outline" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/ui.html#propdef-outline&quot;&gt;outline property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="outlineColor" id="outlineColor" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/ui.html#propdef-outline-color&quot;&gt;outline-color property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="outlineStyle" id="outlineStyle" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/ui.html#propdef-outline-style&quot;&gt;outline-style property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="outlineWidth" id="outlineWidth" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/ui.html#propdef-outline-width&quot;&gt;outline-width property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="overflow" id="overflow" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/visufx.html#propdef-overflow&quot;&gt;overflow property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="padding" id="padding" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-padding&quot;&gt;padding property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="paddingTop" id="paddingTop" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-padding-top&quot;&gt;padding-top property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="paddingRight" id="paddingRight" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-padding-right&quot;&gt;padding-right property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="paddingBottom" id="paddingBottom" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-padding-bottom&quot;&gt;padding-bottom property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="paddingLeft" id="paddingLeft" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/box.html#propdef-padding-left&quot;&gt;padding-left property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="page" id="page" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/page.html#propdef-page&quot;&gt;page property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="pageBreakAfter" id="pageBreakAfter" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/page.html#propdef-page-break-after&quot;&gt;page-break-after property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="pageBreakBefore" id="pageBreakBefore" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/page.html#propdef-page-break-before&quot;&gt;page-break-before property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="pageBreakInside" id="pageBreakInside" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/page.html#propdef-page-break-inside&quot;&gt;page-break-inside property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="pause" id="pause" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/aural.html#propdef-pause&quot;&gt;pause property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="pauseAfter" id="pauseAfter" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/aural.html#propdef-pause-after&quot;&gt;pause-after property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="pauseBefore" id="pauseBefore" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/aural.html#propdef-pause-before&quot;&gt;pause-before property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="pitch" id="pitch" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/aural.html#propdef-pitch&quot;&gt;pitch property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="pitchRange" id="pitchRange" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/aural.html#propdef-pitch-range&quot;&gt;pitch-range property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="playDuring" id="playDuring" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/aural.html#propdef-play-during&quot;&gt;play-during property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="position" id="position" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/visuren.html#propdef-position&quot;&gt;position property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="quotes" id="quotes" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/generate.html#propdef-quotes&quot;&gt;quotes property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="richness" id="richness" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/aural.html#propdef-richness&quot;&gt;richness property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="right" id="right" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/visuren.html#propdef-right&quot;&gt;right property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="size" id="size" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/page.html#propdef-size&quot;&gt;size property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="speak" id="speak" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/aural.html#propdef-speak&quot;&gt;speak property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="speakHeader" id="speakHeader" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/tables.html#propdef-speak-header&quot;&gt;speak-header property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="speakNumeral" id="speakNumeral" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/aural.html#propdef-speak-numeral&quot;&gt;speak-numeral property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="speakPunctuation" id="speakPunctuation" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/aural.html#propdef-speak-punctuation&quot;&gt;speak-punctuation property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="speechRate" id="speechRate" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/aural.html#propdef-speech-rate&quot;&gt;speech-rate property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="stress" id="stress" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/aural.html#propdef-stress&quot;&gt;stress property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="tableLayout" id="tableLayout" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/tables.html#propdef-table-layout&quot;&gt;table-layout property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="textAlign" id="textAlign" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/text.html#propdef-text-align&quot;&gt;text-align property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="textDecoration" id="textDecoration" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/text.html#propdef-text-decoration&quot;&gt;text-decoration property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="textIndent" id="textIndent" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/text.html#propdef-text-indent&quot;&gt;text-indent property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="textShadow" id="textShadow" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/text.html#propdef-text-shadow&quot;&gt;text-shadow property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="textTransform" id="textTransform" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/text.html#propdef-text-transform&quot;&gt;text-transform property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="top" id="top" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/visuren.html#propdef-top&quot;&gt;top property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="unicodeBidi" id="unicodeBidi" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/visuren.html#propdef-unicode-bidi&quot;&gt;unicode-bidi property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="verticalAlign" id="verticalAlign" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/visudet.html#propdef-vertical-align&quot;&gt;vertical-align property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="visibility" id="visibility" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/visufx.html#propdef-visibility&quot;&gt;visibility property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="voiceFamily" id="voiceFamily" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/aural.html#propdef-voice-family&quot;&gt;voice-family property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="volume" id="volume" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/aural.html#propdef-volume&quot;&gt;volume property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="whiteSpace" id="whiteSpace" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/text.html#propdef-white-space&quot;&gt;white-space property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="widows" id="widows" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/page.html#propdef-widows&quot;&gt;widows property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="width" id="width" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/visudet.html#propdef-width&quot;&gt;width property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="wordSpacing" id="wordSpacing" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/text.html#propdef-word-spacing&quot;&gt;word-spacing property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
      <property name="zIndex" id="zIndex" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;See the &lt;xspecref href=&quot;/visuren.html#propdef-z-index&quot;&gt;z-index property definition&lt;/xspecref&gt; in CSS2.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSS2Properties"/>
    </properties>
  </interface>
  <interface id="CSSCharsetRule" name="CSSCharsetRule" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;CSSCharsetRule&lt;/code&gt; interface represents a &lt;xspecref href=&quot;/syndata.html#x66&quot;&gt;@charset&#10;      rule&lt;/xspecref&gt; in a CSS style sheet. The value of the&#10;      &lt;code&gt;encoding&lt;/code&gt; attribute does not affect the encoding of&#10;      text data in the DOM objects; this encoding is always UTF-16. After a&#10;      stylesheet is loaded, the value of the &lt;code&gt;encoding&lt;/code&gt; attribute is&#10;      the value found in the &lt;code&gt;@charset&lt;/code&gt; rule. If there was no&#10;      &lt;code&gt;@charset&lt;/code&gt; in the original document, then no&#10;      &lt;code&gt;CSSCharsetRule&lt;/code&gt; is created.  The value of the&#10;      &lt;code&gt;encoding&lt;/code&gt; attribute may also be used as a hint for the&#10;      encoding used on serialization of the style sheet.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      The value of the &lt;xspecref href=&quot;/syndata.html#x66&quot;&gt;@charset&#10;      rule&lt;/xspecref&gt; (and therefore of the &lt;code&gt;CSSCharsetRule&lt;/code&gt;) may&#10;      not correspond to the encoding the document actually came in; character&#10;      encoding information e.g. in an HTTP header, has priority (see &lt;xspecref href=&quot;/syndata.html#x66&quot;&gt;CSS document representation&lt;/xspecref&gt;) but this is&#10;      not reflected in the &lt;code&gt;CSSCharsetRule&lt;/code&gt;.&#10;    &lt;/p&gt;&#10;  " parent_id="CSSRule">
    <methods/>
    <properties>
      <property name="encoding" id="encoding" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;The encoding information used in this &lt;code&gt;@charset&lt;/code&gt; rule.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSSCharsetRule"/>
    </properties>
  </interface>
  <interface id="CSSFontFaceRule" name="CSSFontFaceRule" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;CSSFontFaceRule&lt;/code&gt; interface represents a &lt;xspecref href=&quot;/fonts.html#font-descriptions&quot;&gt;@font-face &#10;      rule&lt;/xspecref&gt; in a CSS style sheet. The &lt;code&gt;@font-face&lt;/code&gt; rule &#10;      is used to hold a set of font descriptions.&#10;    &lt;/p&gt;&#10;    " parent_id="CSSRule">
    <methods/>
    <properties>
      <property name="style" id="style" type="CSSStyleDeclaration" description="&#10;     &lt;p&gt;&#10;       The &lt;xspecref href=&quot;/syndata.html#q8&quot;&gt;declaration-block&lt;/xspecref&gt; of this rule.&#10;     &lt;/p&gt;&#10;     " readonly="true" owner_id="CSSFontFaceRule"/>
    </properties>
  </interface>
  <interface id="CSSImportRule" name="CSSImportRule" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;CSSImportRule&lt;/code&gt; interface represents a &lt;xspecref href=&quot;/cascade.html#at-import&quot;&gt;@import&#10;      rule&lt;/xspecref&gt; within a CSS style sheet. The &lt;code&gt;@import&lt;/code&gt; rule is&#10;      used to import style rules from other style sheets.&#10;    &lt;/p&gt;&#10;  " parent_id="CSSRule">
    <methods/>
    <properties>
      <property name="href" id="href" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;The location of the style sheet to be imported. The attribute will not&#10;&#9;contain the &lt;code&gt;&quot;url(...)&quot;&lt;/code&gt; specifier around the URI.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="CSSImportRule"/>
      <property name="media" id="media" type="stylesheets::MediaList" description="&#10;      &lt;p&gt;&#10;&#9;A list of media types for which this style sheet may be&#10;&#9;used.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="CSSImportRule"/>
      <property name="styleSheet" id="styleSheet" type="CSSStyleSheet" description="&#10;      &lt;p&gt;The style sheet referred to by this rule, if it has been loaded. The&#10;      value of this attribute is &lt;code&gt;null&lt;/code&gt; if the style sheet has not&#10;      yet been loaded or if it will not be loaded (e.g. if the style sheet is&#10;      for a media type not supported by the user agent).&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="CSSImportRule"/>
    </properties>
  </interface>
  <interface id="CSSMediaRule" name="CSSMediaRule" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;CSSMediaRule&lt;/code&gt; interface represents a &lt;xspecref href=&quot;/media.html#at-media-rule&quot;&gt;@media&#10;&#9;rule&lt;/xspecref&gt; in a CSS style sheet. A &lt;code&gt;@media&lt;/code&gt; rule can be&#10;      used to delimit style rules for specific media types.&#10;    &lt;/p&gt;&#10;  " parent_id="CSSRule">
    <methods>
      <method id="insertRule" name="insertRule" return_type="unsigned long" owner_id="CSSMediaRule" description="&#10;      &lt;p&gt;&#10;&#9;Used to insert a new rule into the media block. &#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;          The index within the media block's rule collection of the newly&#10;          inserted rule.&#10;        &lt;/p&gt;&#10;      ">
        <parameter id="" name="rule" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    The parsable text representing the rule. For rule sets&#10;&#9;    this contains both the selector and the style declaration.&#10;&#9;    For at-rules, this specifies both the at-identifier and the&#10;&#9;    rule content.&#10;          &lt;/p&gt;&#10;        "/>
        <parameter id="" name="index" type="unsigned long" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    The index within the media block's rule collection of the rule &#10;&#9;    before which to insert the specified rule. If the &#10;&#9;    specified index is equal to the length of the media blocks's rule&#10;&#9;    collection, the rule will be added to the end of the media block.&#10;          &lt;/p&gt;&#10;        "/>
      </method>
      <method id="deleteRule" name="deleteRule" return_type="void" owner_id="CSSMediaRule" description="&#10;      &lt;p&gt;&#10;&#9;Used to delete a rule from the media block.&#10;      &lt;/p&gt;&#10;    " return_description="&lt;p&gt;&lt;/p&gt;">
        <parameter id="" name="index" type="unsigned long" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    The index within the media block's rule collection of the rule&#10;&#9;    to remove.&#10;          &lt;/p&gt;&#10;        "/>
      </method>
    </methods>
    <properties>
      <property name="media" id="media" type="stylesheets::MediaList" description="&#10;      &lt;p&gt;&#10;&#9;A list of &lt;xspecref href=&quot;/media.html#media-types&quot;&gt;media types&lt;/xspecref&gt; for this rule.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="CSSMediaRule"/>
      <property name="cssRules" id="cssRules" type="CSSRuleList" description="&#10;      &lt;p&gt;&#10;&#9;A list of all CSS rules contained within the media block.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="CSSMediaRule"/>
    </properties>
  </interface>
  <interface id="CSSPageRule" name="CSSPageRule" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;CSSPageRule&lt;/code&gt; interface represents a &lt;xspecref href=&quot;/page.html#page-box&quot;&gt;@page&#10;      rule&lt;/xspecref&gt; within a CSS style sheet. The &lt;code&gt;@page&lt;/code&gt; rule is&#10;      used to specify the dimensions, orientation, margins, etc. of a page box&#10;      for paged media.&#10;    &lt;/p&gt;&#10;  " parent_id="CSSRule">
    <methods/>
    <properties>
      <property name="selectorText" id="selectorText" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;The parsable textual representation of the page selector for the rule.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSSPageRule"/>
      <property name="style" id="style" type="CSSStyleDeclaration" description="&#10;      &lt;p&gt;&#10;&#9;The &lt;xspecref href=&quot;/syndata.html#q8&quot;&gt;declaration-block&lt;/xspecref&gt; of this rule.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="CSSPageRule"/>
    </properties>
  </interface>
  <interface id="CSSPrimitiveValue" name="CSSPrimitiveValue" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;CSSPrimitiveValue&lt;/code&gt; interface represents a single&#10;      &lt;xspecref href=&quot;/syndata.html#values&quot;&gt;CSS value&lt;/xspecref&gt;. This&#10;      interface may be used to determine the value of a specific style property&#10;      currently set in a block or to set a specific style property explicitly&#10;      within the block. An instance of this interface might be obtained from&#10;      the &lt;code&gt;getPropertyCSSValue&lt;/code&gt; method of the&#10;      &lt;code&gt;CSSStyleDeclaration&lt;/code&gt; interface. A&#10;      &lt;code&gt;CSSPrimitiveValue&lt;/code&gt; object only occurs in a context of a CSS&#10;      property.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      Conversions are allowed between absolute values (from millimeters to&#10;      centimeters, from degrees to radians, and so on) but not between relative&#10;      values. (For example, a pixel value cannot be converted to a centimeter&#10;      value.) Percentage values can't be converted since they are relative to&#10;      the parent value (or another property value). There is one exception for&#10;      color percentage values: since a color percentage value is relative to&#10;      the range 0-255, a color percentage value can be converted to a number;&#10;      (see also the &lt;code&gt;RGBColor&lt;/code&gt; interface).&#10;    &lt;/p&gt;&#10;  " parent_id="CSSValue">
    <methods>
      <method id="setFloatValue" name="setFloatValue" return_type="void" owner_id="CSSPrimitiveValue" description="&#10;      &lt;p&gt;&#10;&#9;A method to set the float value with a specified unit. If the property&#10;&#9;attached with this value can not accept the specified unit or the float&#10;&#9;value, the value will be unchanged and a &lt;code&gt;DOMException&lt;/code&gt; will&#10;&#9;be raised.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;      ">
        <parameter id="" name="unitType" type="unsigned short" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;            A unit code as defined above. The unit code can only be a float&#10;            unit type (i.e. &lt;code&gt;CSS_NUMBER&lt;/code&gt;,&#10;            &lt;code&gt;CSS_PERCENTAGE&lt;/code&gt;, &lt;code&gt;CSS_EMS&lt;/code&gt;,&#10;            &lt;code&gt;CSS_EXS&lt;/code&gt;, &lt;code&gt;CSS_PX&lt;/code&gt;, &lt;code&gt;CSS_CM&lt;/code&gt;,&#10;            &lt;code&gt;CSS_MM&lt;/code&gt;, &lt;code&gt;CSS_IN&lt;/code&gt;, &lt;code&gt;CSS_PT&lt;/code&gt;,&#10;            &lt;code&gt;CSS_PC&lt;/code&gt;, &lt;code&gt;CSS_DEG&lt;/code&gt;, &lt;code&gt;CSS_RAD&lt;/code&gt;,&#10;            &lt;code&gt;CSS_GRAD&lt;/code&gt;, &lt;code&gt;CSS_MS&lt;/code&gt;, &lt;code&gt;CSS_S&lt;/code&gt;,&#10;            &lt;code&gt;CSS_HZ&lt;/code&gt;, &lt;code&gt;CSS_KHZ&lt;/code&gt;,&#10;            &lt;code&gt;CSS_DIMENSION&lt;/code&gt;).&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="floatValue" type="float" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The new float value.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="getFloatValue" name="getFloatValue" return_type="float" owner_id="CSSPrimitiveValue" description="&#10;      &lt;p&gt;&#10;&#9;This method is used to get a float value in a specified unit. If this&#10;&#9;CSS value doesn't contain a float value or can't be converted into the&#10;&#9;specified unit, a &lt;code&gt;DOMException&lt;/code&gt; is raised.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;&#10;&#9;  The float value in the specified unit.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="unitType" type="unsigned short" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    A unit code to get the float value.  The unit code can only be a&#10;&#9;    float unit type (i.e. &lt;code&gt;CSS_NUMBER&lt;/code&gt;,&#10;&#9;    &lt;code&gt;CSS_PERCENTAGE&lt;/code&gt;, &lt;code&gt;CSS_EMS&lt;/code&gt;,&#10;&#9;    &lt;code&gt;CSS_EXS&lt;/code&gt;, &lt;code&gt;CSS_PX&lt;/code&gt;, &lt;code&gt;CSS_CM&lt;/code&gt;,&#10;&#9;    &lt;code&gt;CSS_MM&lt;/code&gt;, &lt;code&gt;CSS_IN&lt;/code&gt;, &lt;code&gt;CSS_PT&lt;/code&gt;,&#10;&#9;    &lt;code&gt;CSS_PC&lt;/code&gt;, &lt;code&gt;CSS_DEG&lt;/code&gt;, &lt;code&gt;CSS_RAD&lt;/code&gt;,&#10;&#9;    &lt;code&gt;CSS_GRAD&lt;/code&gt;, &lt;code&gt;CSS_MS&lt;/code&gt;, &lt;code&gt;CSS_S&lt;/code&gt;,&#10;&#9;    &lt;code&gt;CSS_HZ&lt;/code&gt;, &lt;code&gt;CSS_KHZ&lt;/code&gt;,&#10;&#9;    &lt;code&gt;CSS_DIMENSION&lt;/code&gt;).&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="setStringValue" name="setStringValue" return_type="void" owner_id="CSSPrimitiveValue" description="&#10;      &lt;p&gt;&#10;        A method to set the string value with the specified unit. If the&#10;        property attached to this value can't accept the specified unit or the&#10;        string value, the value will be unchanged and a&#10;        &lt;code&gt;DOMException&lt;/code&gt; will be raised.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;      ">
        <parameter id="" name="stringType" type="unsigned short" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;            A string code as defined above. The string code can only be a&#10;            string unit type (i.e. &lt;code&gt;CSS_STRING&lt;/code&gt;,&#10;            &lt;code&gt;CSS_URI&lt;/code&gt;, &lt;code&gt;CSS_IDENT&lt;/code&gt;, and&#10;            &lt;code&gt;CSS_ATTR&lt;/code&gt;).&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="stringValue" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;            The new string value.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="getStringValue" name="getStringValue" return_type="DOMString" owner_id="CSSPrimitiveValue" description="&#10;      &lt;p&gt;&#10;&#9;This method is used to get the string value. If the&#10;&#9;CSS value doesn't contain a string value, a &lt;code&gt;DOMException&lt;/code&gt;&#10;&#9;is raised.&#10;      &lt;/p&gt;&#10;      &lt;note&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  Some properties (like &lt;loc href=&quot;/fonts.html#propdef-font-family&quot;&gt;'font-family'&lt;/loc&gt; or&#10;&#9;  &lt;loc href=&quot;/aural.html#propdef-voice-family&quot;&gt;'voice-family'&lt;/loc&gt;)&#10;&#9;  convert a whitespace separated list of idents to a string.&#10;&#9;&lt;/p&gt;&#10;      &lt;/note&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;&#10;&#9;  The string value in the current unit. The current&#10;&#9;  &lt;code&gt;primitiveType&lt;/code&gt; can only be a string unit type&#10;&#9;  (i.e. &lt;code&gt;CSS_STRING&lt;/code&gt;, &lt;code&gt;CSS_URI&lt;/code&gt;,&#10;&#9;  &lt;code&gt;CSS_IDENT&lt;/code&gt; and &lt;code&gt;CSS_ATTR&lt;/code&gt;).&#10;&#9;&lt;/p&gt;&#10;      "/>
      <method id="getCounterValue" name="getCounterValue" return_type="Counter" owner_id="CSSPrimitiveValue" description="&#10;      &lt;p&gt;&#10;&#9;This method is used to get the Counter value. If this CSS value doesn't&#10;&#9;contain a counter value, a &lt;code&gt;DOMException&lt;/code&gt; is&#10;&#9;raised. Modification to the corresponding style property can be&#10;&#9;achieved using the &lt;code&gt;Counter&lt;/code&gt; interface.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;The Counter value.&lt;/p&gt;&#10;      "/>
      <method id="getRectValue" name="getRectValue" return_type="Rect" owner_id="CSSPrimitiveValue" description="&#10;      &lt;p&gt;&#10;&#9;This method is used to get the Rect value. If this CSS value doesn't&#10;&#9;contain a rect value, a &lt;code&gt;DOMException&lt;/code&gt; is&#10;&#9;raised. Modification to the corresponding style property can be&#10;&#9;achieved using the &lt;code&gt;Rect&lt;/code&gt; interface.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;The Rect value.&lt;/p&gt;&#10;      "/>
      <method id="getRGBColorValue" name="getRGBColorValue" return_type="RGBColor" owner_id="CSSPrimitiveValue" description="&#10;      &lt;p&gt;&#10;&#9;This method is used to get the RGB color. If this CSS value doesn't&#10;&#9;contain a RGB color value, a &lt;code&gt;DOMException&lt;/code&gt; is&#10;&#9;raised. Modification to the corresponding style property can be&#10;&#9;achieved using the &lt;code&gt;RGBColor&lt;/code&gt; interface.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;the RGB color value.&lt;/p&gt;&#10;      "/>
    </methods>
    <properties>
      <property name="primitiveType" id="primitiveType" type="unsigned short" description="&#10;      &lt;p&gt;The type of the value as defined by the constants specified above.&lt;/p&gt;&#10;    " readonly="true" owner_id="CSSPrimitiveValue"/>
    </properties>
  </interface>
  <interface id="CSSRule" name="CSSRule" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;CSSRule&lt;/code&gt; interface is the abstract base interface for any&#10;      type of CSS &lt;xspecref href=&quot;/syndata.html#q5&quot;&gt;statement&lt;/xspecref&gt;.&#10;      This includes both &lt;xspecref href=&quot;/syndata.html#q8&quot;&gt;rule sets&lt;/xspecref&gt;&#10;      and &lt;xspecref href=&quot;/syndata.html#at-rules&quot;&gt;at-rules&lt;/xspecref&gt;. An&#10;      implementation is expected to preserve all rules specified in a CSS style&#10;      sheet, even if the rule is not recognized by the parser. Unrecognized&#10;      rules are represented using the &lt;code&gt;CSSUnknownRule&lt;/code&gt; interface.&#10;    &lt;/p&gt;&#10;  ">
    <methods/>
    <properties>
      <property name="type" id="type" type="unsigned short" description="&#10;      &lt;p&gt;&#10;&#9;The type of the rule, as defined above. The expectation is that&#10;&#9;binding-specific casting methods can be used to cast down from an&#10;&#9;instance of the &lt;code&gt;CSSRule&lt;/code&gt; interface to the specific derived&#10;&#9;interface implied by the &lt;code&gt;type&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="CSSRule"/>
      <property name="cssText" id="cssText" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;The parsable textual representation of the rule. This reflects the&#10;&#9;current state of the rule and not its initial value.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSSRule"/>
      <property name="parentStyleSheet" id="parentStyleSheet" type="CSSStyleSheet" description="&#10;      &lt;p&gt;&#10;&#9;The style sheet that contains this rule.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="CSSRule"/>
      <property name="parentRule" id="parentRule" type="CSSRule" description="&#10;      &lt;p&gt;&#10;&#9;If this rule is contained inside another rule (e.g. a style rule inside&#10;&#9;an @media block), this is the containing rule. If this rule is not&#10;&#9;nested inside any other rules, this returns &lt;code&gt;null&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="CSSRule"/>
    </properties>
  </interface>
  <interface id="CSSRuleList" name="CSSRuleList" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;CSSRuleList&lt;/code&gt; interface provides the &#10;      abstraction of an ordered collection of CSS rules.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      The items in the &lt;code&gt;CSSRuleList&lt;/code&gt; are accessible via an integral&#10;      index, starting from 0.&#10;    &lt;/p&gt;&#10;    ">
    <methods>
      <method id="item" name="item" return_type="CSSRule" owner_id="CSSRuleList" description="&#10;     &lt;p&gt;&#10;       Used to retrieve a CSS rule by ordinal index. The order in this&#10;       collection represents the order of the rules in the CSS style sheet. If&#10;       index is greater than or equal to the number of rules in the list, this&#10;       returns &lt;code&gt;null&lt;/code&gt;.&#10;     &lt;/p&gt;&#10;     " return_description="&lt;p&gt;The style rule at the &lt;code&gt;index&lt;/code&gt; position in the&#10;         &lt;code&gt;CSSRuleList&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if &#10;          that is not a valid index.&#10;      &lt;/p&gt;">
        <parameter id="" name="index" type="unsigned long" owner_id="" description="&lt;p&gt;Index into the collection&lt;/p&gt;"/>
      </method>
    </methods>
    <properties>
      <property name="length" id="length" type="unsigned long" description="&#10;     &lt;p&gt;&#10;       The number of &lt;code&gt;CSSRules&lt;/code&gt; in the list. The range of valid&#10;       child rule indices is &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;length-1&lt;/code&gt; inclusive.&#10;     &lt;/p&gt;&#10;     " readonly="true" owner_id="CSSRuleList"/>
    </properties>
  </interface>
  <interface id="CSSStyleDeclaration" name="CSSStyleDeclaration" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;CSSStyleDeclaration&lt;/code&gt; interface represents a single&#10;      &lt;xspecref href=&quot;/syndata.html#block&quot;&gt;CSS declaration block&lt;/xspecref&gt;. This interface may be used to determine the style properties&#10;      currently set in a block or to set style properties explicitly within&#10;      the block.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      While an implementation may not recognize all CSS properties within a CSS&#10;      declaration block, it is expected to provide access to all specified&#10;      properties in the style sheet through the&#10;      &lt;code&gt;CSSStyleDeclaration&lt;/code&gt; interface.  Furthermore, implementations&#10;      that support a specific level of CSS should correctly handle &lt;xspecref href=&quot;/about.html#shorthand&quot;&gt;CSS shorthand&lt;/xspecref&gt; properties&#10;      for that level. For a further discussion of shorthand properties, see the&#10;      &lt;code&gt;CSS2Properties&lt;/code&gt; interface.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      This interface is also used to provide a &lt;b&gt;read-only&lt;/b&gt; access to the&#10;      &lt;xspecref href=&quot;/cascade.html#computed-value&quot;&gt;computed&#10;      values&lt;/xspecref&gt; of an element. See also the &lt;code&gt;ViewCSS&lt;/code&gt;&#10;      interface.&#10;    &lt;/p&gt;&#10;    &lt;note&gt;&#10;      &lt;p&gt;&#10;&#9;The CSS Object Model doesn't provide an access to the &lt;xspecref href=&quot;/cascade.html#specified-value&quot;&gt;specified&lt;/xspecref&gt; or&#10;&#9;&lt;xspecref href=&quot;/cascade.html#specified-value&quot;&gt;actual&lt;/xspecref&gt; values of the&#10;&#9;CSS cascade.&#10;      &lt;/p&gt;&#10;    &lt;/note&gt;&#10;  ">
    <methods>
      <method id="getPropertyValue" name="getPropertyValue" return_type="DOMString" owner_id="CSSStyleDeclaration" description="&#10;      &lt;p&gt;&#10;&#9;Used to retrieve the value of a CSS property if it has been explicitly&#10;&#9;set within this declaration block.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;          Returns the value of the property if it has been explicitly set&#10;          for this declaration block. Returns the empty string if the property&#10;          has not been set.&#10;        &lt;/p&gt;&#10;      ">
        <parameter id="" name="propertyName" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    The name of the CSS property. See the &lt;xspecref href=&quot;/propidx.html&quot;&gt;CSS property index&lt;/xspecref&gt;.&#10;          &lt;/p&gt;&#10;        "/>
      </method>
      <method id="getPropertyCSSValue" name="getPropertyCSSValue" return_type="CSSValue" owner_id="CSSStyleDeclaration" description="&#10;      &lt;p&gt;&#10;&#9;Used to retrieve the object representation of the value of a CSS&#10;&#9;property if it has been explicitly set within this declaration block.&#10;&#9;This method returns &lt;code&gt;null&lt;/code&gt; if the property is a &lt;xspecref href=&quot;/about.html#shorthand&quot;&gt;shorthand&lt;/xspecref&gt; property. Shorthand&#10;&#9;property values can only be accessed and modified as strings, using&#10;&#9;the &lt;code&gt;getPropertyValue&lt;/code&gt; and &lt;code&gt;setProperty&lt;/code&gt; methods.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;          Returns the value of the property if it has been explicitly set for&#10;          this declaration block. Returns &lt;code&gt;null&lt;/code&gt; if the property&#10;          has not been set.&#10;        &lt;/p&gt;&#10;      ">
        <parameter id="" name="propertyName" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    The name of the CSS property. See the &lt;xspecref href=&quot;/propidx.html&quot;&gt;CSS property index&lt;/xspecref&gt;.&#10;          &lt;/p&gt;&#10;        "/>
      </method>
      <method id="removeProperty" name="removeProperty" return_type="DOMString" owner_id="CSSStyleDeclaration" description="&#10;      &lt;p&gt;&#10;&#9;Used to remove a CSS property if it has been explicitly&#10;&#9;set within this declaration block.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;          Returns the value of the property if it has been explicitly set&#10;          for this declaration block. Returns the empty string if the property&#10;          has not been set or the property name does not correspond to&#10;          a known CSS property.&#10;        &lt;/p&gt;&#10;      ">
        <parameter id="" name="propertyName" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    The name of the CSS property. See the &lt;xspecref href=&quot;/propidx.html&quot;&gt;CSS property index&lt;/xspecref&gt;.&#10;          &lt;/p&gt;&#10;        "/>
      </method>
      <method id="getPropertyPriority" name="getPropertyPriority" return_type="DOMString" owner_id="CSSStyleDeclaration" description="&#10;      &lt;p&gt; &#10;&#9;Used to retrieve the priority of a CSS property &#10;&#9;(e.g. the &lt;code&gt;&quot;important&quot;&lt;/code&gt; qualifier) if the property &#10;&#9;has been explicitly set in this declaration block.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;&#10;&#9;  A string representing the priority (e.g. &lt;code&gt;&quot;important&quot;&lt;/code&gt;)&#10;&#9;  if one exists. The empty string if none exists.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="propertyName" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The name of the CSS property. See the &lt;xspecref href=&quot;/propidx.html&quot;&gt;CSS property&#10;&#9;    index&lt;/xspecref&gt;.&#10;&#9;  &lt;/p&gt;&#10;        "/>
      </method>
      <method id="setProperty" name="setProperty" return_type="void" owner_id="CSSStyleDeclaration" description="&#10;      &lt;p&gt;&#10;&#9;Used to set a property value and priority within this declaration&#10;&#9;block.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;        &lt;/p&gt;&#10;      ">
        <parameter id="" name="propertyName" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The name of the CSS property. See the &lt;xspecref href=&quot;/propidx.html&quot;&gt;CSS property index&lt;/xspecref&gt;.&#10;&#9;  &lt;/p&gt;&#10;        "/>
        <parameter id="" name="value" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The new value of the property.&#10;&#9;  &lt;/p&gt;&#10;        "/>
        <parameter id="" name="priority" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The new priority of the property (e.g. &lt;code&gt;&quot;important&quot;&lt;/code&gt;).&#10;&#9;  &lt;/p&gt;&#10;        "/>
      </method>
      <method id="item" name="item" return_type="DOMString" owner_id="CSSStyleDeclaration" description="&#10;      &lt;p&gt;&#10;&#9;Used to retrieve the properties that have been explicitly set in&#10;&#9;this declaration block. The order of the properties retrieved using&#10;&#9;this method does not have to be the order in which they were set.&#10;&#9;This method can be used to iterate over all properties in this&#10;&#9;declaration block.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;          The name of the property at this ordinal position. The empty string&#10;          if no property exists at this position.&#10;        &lt;/p&gt;&#10;      ">
        <parameter id="" name="index" type="unsigned long" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Index of the property name to retrieve.&#10;&#9;  &lt;/p&gt;&#10;        "/>
      </method>
    </methods>
    <properties>
      <property name="cssText" id="cssText" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;The parsable textual representation of the declaration block (excluding&#10;&#9;the surrounding curly braces). Setting this attribute will result in&#10;&#9;the parsing of the new value and resetting of all the properties in the&#10;&#9;declaration block including the removal or addition of properties.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSSStyleDeclaration"/>
      <property name="length" id="length" type="unsigned long" description="&#10;      &lt;p&gt;&#10;&#9;The number of properties that have been explicitly set in this&#10;&#9;declaration block. The range of valid indices is 0 to length-1&#10;&#9;inclusive.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="CSSStyleDeclaration"/>
      <property name="parentRule" id="parentRule" type="CSSRule" description="&#10;      &lt;p&gt;&#10;&#9;The CSS rule that contains this declaration block or &lt;code&gt;null&lt;/code&gt;&#10;&#9;if this &lt;code&gt;CSSStyleDeclaration&lt;/code&gt; is not attached to a&#10;&#9;&lt;code&gt;CSSRule&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="CSSStyleDeclaration"/>
    </properties>
  </interface>
  <interface id="CSSStyleRule" name="CSSStyleRule" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;CSSStyleRule&lt;/code&gt; interface represents a single &lt;xspecref href=&quot;/syndata.html#q8&quot;&gt;rule set&lt;/xspecref&gt;&#10;      in a CSS style sheet.&#10;    &lt;/p&gt;&#10;    " parent_id="CSSRule">
    <methods/>
    <properties>
      <property name="selectorText" id="selectorText" type="DOMString" description="&#10;     &lt;p&gt;&#10;       The textual representation of the &lt;xspecref href=&quot;/selector.html&quot;&gt;selector&lt;/xspecref&gt;&#10;       for the rule set. The implementation may have stripped out insignificant&#10;       whitespace while parsing the selector.&#10;     &lt;/p&gt;&#10;     " readonly="false" owner_id="CSSStyleRule"/>
      <property name="style" id="style" type="CSSStyleDeclaration" description="&#10;     &lt;p&gt;&#10;       The &lt;xspecref href=&quot;/syndata.html#q8&quot;&gt;declaration-block&lt;/xspecref&gt;&#10;       of this rule set.&#10;     &lt;/p&gt;&#10;     " readonly="true" owner_id="CSSStyleRule"/>
    </properties>
  </interface>
  <interface id="CSSStyleSheet" name="CSSStyleSheet" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;CSSStyleSheet&lt;/code&gt; interface is a concrete interface used&#10;      to represent a CSS style sheet i.e., a style sheet whose content type&#10;      is &quot;text/css&quot;.&#10;    &lt;/p&gt;&#10;    " parent_id="stylesheets::StyleSheet">
    <methods>
      <method id="insertRule" name="insertRule" return_type="unsigned long" owner_id="CSSStyleSheet" description="&#10;     &lt;p&gt;&#10;       Used to insert a new rule into the style sheet. The new rule now&#10;       becomes part of the cascade.&#10;     &lt;/p&gt;&#10;     " return_description="&#10;        &lt;p&gt;&#10;          The index within the style sheet's rule collection of the newly&#10;          inserted rule.&#10;        &lt;/p&gt;&#10;      ">
        <parameter id="" name="rule" type="DOMString" owner_id="" description="&#10;         &lt;p&gt;&#10;           The parsable text representing the rule. For rule sets&#10;           this contains both the selector and the style declaration.&#10;           For at-rules, this specifies both the at-identifier and the&#10;           rule content.&#10;         &lt;/p&gt;&#10;        "/>
        <parameter id="" name="index" type="unsigned long" owner_id="" description="&#10;          &lt;p&gt; &#10;           The index within the style sheet's rule list of the rule &#10;           before which to insert the specified rule. If the &#10;           specified index is equal to the length of the style sheet's rule&#10;           collection, the rule will be added to the end of the style sheet.&#10;          &lt;/p&gt;&#10;        "/>
      </method>
      <method id="deleteRule" name="deleteRule" return_type="void" owner_id="CSSStyleSheet" description="&#10;     &lt;p&gt;&#10;       Used to delete a rule from the style sheet.&#10;     &lt;/p&gt;&#10;     " return_description="&lt;p&gt;&lt;/p&gt;">
        <parameter id="" name="index" type="unsigned long" owner_id="" description="&#10;          &lt;p&gt;&#10;           The index within the style sheet's rule list of the rule&#10;           to remove.&#10;          &lt;/p&gt;&#10;        "/>
      </method>
    </methods>
    <properties>
      <property name="ownerRule" id="ownerRule" type="CSSRule" description="&#10;     &lt;p&gt;&#10;&#9;If this style sheet comes from an &lt;code&gt;@import&lt;/code&gt; rule, the&#10;&#9;&lt;code&gt;ownerRule&lt;/code&gt; attribute will contain the&#10;&#9;&lt;code&gt;CSSImportRule&lt;/code&gt;. In that case, the &lt;code&gt;ownerNode&lt;/code&gt;&#10;&#9;attribute in the &lt;code&gt;StyleSheet&lt;/code&gt; interface will be&#10;&#9;&lt;code&gt;null&lt;/code&gt;. If the style sheet comes from an element or a&#10;&#9;processing instruction, the &lt;code&gt;ownerRule&lt;/code&gt; attribute will be&#10;&#9;&lt;code&gt;null&lt;/code&gt; and the &lt;code&gt;ownerNode&lt;/code&gt; attribute will contain &#10;&#9;the &lt;code&gt;Node&lt;/code&gt;.&#10;     &lt;/p&gt;&#10;     " readonly="true" owner_id="CSSStyleSheet"/>
      <property name="cssRules" id="cssRules" type="CSSRuleList" description="&#10;     &lt;p&gt;&#10;       The list of all CSS rules contained within the style sheet.&#10;       This includes both &lt;xspecref href=&quot;/syndata.html#q8&quot;&gt;rule sets&lt;/xspecref&gt; and &#10;       &lt;xspecref href=&quot;/syndata.html#at-rules&quot;&gt;at-rules&lt;/xspecref&gt;.&#10;     &lt;/p&gt;&#10;     " readonly="true" owner_id="CSSStyleSheet"/>
    </properties>
  </interface>
  <interface id="CSSUnknownRule" name="CSSUnknownRule" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;CSSUnknownRule&lt;/code&gt; interface represents an at-rule not&#10;      supported by this user agent.&#10;    &lt;/p&gt;&#10;    " parent_id="CSSRule">
    <methods/>
    <properties/>
  </interface>
  <interface id="CSSValue" name="CSSValue" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;CSSValue&lt;/code&gt; interface represents a simple or a complex&#10;      value. A &lt;code&gt;CSSValue&lt;/code&gt; object only occurs in a context of a CSS&#10;      property.&#10;    &lt;/p&gt;&#10;  ">
    <methods/>
    <properties>
      <property name="cssText" id="cssText" type="DOMString" description="&#10;      &lt;p&gt;&#10;        A string representation of the current value.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="CSSValue"/>
      <property name="cssValueType" id="cssValueType" type="unsigned short" description="&#10;      &lt;p&gt;&#10;&#9;A code defining the type of the value as defined above.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="CSSValue"/>
    </properties>
  </interface>
  <interface id="CSSValueList" name="CSSValueList" description="&#10;    &lt;p&gt;The &lt;code&gt;CSSValueList&lt;/code&gt; interface provides the abstraction of an&#10;      ordered collection of CSS values.&lt;/p&gt;&#10;    &lt;p&gt;&#10;      Some properties allow an empty list into their syntax. In that case,&#10;      these properties take the &lt;code&gt;none&lt;/code&gt; identifier. So, an empty list &#10;      means that the property has the value &lt;code&gt;none&lt;/code&gt;.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      The items in the &lt;code&gt;CSSValueList&lt;/code&gt; are accessible via an integral&#10;      index, starting from 0.&#10;    &lt;/p&gt;&#10;  " parent_id="CSSValue">
    <methods>
      <method id="item" name="item" return_type="CSSValue" owner_id="CSSValueList" description="&#10;      &lt;p&gt;Used to retrieve a &lt;code&gt;CSSValue&lt;/code&gt; by ordinal index. The order in this&#10;&#9;collection represents the order of the values in the CSS style&#10;&#9;property.  If index is greater than or equal to the number of values in the list, this&#10;       returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;The &lt;code&gt;CSSValue&lt;/code&gt; at the &lt;code&gt;index&lt;/code&gt; position in the&#10;&#9;  &lt;code&gt;CSSValueList&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if that is not a valid&#10;&#9;  index.&lt;/p&gt;&#10;      ">
        <parameter id="" name="index" type="unsigned long" owner_id="" description="&#10;&#9;  &lt;p&gt;Index into the collection.&lt;/p&gt;&#10;&#9;"/>
      </method>
    </methods>
    <properties>
      <property name="length" id="length" type="unsigned long" description="&#10;      &lt;p&gt;The number of &lt;code&gt;CSSValues&lt;/code&gt; in the list. The range of valid&#10;&#9;values of the indices is &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;length-1&lt;/code&gt;&#10;&#9;inclusive.&lt;/p&gt;&#10;    " readonly="true" owner_id="CSSValueList"/>
    </properties>
  </interface>
  <interface id="DocumentCSS" name="DocumentCSS" description="&#10;    &lt;p&gt;This interface represents a document with a CSS view.&lt;/p&gt;&#10;    &lt;p&gt;&#10;      The &lt;code&gt;getOverrideStyle&lt;/code&gt; method provides a mechanism through&#10;      which a DOM author could effect immediate change to the style of an&#10;      element without modifying the explicitly linked style sheets of a&#10;      document or the inline style of elements in the style sheets.  This style&#10;      sheet comes after the author style sheet in the cascade algorithm and is&#10;      called &lt;emph&gt;override style sheet&lt;/emph&gt;. The override style sheet takes&#10;      precedence over author style sheets. An &quot;!important&quot; declaration still&#10;      takes precedence over a normal declaration. Override, author, and user&#10;      style sheets all may contain &quot;!important&quot; declarations. User &quot;!important&quot;&#10;      rules take precedence over both override and author &quot;!important&quot; rules,&#10;      and override &quot;!important&quot; rules take precedence over author &quot;!important&quot;&#10;      rules.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      The expectation is that an instance of the &lt;code&gt;DocumentCSS&lt;/code&gt;&#10;      interface can be obtained by using binding-specific casting methods on an&#10;      instance of the &lt;code&gt;Document&lt;/code&gt; interface.&#10;    &lt;/p&gt;&#10;  " parent_id="stylesheets::DocumentStyle">
    <methods>
      <method id="getOverrideStyle" name="getOverrideStyle" return_type="CSSStyleDeclaration" owner_id="DocumentCSS" description="&#10;      &lt;p&gt;&#10;&#9;This method is used to retrieve the override style declaration for a&#10;&#9;specified element and a specified pseudo-element.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;&#10;&#9;  The override style declaration.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="elt" type="Element" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The element whose style is to be modified.  This parameter cannot&#10;&#9;    be null.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="pseudoElt" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The pseudo-element or &lt;code&gt;null&lt;/code&gt; if none.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
    </methods>
    <properties/>
  </interface>
  <interface id="DocumentStyle" name="DocumentStyle" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;DocumentStyle&lt;/code&gt; interface provides a mechanism by which&#10;      the style sheets embedded in a document can be retrieved. The expectation&#10;      is that an instance of the &lt;code&gt;DocumentStyle&lt;/code&gt; interface can be&#10;      obtained by using binding-specific casting methods on an instance of the&#10;      &lt;code&gt;Document&lt;/code&gt; interface.&#10;    &lt;/p&gt;&#10;  ">
    <methods/>
    <properties>
      <property name="styleSheets" id="styleSheets" type="StyleSheetList" description="&#10;      &lt;p&gt;&#10;&#9;A list containing all the style sheets explicitly linked into or&#10;&#9;embedded in a document.  For HTML documents, this includes external&#10;&#9;style sheets, included via the HTML&#10;      &lt;xspecref href=&quot;/struct/links.html#h-12.3&quot;&gt;&#10;        LINK&lt;/xspecref&gt; element, and inline&#10;      &lt;xspecref href=&quot;/present/styles.html#h-14.2.3&quot;&gt;&#10;        STYLE&lt;/xspecref&gt; elements. In XML, this includes external&#10;      style sheets, included via style sheet&#10;        processing instructions (see &lt;bibref ref=&quot;XML-StyleSheet&quot;&gt;&lt;/bibref&gt;).&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="DocumentStyle"/>
    </properties>
  </interface>
  <interface id="DOMImplementationCSS" name="DOMImplementationCSS" description="&#10;    &lt;p&gt;&#10;      This interface allows the DOM user to create a &lt;code&gt;CSSStyleSheet&lt;/code&gt;&#10;      outside the context of a document. There is no way to associate the new&#10;      &lt;code&gt;CSSStyleSheet&lt;/code&gt; with a document in DOM Level 2.&#10;    &lt;/p&gt;&#10;  " parent_id="DOMImplementation">
    <methods>
      <method id="createCSSStyleSheet" name="createCSSStyleSheet" return_type="CSSStyleSheet" owner_id="DOMImplementationCSS" description="&#10;      &lt;p&gt;Creates a new &lt;code&gt;CSSStyleSheet&lt;/code&gt;.&lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;A new CSS style sheet.&lt;/p&gt;&#10;      ">
        <parameter id="" name="title" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The advisory title. See also the &lt;specref ref=&quot;StyleSheets-StyleSheet-title&quot;&gt;&lt;/specref&gt; section.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="media" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The comma-separated list of media associated with the new style&#10;&#9;    sheet. See also the &lt;specref ref=&quot;StyleSheets-StyleSheet-media&quot;&gt;&lt;/specref&gt;&#10;&#9;    section.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
    </methods>
    <properties/>
  </interface>
  <interface id="ElementCSSInlineStyle" name="ElementCSSInlineStyle" description="&#10;    &lt;p&gt;&#10;      Inline style information attached to elements is exposed through the&#10;      &lt;code&gt;style&lt;/code&gt; attribute.  This represents the contents of the&#10;      &lt;xspecref href=&quot;/present/styles.html#h-14.2.2&quot;&gt;STYLE&lt;/xspecref&gt;&#10;      attribute for HTML elements (or elements in other schemas or DTDs which&#10;      use the STYLE attribute in the same way). The expectation is that an&#10;      instance of the ElementCSSInlineStyle interface can be obtained by using&#10;      binding-specific casting methods on an instance of the Element interface&#10;      when the element supports inline CSS style informations.&#10;    &lt;/p&gt;&#10;  ">
    <methods/>
    <properties>
      <property name="style" id="style" type="CSSStyleDeclaration" description="&#10;      &lt;p&gt;&#10;        The style attribute.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="ElementCSSInlineStyle"/>
    </properties>
  </interface>
  <interface id="LinkStyle" name="LinkStyle" description="&#9;  &#10;    &lt;p&gt;&#10;      The &lt;code&gt;LinkStyle&lt;/code&gt; interface provides a mechanism by which a&#10;      style sheet can be retrieved from the node responsible for linking it&#10;      into a document. An instance of the &lt;code&gt;LinkStyle&lt;/code&gt; interface can&#10;      be obtained using binding-specific casting methods on an instance of a&#10;      linking node (&lt;code&gt;HTMLLinkElement&lt;/code&gt;, &lt;code&gt;HTMLStyleElement&lt;/code&gt;&#10;      or &lt;code&gt;ProcessingInstruction&lt;/code&gt; in DOM Level 2).&#10;    &lt;/p&gt;&#10;  ">
    <methods/>
    <properties>
      <property name="sheet" id="sheet" type="StyleSheet" description="&#10;      &lt;p&gt;&#10;&#9;The style sheet.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="LinkStyle"/>
    </properties>
  </interface>
  <interface id="MediaList" name="MediaList" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;MediaList&lt;/code&gt; interface provides the abstraction of an&#10;      ordered collection of &lt;xspecref href=&quot;/types.html#h-6.13&quot;&gt;media&lt;/xspecref&gt;,&#10;      without defining or constraining how this collection is implemented. An&#10;      empty list is the same as a list that contains the medium&#10;      &lt;code&gt;&quot;all&quot;&lt;/code&gt;.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      The items in the &lt;code&gt;MediaList&lt;/code&gt; are accessible via an integral&#10;      index, starting from 0.&#10;    &lt;/p&gt;&#10;  ">
    <methods>
      <method id="item" name="item" return_type="DOMString" owner_id="MediaList" description="&#10;      &lt;p&gt;&#10;&#9;Returns the &lt;code&gt;index&lt;/code&gt;th in the list. If &lt;code&gt;index&lt;/code&gt; is&#10;&#9;greater than or equal to the number of media in the list, this returns&#10;&#9;&lt;code&gt;null&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;&#10;&#9;  The medium at the &lt;code&gt;index&lt;/code&gt;th position in the&#10;&#9;  &lt;code&gt;MediaList&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if that is not a&#10;&#9;  valid index.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="index" type="unsigned long" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Index into the collection.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="deleteMedium" name="deleteMedium" return_type="void" owner_id="MediaList" description="&#10;      &lt;p&gt;&#10;&#9;Deletes the medium indicated by &lt;code&gt;oldMedium&lt;/code&gt; from the list.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;&lt;/p&gt;&#10;      ">
        <parameter id="" name="oldMedium" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;The medium to delete in the media list.&lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="appendMedium" name="appendMedium" return_type="void" owner_id="MediaList" description="&#10;      &lt;p&gt;&#10;&#9;Adds the medium &lt;code&gt;newMedium&lt;/code&gt; to the end of the list. If the&#10;&#9;&lt;code&gt;newMedium&lt;/code&gt; is already used, it is first removed.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;&lt;/p&gt;&#10;      ">
        <parameter id="" name="newMedium" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;The new medium to add.&lt;/p&gt;&#10;&#9;"/>
      </method>
    </methods>
    <properties>
      <property name="mediaText" id="mediaText" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;The parsable textual representation of the media list. This is a&#10;&#9;comma-separated list of media.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="MediaList"/>
      <property name="length" id="length" type="unsigned long" description="&#10;      &lt;p&gt;&#10;&#9;The number of media in the list. The range of valid media is&#10;&#9;&lt;code&gt;0&lt;/code&gt; to &lt;code&gt;length-1&lt;/code&gt; inclusive.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="MediaList"/>
    </properties>
  </interface>
  <interface id="Range" name="Range" description=" &#10;">
    <methods>
      <method id="setStart" name="setStart" return_type="void" owner_id="Range" description=" &#10;&lt;p&gt;Sets the attributes describing the start of the Range. &lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt; &lt;/p&gt; &#10;">
        <parameter id="" name="refNode" type="Node" owner_id="" description=" &#10;&lt;p&gt;The &lt;code&gt;refNode&lt;/code&gt; value. This parameter must be different from&#10;&lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &#10;"/>
        <parameter id="" name="offset" type="long" owner_id="" description=" &#10;&lt;p&gt;The &lt;code&gt;startOffset&lt;/code&gt; value.&lt;/p&gt; &#10;"/>
      </method>
      <method id="setEnd" name="setEnd" return_type="void" owner_id="Range" description=" &#10;&lt;p&gt;Sets the attributes describing the end of a Range.&lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt; &lt;/p&gt; &#10;">
        <parameter id="" name="refNode" type="Node" owner_id="" description=" &#10;&lt;p&gt;The &lt;code&gt;refNode&lt;/code&gt; value. This parameter must be different from&#10;&lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &#10;"/>
        <parameter id="" name="offset" type="long" owner_id="" description=" &#10;&lt;p&gt;The &lt;code&gt;endOffset&lt;/code&gt; value.&lt;/p&gt; &#10;"/>
      </method>
      <method id="setStartBefore" name="setStartBefore" return_type="void" owner_id="Range" description=" &#10;&lt;p&gt;Sets the start position to be before a node&lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt; &lt;/p&gt; &#10;">
        <parameter id="" name="refNode" type="Node" owner_id="" description=" &#10;&lt;p&gt;Range starts before &lt;code&gt;refNode&lt;/code&gt;&lt;/p&gt; &#10;"/>
      </method>
      <method id="setStartAfter" name="setStartAfter" return_type="void" owner_id="Range" description=" &#10;&lt;p&gt;Sets the start position to be after a node&lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt; &lt;/p&gt; &#10;">
        <parameter id="" name="refNode" type="Node" owner_id="" description=" &#10;&lt;p&gt;Range starts after &lt;code&gt;refNode&lt;/code&gt;&lt;/p&gt; &#10;"/>
      </method>
      <method id="setEndBefore" name="setEndBefore" return_type="void" owner_id="Range" description=" &#10;&lt;p&gt;Sets the end position to be before a node. &lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt; &lt;/p&gt; &#10;">
        <parameter id="" name="refNode" type="Node" owner_id="" description=" &#10;&lt;p&gt;Range ends before &lt;code&gt;refNode&lt;/code&gt;&lt;/p&gt; &#10;"/>
      </method>
      <method id="setEndAfter" name="setEndAfter" return_type="void" owner_id="Range" description=" &#10;&lt;p&gt;Sets the end of a Range to be after a node &lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt; &lt;/p&gt; &#10;">
        <parameter id="" name="refNode" type="Node" owner_id="" description=" &#10;&lt;p&gt;Range ends after &lt;code&gt;refNode&lt;/code&gt;.&lt;/p&gt; &#10;"/>
      </method>
      <method id="collapse" name="collapse" return_type="void" owner_id="Range" description=" &#10;&lt;p&gt;Collapse a Range onto one of its boundary-points &lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt; &lt;/p&gt; &#10;">
        <parameter id="" name="toStart" type="boolean" owner_id="" description=" &#10;&lt;p&gt;If TRUE, collapses the Range onto its start; if FALSE, collapses it onto its&#10;end.&lt;/p&gt; &#10;"/>
      </method>
      <method id="selectNode" name="selectNode" return_type="void" owner_id="Range" description=" &#10;&lt;p&gt;Select a node and its contents &lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt; &lt;/p&gt; &#10;">
        <parameter id="" name="refNode" type="Node" owner_id="" description=" &#10;&lt;p&gt;The node to select.&lt;/p&gt; &#10;"/>
      </method>
      <method id="selectNodeContents" name="selectNodeContents" return_type="void" owner_id="Range" description=" &#10;&lt;p&gt;Select the contents within a node &lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt; &lt;/p&gt; &#10;">
        <parameter id="" name="refNode" type="Node" owner_id="" description=" &#10;&lt;p&gt;Node to select from&lt;/p&gt; &#10;"/>
      </method>
      <method id="compareBoundaryPoints" name="compareBoundaryPoints" return_type="short" owner_id="Range" description=" &#10;&lt;p&gt;Compare the boundary-points of two Ranges in a document.&lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt; -1, 0 or 1 depending on whether the corresponding boundary-point of the&#10;Range is respectively before, equal to, or after the corresponding boundary-point&#10;of &lt;code&gt;sourceRange&lt;/code&gt;. &lt;/p&gt; &#10;">
        <parameter id="" name="how" type="unsigned short" owner_id="" description=" &#10;&lt;p&gt;A code representing the type of comparison, as defined above.&lt;/p&gt; &#10;"/>
        <parameter id="" name="sourceRange" type="Range" owner_id="" description=" &#10;&lt;p&gt;The &lt;code&gt;Range&lt;/code&gt; on which this current &lt;code&gt;Range&lt;/code&gt; is compared to.&lt;/p&gt; &#10;"/>
      </method>
      <method id="deleteContents" name="deleteContents" return_type="void" owner_id="Range" description=" &#10;&lt;p&gt;Removes the contents of a Range from the containing document or document&#10;fragment without returning a reference to the removed content. &lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt; &lt;/p&gt; &#10;"/>
      <method id="extractContents" name="extractContents" return_type="DocumentFragment" owner_id="Range" description=" &#10;&lt;p&gt;Moves the contents of a Range from the containing document or document&#10;fragment to a new DocumentFragment. &lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt;A DocumentFragment containing the extracted contents. &lt;/p&gt; &#10;"/>
      <method id="cloneContents" name="cloneContents" return_type="DocumentFragment" owner_id="Range" description=" &#10;&lt;p&gt;Duplicates the contents of a Range &lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt;A DocumentFragment that contains content equivalent to this Range.&lt;/p&gt;&#10;"/>
      <method id="insertNode" name="insertNode" return_type="void" owner_id="Range" description=" &#10;&lt;p&gt;Inserts a node into the Document or DocumentFragment at the start of the&#10;Range. If the container is a Text node, this will be split at the start of the&#10;Range (as if the Text node's splitText method was performed at the insertion&#10;point) and the insertion will occur between the two resulting Text nodes.&#10;Adjacent Text nodes will not be automatically merged. If the node to be inserted is a &#10;DocumentFragment node, the children will be inserted rather than the DocumentFragment node&#10;itself.&lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt; &lt;/p&gt; &#10;">
        <parameter id="" name="newNode" type="Node" owner_id="" description=" &#10;&lt;p&gt;The node to insert at the start of the Range&lt;/p&gt; &#10;"/>
      </method>
      <method id="surroundContents" name="surroundContents" return_type="void" owner_id="Range" description=" &#10;&lt;p&gt;Reparents the contents of the Range to the given node and inserts the node&#10;at the position of the start of the Range. &lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt; &lt;/p&gt; &#10;">
        <parameter id="" name="newParent" type="Node" owner_id="" description=" &#10;&lt;p&gt;The node to surround the contents with.&lt;/p&gt; &#10;"/>
      </method>
      <method id="cloneRange" name="cloneRange" return_type="Range" owner_id="Range" description=" &#10;&lt;p&gt;Produces a new Range whose boundary-points are equal to the boundary-points&#10;of the Range. &lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt;The duplicated Range. &lt;/p&gt; &#10;"/>
      <method id="toString" name="toString" return_type="DOMString" owner_id="Range" description=" &#10;&lt;p&gt;Returns the contents of a Range as a string. This string contains only the&#10;data characters, not any markup. &lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt;The contents of the Range.&lt;/p&gt; &#10;"/>
      <method id="detach" name="detach" return_type="void" owner_id="Range" description=" &#10;&lt;p&gt;Called to indicate that the Range is no longer in use and that the&#10;implementation may relinquish any resources associated with this Range.&#10;Subsequent calls to any methods or attribute getters on this Range will result&#10;in a &lt;code&gt;DOMException&lt;/code&gt; being thrown with an error code of&#10;&lt;code&gt;INVALID_STATE_ERR&lt;/code&gt;.&lt;/p&gt; &#10;" return_description=" &#10;"/>
    </methods>
    <properties>
      <property name="startContainer" id="startContainer" type="Node" description=" &#10;&lt;p&gt;Node within which the Range begins &lt;/p&gt; &#10;" readonly="true" owner_id="Range"/>
      <property name="startOffset" id="startOffset" type="long" description=" &#10;&lt;p&gt;Offset within the starting node of the Range. &lt;/p&gt; &#10;" readonly="true" owner_id="Range"/>
      <property name="endContainer" id="endContainer" type="Node" description=" &#10;&lt;p&gt;Node within which the Range ends &lt;/p&gt; &#10;" readonly="true" owner_id="Range"/>
      <property name="endOffset" id="endOffset" type="long" description=" &#10;&lt;p&gt;Offset within the ending node of the Range. &lt;/p&gt; &#10;" readonly="true" owner_id="Range"/>
      <property name="collapsed" id="collapsed" type="boolean" description=" &#10;&lt;p&gt;TRUE if the Range is collapsed &lt;/p&gt; &#10;" readonly="true" owner_id="Range"/>
      <property name="commonAncestorContainer" id="commonAncestorContainer" type="Node" description=" &#10;&lt;p&gt;The &lt;termref def=&quot;dt-deepest&quot;&gt;deepest&lt;/termref&gt; common &lt;termref def=&quot;td-ancestor-container&quot;&gt;ancestor container&lt;/termref&gt; of the Range's two&#10;boundary-points.&lt;/p&gt; &#10;" readonly="true" owner_id="Range"/>
    </properties>
  </interface>
  <interface id="DocumentRange" name="DocumentRange" description=" &#10;">
    <methods>
      <method id="createRange" name="createRange" return_type="Range" owner_id="DocumentRange" description=" &#10;&lt;p&gt;This interface can be obtained from the object implementing&#10;the &lt;code&gt;Document&lt;/code&gt; interface using binding-specific casting methods.&lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt;The initial state of the Range returned from this method is such that both&#10;of its boundary-points are positioned at the beginning of the corresponding&#10;Document, before any content. The Range returned can only be used to select&#10;content associated with this Document, or with DocumentFragments and Attrs for&#10;which this Document is the &lt;code&gt;ownerDocument&lt;/code&gt;.&lt;/p&gt; &#10;"/>
    </methods>
    <properties/>
  </interface>
  <interface id="Rect" name="Rect" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;Rect&lt;/code&gt; interface is used to represent any &lt;xspecref href=&quot;/visufx.html#value-def-shape&quot;&gt;rect&lt;/xspecref&gt;&#10;      value. This interface reflects the values in the underlying style&#10;      property. Hence, modifications made to the &lt;code&gt;CSSPrimitiveValue&lt;/code&gt;&#10;      objects modify the style property.&#10;    &lt;/p&gt;&#10;  ">
    <methods/>
    <properties>
      <property name="top" id="top" type="CSSPrimitiveValue" description="&#10;      &lt;p&gt;&#10;        This attribute is used for the top of the rect.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="Rect"/>
      <property name="right" id="right" type="CSSPrimitiveValue" description="&#10;      &lt;p&gt;&#10;        This attribute is used for the right of the rect.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="Rect"/>
      <property name="bottom" id="bottom" type="CSSPrimitiveValue" description="&#10;      &lt;p&gt;&#10;        This attribute is used for the bottom of the rect.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="Rect"/>
      <property name="left" id="left" type="CSSPrimitiveValue" description="&#10;      &lt;p&gt;&#10;        This attribute is used for the left of the rect.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="Rect"/>
    </properties>
  </interface>
  <interface id="RGBColor" name="RGBColor" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;RGBColor&lt;/code&gt; interface is used to represent any &lt;xspecref href=&quot;/syndata.html#value-def-color&quot;&gt;RGB&#10;      color&lt;/xspecref&gt; value. This interface reflects the values in the&#10;      underlying style property. Hence, modifications made to the&#10;      &lt;code&gt;CSSPrimitiveValue&lt;/code&gt; objects modify the style property.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      A specified RGB color is not clipped (even if the number is outside the&#10;      range 0-255 or 0%-100%). A computed RGB color is clipped depending on the&#10;      device.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      Even if a style sheet can only contain an integer for a color value, the&#10;      internal storage of this integer is a float, and this can be used as a&#10;      float in the specified or the computed style.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      A color percentage value can always be converted to a number and vice&#10;      versa.&#10;    &lt;/p&gt;&#10;  ">
    <methods/>
    <properties>
      <property name="red" id="red" type="CSSPrimitiveValue" description="&#10;      &lt;p&gt;&#10;        This attribute is used for the red value of the RGB color.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="RGBColor"/>
      <property name="green" id="green" type="CSSPrimitiveValue" description="&#10;      &lt;p&gt;&#10;        This attribute is used for the green value of the RGB color.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="RGBColor"/>
      <property name="blue" id="blue" type="CSSPrimitiveValue" description="&#10;      &lt;p&gt;&#10;        This attribute is used for the blue value of the RGB color.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="RGBColor"/>
    </properties>
  </interface>
  <interface id="StyleSheet" name="StyleSheet" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;StyleSheet&lt;/code&gt; interface is the abstract base interface for&#10;      any type of style sheet. It represents a single style sheet associated&#10;      with a structured document. In HTML, the StyleSheet interface represents&#10;      either an external style sheet, included via the HTML&#10;      &lt;xspecref href=&quot;/struct/links.html#h-12.3&quot;&gt;&#10;        LINK&lt;/xspecref&gt; element, or an inline&#10;      &lt;xspecref href=&quot;/present/styles.html#h-14.2.3&quot;&gt;&#10;        STYLE&lt;/xspecref&gt; element. In XML, this interface represents an external&#10;      style sheet, included via a &lt;xspecref href=&quot;&quot;&gt;style sheet&#10;        processing instruction&lt;/xspecref&gt;.&#10;    &lt;/p&gt;&#10;  ">
    <methods/>
    <properties>
      <property name="type" id="type" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;This specifies the style sheet language for this style sheet. The style&#10;&#9;sheet language is specified as a content type (e.g. &quot;text/css&quot;).  The&#10;&#9;&lt;xspecref href=&quot;/types.html#type-content-type&quot;&gt;content&#10;&#9;type&lt;/xspecref&gt; is often specified in the &lt;code&gt;ownerNode&lt;/code&gt;.  Also&#10;&#9;see the &lt;xspecref href=&quot;/struct/links.html#adef-type-A&quot;&gt;type&#10;&#9;attribute definition&lt;/xspecref&gt; for the &lt;code&gt;LINK&lt;/code&gt; element in&#10;&#9;HTML 4.0, and the type pseudo-attribute for the XML &lt;xspecref href=&quot;&quot;&gt;style sheet processing instruction&lt;/xspecref&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="StyleSheet"/>
      <property name="disabled" id="disabled" type="boolean" description="&#10;      &lt;p&gt;&#10;&#9;&lt;code&gt;false&lt;/code&gt; if the style sheet is applied to the document.&#10;&#9;&lt;code&gt;true&lt;/code&gt; if it is not. Modifying this attribute may cause a&#10;&#9;new resolution of style for the document. A stylesheet only applies if&#10;&#9;both an appropriate medium definition is present and the disabled&#10;&#9;attribute is false. So, if the media doesn't apply to the current user&#10;&#9;agent, the &lt;code&gt;disabled&lt;/code&gt; attribute is ignored.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="StyleSheet"/>
      <property name="ownerNode" id="ownerNode" type="Node" description="&#10;      &lt;p&gt;&#10;&#9;The node that associates this style sheet with the document. For HTML,&#10;&#9;this may be the corresponding &lt;code&gt;LINK&lt;/code&gt; or &lt;code&gt;STYLE&lt;/code&gt;&#10;&#9;element. For XML, it may be the linking processing instruction. For&#10;&#9;style sheets that are included by other style sheets, the value of this&#10;&#9;attribute is &lt;code&gt;null&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="StyleSheet"/>
      <property name="parentStyleSheet" id="parentStyleSheet" type="StyleSheet" description="&#10;      &lt;p&gt;&#10;&#9;For style sheet languages that support the concept of style sheet&#10;&#9;inclusion, this attribute represents the including style sheet, if one&#10;&#9;exists. If the style sheet is a top-level style sheet, or the style&#10;&#9;sheet language does not support inclusion, the value of this attribute&#10;&#9;is &lt;code&gt;null&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="StyleSheet"/>
      <property name="href" id="href" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;If the style sheet is a linked style sheet, the value of its attribute&#10;&#9;is its location. For inline style sheets, the value of this attribute&#10;&#9;is &lt;code&gt;null&lt;/code&gt;. See the &lt;xspecref href=&quot;/struct/links.html#adef-href&quot;&gt;href&#10;&#9;attribute definition&lt;/xspecref&gt; for the &lt;code&gt;LINK&lt;/code&gt; element in HTML&#10;&#9;4.0, and the href pseudo-attribute for the XML &lt;xspecref href=&quot;/#The%20xml-stylesheet%20processing%20instruction&quot;&gt;style sheet processing&#10;&#9;instruction&lt;/xspecref&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="StyleSheet"/>
      <property name="title" id="title" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;The advisory title.  The title is often specified in the&#10;&#9;&lt;code&gt;ownerNode&lt;/code&gt;.  See the &lt;xspecref href=&quot;/struct/global.html#adef-title&quot;&gt;title attribute&#10;&#9;definition&lt;/xspecref&gt; for the &lt;code&gt;LINK&lt;/code&gt; element in HTML 4.0,&#10;&#9;and the title pseudo-attribute for the XML &lt;xspecref href=&quot;/#The%20xml-stylesheet%20processing%20instruction&quot;&gt;style sheet processing instruction&lt;/xspecref&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="StyleSheet"/>
      <property name="media" id="media" type="MediaList" description="&#10;      &lt;p&gt;&#10;&#9;The intended destination media for style information.  The media is&#10;&#9;often specified in the &lt;code&gt;ownerNode&lt;/code&gt;. If no media has been&#10;&#9;specified, the &lt;code&gt;MediaList&lt;/code&gt; will be empty. See the &lt;xspecref href=&quot;/present/styles.html#adef-media&quot;&gt;media&#10;&#9;attribute definition&lt;/xspecref&gt; for the &lt;code&gt;LINK&lt;/code&gt; element in&#10;&#9;HTML 4.0, and the media pseudo-attribute for the XML &lt;xspecref href=&quot;/#The%20xml-stylesheet%20processing%20instruction&quot;&gt;style sheet processing&#10;&#9;instruction &lt;/xspecref&gt;. Modifying the media list may cause a change to&#10;&#9;the attribute &lt;code&gt;disabled&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="StyleSheet"/>
    </properties>
  </interface>
  <interface id="StyleSheetList" name="StyleSheetList" description="&#10;    &lt;p&gt;The &lt;code&gt;StyleSheetList&lt;/code&gt; interface provides the &#10;      abstraction of an ordered collection of style sheets.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      The items in the &lt;code&gt;StyleSheetList&lt;/code&gt; are accessible via an&#10;      integral index, starting from 0.&#10;    &lt;/p&gt;&#10;    ">
    <methods>
      <method id="item" name="item" return_type="StyleSheet" owner_id="StyleSheetList" description="&#10;     &lt;p&gt;&#10;       Used to retrieve a style sheet by ordinal index. If index is greater&#10;       than or equal to the number of style sheets in the list, this returns&#10;       &lt;code&gt;null&lt;/code&gt;.&#10;     &lt;/p&gt;&#10;     " return_description="&lt;p&gt;The style sheet at the &lt;code&gt;index&lt;/code&gt; position in the&#10;         &lt;code&gt;StyleSheetList&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if &#10;          that is not a valid index.&#10;      &lt;/p&gt;">
        <parameter id="" name="index" type="unsigned long" owner_id="" description="&lt;p&gt;Index into the collection&lt;/p&gt;"/>
      </method>
    </methods>
    <properties>
      <property name="length" id="length" type="unsigned long" description="&#10;     &lt;p&gt;&#10;       The number of &lt;code&gt;StyleSheets&lt;/code&gt; in the list. The range of valid&#10;       child stylesheet indices is &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;length-1&lt;/code&gt;&#10;       inclusive.&#10;     &lt;/p&gt;&#10;     " readonly="true" owner_id="StyleSheetList"/>
    </properties>
  </interface>
  <interface id="NodeIterator" name="NodeIterator" description=" &#10;&lt;p&gt;&lt;code&gt;Iterators&lt;/code&gt; are used to step through a set of nodes, e.g. the set&#10;of nodes in a &lt;code&gt;NodeList&lt;/code&gt;, the document subtree governed by a&#10;particular &lt;code&gt;Node&lt;/code&gt;, the results of a query, or any other set of&#10;nodes. The set of nodes to be iterated is determined by the implementation of&#10;the &lt;code&gt;NodeIterator&lt;/code&gt;. DOM Level 2 specifies a single&#10;&lt;code&gt;NodeIterator&lt;/code&gt; implementation for document-order traversal of a&#10;document subtree. Instances of these iterators are created by calling&#10;&lt;code&gt;DocumentTraversal&lt;/code&gt;&lt;code&gt;.createNodeIterator()&lt;/code&gt;.&lt;/p&gt; &#10;">
    <methods>
      <method id="nextNode" name="nextNode" return_type="Node" owner_id="NodeIterator" description=" &#10;&lt;p&gt;Returns the next node in the set and advances the position of the iterator&#10;in the set. After a &lt;code&gt;NodeIterator&lt;/code&gt; is created, the first call to&#10;&lt;code&gt;nextNode()&lt;/code&gt; returns the first node in the set.&lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt;The next &lt;code&gt;Node&lt;/code&gt; in the set being iterated over, or&#10;&lt;code&gt;null&lt;/code&gt; if there are no more members in that set.&lt;/p&gt; &#10;"/>
      <method id="previousNode" name="previousNode" return_type="Node" owner_id="NodeIterator" description=" &#10;&lt;p&gt;Returns the previous node in the set and moves the position of the&#10;&lt;code&gt;NodeIterator&lt;/code&gt; backwards in the set.&lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt;The previous &lt;code&gt;Node&lt;/code&gt; in the set being iterated over, or&#10;&lt;code&gt;null&lt;/code&gt; if there are no more members in that set. &lt;/p&gt; &#10;"/>
      <method id="detach" name="detach" return_type="void" owner_id="NodeIterator" description=" &#10;&lt;p&gt;Detaches the &lt;code&gt;NodeIterator&lt;/code&gt; from the set which it iterated over,&#10;releasing any computational resources and placing the iterator in the INVALID&#10;state. After &lt;code&gt;detach&lt;/code&gt; has been invoked, calls to&#10;&lt;code&gt;nextNode&lt;/code&gt; or &lt;code&gt;previousNode&lt;/code&gt; will raise the exception&#10;INVALID_STATE_ERR.&lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt;&lt;/p&gt; &#10;"/>
    </methods>
    <properties>
      <property name="root" id="root" type="Node" description=" &#10;&lt;p&gt;The root node of the &lt;code&gt;NodeIterator&lt;/code&gt;, as specified when it was&#10;created.&lt;/p&gt; &#10;" readonly="true" owner_id="NodeIterator"/>
      <property name="whatToShow" id="whatToShow" type="unsigned long" description=" &#10;&lt;p&gt;This attribute determines which node types are presented via the iterator.&#10;The available set of constants is defined in the &lt;code&gt;NodeFilter&lt;/code&gt;&#10;interface.&#10;&#10;&lt;!--JKESS 20000228: Document interaction --&gt;&#10;Nodes not accepted by &lt;code&gt;whatToShow&lt;/code&gt; will be skipped, but their&#10;children may still be considered. Note that this skip takes precedence over the&#10;filter, if any.&#10;&#10;&lt;!--End JKESS 20000228--&gt;&lt;/p&gt; &#10;" readonly="true" owner_id="NodeIterator"/>
      <property name="filter" id="filter" type="NodeFilter" description=" &#10;&lt;p&gt;The &lt;code&gt;NodeFilter&lt;/code&gt; used to screen nodes.&lt;/p&gt; &#10;" readonly="true" owner_id="NodeIterator"/>
      <property name="expandEntityReferences" id="expandEntityReferences" type="boolean" description=" &#10;&lt;p&gt; The value of this flag determines whether the children of entity reference&#10;nodes are visible to the iterator. If false, they&#10;&#10;&lt;!--JKESS 20000228: &quot;will be skipped over&quot; should be &quot;rejected&quot;--&gt;&#10;and their &lt;termref def=&quot;dt-descendant&quot;&gt;descendants&lt;/termref&gt; will be rejected. Note that this rejection takes&#10;precedence over &lt;code&gt;whatToShow&lt;/code&gt; and the filter. Also note that this is&#10;currently the only situation where &lt;code&gt;NodeIterators&lt;/code&gt; may reject a&#10;complete subtree rather than skipping individual nodes.&#10;&#10;&lt;!--end JKESS 20000228--&gt;&lt;/p&gt; &#10;&lt;p&gt;&lt;/p&gt; &#10;&lt;p&gt; To produce a view of the document that has entity references expanded and&#10;does not expose the entity reference node itself, use the&#10;&lt;code&gt;whatToShow&lt;/code&gt; flags to hide the entity reference node and set&#10;&lt;code&gt;expandEntityReferences&lt;/code&gt; to true when creating the iterator. To&#10;produce a view of the document that has entity reference nodes but no entity&#10;expansion, use the &lt;code&gt;whatToShow&lt;/code&gt; flags to show the entity reference&#10;node and set &lt;code&gt;expandEntityReferences&lt;/code&gt; to false.&lt;/p&gt; &#10;" readonly="true" owner_id="NodeIterator"/>
    </properties>
  </interface>
  <interface id="NodeFilter" name="NodeFilter" description=" &#10;&lt;p&gt;Filters are objects that know how to &quot;filter out&quot; nodes. If a&#10;&lt;code&gt;NodeIterator&lt;/code&gt; or &lt;code&gt;TreeWalker&lt;/code&gt; is given a&#10;&lt;code&gt;NodeFilter&lt;/code&gt;, it applies the filter before it returns the next node.&#10;If the filter says to accept the node, the traversal logic returns it;&#10;otherwise, traversal looks for the next node and pretends that the node that&#10;was rejected was not there.&lt;/p&gt; &#10;&lt;p&gt;The DOM does not provide any filters. &lt;code&gt;NodeFilter&lt;/code&gt; is just an&#10;interface that users can implement to provide their own filters. &lt;/p&gt; &#10;&lt;p&gt;&lt;code&gt;NodeFilters&lt;/code&gt; do not need to know how to traverse from node to&#10;node, nor do they need to know anything about the data structure that is being&#10;traversed. This makes it very easy to write filters, since the only thing they&#10;have to know how to do is evaluate a single node. One filter may be used with a&#10;number of different kinds of traversals, encouraging code reuse.&lt;/p&gt; &#10;">
    <methods>
      <method id="acceptNode" name="acceptNode" return_type="short" owner_id="NodeFilter" description=" &#10;&lt;p&gt;Test whether a specified node is visible in the logical view of a&#10;&lt;code&gt;TreeWalker&lt;/code&gt; or &lt;code&gt;NodeIterator&lt;/code&gt;. This function will be&#10;called by the implementation of &lt;code&gt;TreeWalker&lt;/code&gt; and&#10;&lt;code&gt;NodeIterator&lt;/code&gt;; it is not normally called directly from user code.&#10;(Though you could do so if you wanted to use the same filter to guide your own&#10;application logic.)&lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt;a constant to determine whether the node is accepted, rejected, or skipped,&#10;as defined &#10;&lt;loc href=&quot;#Traversal-NodeFilter-acceptNode-constants&quot;&gt;above&lt;/loc&gt;.&lt;/p&gt; &#10;">
        <parameter id="" name="n" type="Node" owner_id="" description=" &#10;&lt;p&gt;The node to check to see if it passes the filter or not.&lt;/p&gt; &#10;"/>
      </method>
    </methods>
    <properties/>
  </interface>
  <interface id="TreeWalker" name="TreeWalker" description=" &#10;&lt;p&gt;&lt;code&gt;TreeWalker&lt;/code&gt; objects are used to navigate a document tree or&#10;subtree using the view of the document defined by their &lt;code&gt;whatToShow&lt;/code&gt;&#10;flags and filter (if any). Any function which performs navigation using a&#10;&lt;code&gt;TreeWalker&lt;/code&gt; will automatically support any view defined by a&#10;&lt;code&gt;TreeWalker&lt;/code&gt;.&lt;/p&gt; &#10;&lt;p&gt;Omitting nodes from the logical view of a subtree can result in a structure&#10;that is substantially different from the same subtree in the complete,&#10;unfiltered document. Nodes that are &lt;termref def=&quot;dt-sibling&quot;&gt;siblings&lt;/termref&gt; in the &lt;code&gt;TreeWalker&lt;/code&gt;&#10;view may be children of different, widely separated nodes in the original view.&#10;For instance, consider a &lt;code&gt;NodeFilter&lt;/code&gt; that skips all nodes except&#10;for Text nodes and the root node of a document. In the logical view that&#10;results, all text nodes will be &lt;termref def=&quot;dt-sibling&quot;&gt;siblings&lt;/termref&gt; and appear as direct children of the&#10;root node, no matter how deeply nested the structure of the original&#10;document.&lt;/p&gt; &#10;">
    <methods>
      <method id="parentNode" name="parentNode" return_type="Node" owner_id="TreeWalker" description=" &#10;&lt;p&gt;Moves to and returns the closest visible &lt;termref def=&quot;dt-ancestor&quot;&gt;ancestor&lt;/termref&gt; node of the current node.&#10;If the search for &lt;code&gt;parentNode&lt;/code&gt; attempts to step upward from the&#10;&lt;code&gt;TreeWalker&lt;/code&gt;'s &lt;code&gt;root&lt;/code&gt; node, or if it fails to find a&#10;visible &lt;termref def=&quot;dt-ancestor&quot;&gt;ancestor&lt;/termref&gt; node, this method retains the current position and returns&#10;&lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt;The new &lt;termref def=&quot;dt-parent&quot;&gt;parent&lt;/termref&gt; node, or &lt;code&gt;null&lt;/code&gt; if the current node has no parent&#10;&#10;&lt;!-- JKESS20000217: Added phrase --&gt;&#10;in the &lt;code&gt;TreeWalker&lt;/code&gt;'s logical view.&#10;&#10;&lt;!-- End JKESS20000217 --&gt;&#10;&lt;/p&gt; &#10;"/>
      <method id="firstChild" name="firstChild" return_type="Node" owner_id="TreeWalker" description=" &#10;&lt;p&gt;Moves the &lt;code&gt;TreeWalker&lt;/code&gt; to the first visible &lt;termref def=&quot;dt-child&quot;&gt;child&lt;/termref&gt; of the current&#10;node, and returns the new node. If the current node has no visible children,&#10;returns &lt;code&gt;null&lt;/code&gt;, and retains the current node.&lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt;The new node, or &lt;code&gt;null&lt;/code&gt; if the current node has no visible&#10;children&#10;&#10;&lt;!-- JKESS20000217: Added phrase --&gt;&#10;in the &lt;code&gt;TreeWalker&lt;/code&gt;'s logical view.&#10;&#10;&lt;!-- End JKESS20000217 --&gt;&#10;&lt;/p&gt; &#10;"/>
      <method id="lastChild" name="lastChild" return_type="Node" owner_id="TreeWalker" description=" &#10;&lt;p&gt;Moves the &lt;code&gt;TreeWalker&lt;/code&gt; to the last visible &lt;termref def=&quot;dt-child&quot;&gt;child&lt;/termref&gt; of the current&#10;node, and returns the new node. If the current node has no visible children,&#10;returns &lt;code&gt;null&lt;/code&gt;, and retains the current node.&lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt;The new node, or &lt;code&gt;null&lt;/code&gt; if the current node has no children &#10;&#10;&lt;!-- JKESS20000217: Added phrase --&gt;&#10;in the &lt;code&gt;TreeWalker&lt;/code&gt;'s logical view.&#10;&#10;&lt;!-- End JKESS20000217 --&gt;&#10;&lt;/p&gt; &#10;"/>
      <method id="previousSibling" name="previousSibling" return_type="Node" owner_id="TreeWalker" description=" &#10;&lt;p&gt;Moves the &lt;code&gt;TreeWalker&lt;/code&gt; to the previous &lt;termref def=&quot;dt-sibling&quot;&gt;sibling&lt;/termref&gt; of the current&#10;node, and returns the new node. If the current node has no visible previous&#10;&lt;termref def=&quot;dt-sibling&quot;&gt;sibling&lt;/termref&gt;, returns &lt;code&gt;null&lt;/code&gt;, and retains the current node.&lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt;The new node, or &lt;code&gt;null&lt;/code&gt; if the current node has no previous&#10;&lt;termref def=&quot;dt-sibling&quot;&gt;sibling&lt;/termref&gt;.&#10;&#10;&lt;!-- JKESS20000217: Added phrase --&gt;&#10;in the &lt;code&gt;TreeWalker&lt;/code&gt;'s logical view.&#10;&#10;&lt;!-- End JKESS20000217 --&gt;&#10;&lt;/p&gt; &#10;"/>
      <method id="nextSibling" name="nextSibling" return_type="Node" owner_id="TreeWalker" description=" &#10;&lt;p&gt;Moves the &lt;code&gt;TreeWalker&lt;/code&gt; to the next &lt;termref def=&quot;dt-sibling&quot;&gt;sibling&lt;/termref&gt; of the current node,&#10;and returns the new node. If the current node has no visible next &lt;termref def=&quot;dt-sibling&quot;&gt;sibling&lt;/termref&gt;,&#10;returns &lt;code&gt;null&lt;/code&gt;, and retains the current node.&lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt;The new node, or &lt;code&gt;null&lt;/code&gt; if the current node has no next &lt;termref def=&quot;dt-sibling&quot;&gt;sibling&lt;/termref&gt;.&#10;&#10;&lt;!-- JKESS20000217: Added phrase --&gt;&#10;in the &lt;code&gt;TreeWalker&lt;/code&gt;'s logical view.&#10;&#10;&lt;!-- End JKESS20000217 --&gt;&#10;&lt;/p&gt; &#10;"/>
      <method id="previousNode" name="previousNode" return_type="Node" owner_id="TreeWalker" description=" &#10;&lt;p&gt;Moves the &lt;code&gt;TreeWalker&lt;/code&gt; to the previous visible node in document&#10;order relative to the current node, and returns the new node. If the current&#10;node has no previous node, &#10;&#10;&lt;!-- JKESS: Since this may involve an upward search...  --&gt;&#10;or if the search for &lt;code&gt;previousNode&lt;/code&gt; attempts to step upward from the&#10;&lt;code&gt;TreeWalker&lt;/code&gt;'s &lt;code&gt;root&lt;/code&gt; node,&#10;&#10;&lt;!-- END JKESS --&gt;&#10;returns &lt;code&gt;null&lt;/code&gt;, and retains the current node. &lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt;The new node, or &lt;code&gt;null&lt;/code&gt; if the current node has no previous node&#10;&#10;&lt;!-- JKESS20000217: Added phrase --&gt;&#10;in the &lt;code&gt;TreeWalker&lt;/code&gt;'s logical view.&#10;&#10;&lt;!-- End JKESS20000217 --&gt;&#10;&lt;/p&gt; &#10;"/>
      <method id="nextNode" name="nextNode" return_type="Node" owner_id="TreeWalker" description=" &#10;&lt;p&gt;Moves the &lt;code&gt;TreeWalker&lt;/code&gt; to the next visible node in document order&#10;relative to the current node, and returns the new node. If the current node has&#10;no next node, or if the search for nextNode attempts to step upward from the&#10;&lt;code&gt;TreeWalker&lt;/code&gt;'s &lt;code&gt;root&lt;/code&gt; node, returns &lt;code&gt;null&lt;/code&gt;,&#10;and retains the current node.&lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt;The new node, or &lt;code&gt;null&lt;/code&gt; if the current node has no next node &#10;&#10;&lt;!-- JKESS20000217: Added phrase --&gt;&#10;in the &lt;code&gt;TreeWalker&lt;/code&gt;'s logical view.&#10;&#10;&lt;!-- End JKESS20000217 --&gt;&#10;&lt;/p&gt; &#10;"/>
    </methods>
    <properties>
      <property name="root" id="root" type="Node" description=" &#10;&lt;p&gt;The &lt;code&gt;root&lt;/code&gt; node of the &lt;code&gt;TreeWalker&lt;/code&gt;, as specified when&#10;it was created.&lt;/p&gt; &#10;" readonly="true" owner_id="TreeWalker"/>
      <property name="whatToShow" id="whatToShow" type="unsigned long" description=" &#10;&lt;p&gt;This attribute determines which node types are presented via the&#10;&lt;code&gt;TreeWalker&lt;/code&gt;. The available set of constants is defined in the&#10;&lt;code&gt;NodeFilter&lt;/code&gt; interface.&#10;&lt;!--JKESS 20000228: Document interaction --&gt;&#10;Nodes not accepted by &lt;code&gt;whatToShow&lt;/code&gt; will be skipped, but their&#10;children may still be considered. Note that this skip takes precedence over the&#10;filter, if any.&#10;&lt;!--End JKESS 20000228--&gt;&lt;/p&gt; &#10;" readonly="true" owner_id="TreeWalker"/>
      <property name="filter" id="filter" type="NodeFilter" description=" &#10;&lt;p&gt;The filter used to screen nodes.&lt;/p&gt; &#10;" readonly="true" owner_id="TreeWalker"/>
      <property name="expandEntityReferences" id="expandEntityReferences" type="boolean" description=" &#10;&lt;p&gt;The value of this flag determines whether the children of entity reference&#10;nodes are visible to the &lt;code&gt;TreeWalker&lt;/code&gt;. If false, they &#10;&lt;!--JKESS 20000228: &quot;will be skipped over&quot; should be &quot;rejected&quot;--&gt;&#10;and their &lt;termref def=&quot;dt-descendant&quot;&gt;descendants&lt;/termref&gt; will be rejected. Note that this rejection takes&#10;precedence over &lt;code&gt;whatToShow&lt;/code&gt; and the filter, if any.&#10;&lt;!--end JKESS 20000228--&gt;&lt;/p&gt; &#10;&lt;p&gt; To produce a view of the document that has entity references expanded and&#10;does not expose the entity reference node itself, use the&#10;&lt;code&gt;whatToShow&lt;/code&gt; flags to hide the entity reference node and set&#10;&lt;code&gt;expandEntityReferences&lt;/code&gt; to true when creating the&#10;&lt;code&gt;TreeWalker&lt;/code&gt;. To produce a view of the document that has entity&#10;reference nodes but no entity expansion, use the &lt;code&gt;whatToShow&lt;/code&gt; flags&#10;to show the entity reference node and set &lt;code&gt;expandEntityReferences&lt;/code&gt;&#10;to false.&lt;/p&gt; &#10;" readonly="true" owner_id="TreeWalker"/>
      <property name="currentNode" id="currentNode" type="Node" description=" &#10;&lt;p&gt;The node at which the &lt;code&gt;TreeWalker&lt;/code&gt; is currently positioned.&lt;/p&gt; &#10;&lt;p&gt;Alterations to the DOM tree may cause the current node to no longer be&#10;accepted by the &lt;code&gt;TreeWalker&lt;/code&gt;'s associated filter.&#10;&lt;code&gt;currentNode&lt;/code&gt; may also be explicitly set to any node, whether or not&#10;it is within the subtree specified by the &lt;code&gt;root&lt;/code&gt; node or would be&#10;accepted by the filter and &lt;code&gt;whatToShow&lt;/code&gt; flags. Further traversal&#10;occurs relative to &lt;code&gt;currentNode&lt;/code&gt; even if it is not part of the&#10;current view, by applying the filters in the requested direction; if no&#10;traversal is possible, &lt;code&gt;currentNode&lt;/code&gt; is not changed. &lt;/p&gt; &#10;" readonly="false" owner_id="TreeWalker"/>
    </properties>
  </interface>
  <interface id="DocumentTraversal" name="DocumentTraversal" description=" &#10;&lt;p&gt;&lt;code&gt;DocumentTraversal&lt;/code&gt; contains methods that create iterators and&#10;tree-walkers to traverse a node and its children in document order (depth&#10;first, pre-order traversal, which is equivalent to the order in which the start&#10;tags occur in the text representation of the document). In DOMs which support&#10;the Traversal feature, &lt;code&gt;DocumentTraversal&lt;/code&gt; will be implemented by&#10;the same objects that implement the Document interface.&lt;/p&gt; &#10;">
    <methods>
      <method id="createNodeIterator" name="createNodeIterator" return_type="NodeIterator" owner_id="DocumentTraversal" description=" &#10;&lt;p&gt;Create a new &lt;code&gt;NodeIterator&lt;/code&gt; over the subtree rooted at the&#10;specified node.&lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt;The newly created &lt;code&gt;NodeIterator&lt;/code&gt;.&lt;/p&gt; &#10;">
        <parameter id="" name="root" type="Node" owner_id="" description=" &#10;&lt;p&gt;The node which will be iterated together with its children. The iterator is&#10;initially positioned just before this node. The &lt;code&gt;whatToShow&lt;/code&gt; flags&#10;and the filter, if any, are not considered when setting this position. The root&#10;must not be &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &#10;"/>
        <parameter id="" name="whatToShow" type="unsigned long" owner_id="" description=" &#10;&lt;p&gt;This flag specifies which node types may appear in the logical view of the&#10;tree presented by the iterator. See the description of &lt;code&gt;NodeFilter&lt;/code&gt;&#10;for the set of possible &lt;code&gt;SHOW_&lt;/code&gt; values.&lt;/p&gt; &#10;&lt;p&gt;These flags can be combined using &lt;code&gt;OR&lt;/code&gt;.&lt;/p&gt; &#10;"/>
        <parameter id="" name="filter" type="NodeFilter" owner_id="" description=" &#10;&lt;p&gt;The &lt;code&gt;NodeFilter&lt;/code&gt; to be used with this &lt;code&gt;TreeWalker&lt;/code&gt;, or&#10;&lt;code&gt;null&lt;/code&gt; to indicate no filter.&lt;/p&gt; &#10;"/>
        <parameter id="" name="entityReferenceExpansion" type="boolean" owner_id="" description=" &#10;&lt;p&gt;The value of this flag determines whether entity reference nodes are&#10;expanded.&lt;/p&gt; &#10;"/>
      </method>
      <method id="createTreeWalker" name="createTreeWalker" return_type="TreeWalker" owner_id="DocumentTraversal" description=" &#10;&lt;p&gt;Create a new &lt;code&gt;TreeWalker&lt;/code&gt; over the subtree rooted at the&#10;specified node.&lt;/p&gt; &#10;" return_description=" &#10;&lt;p&gt;The newly created &lt;code&gt;TreeWalker&lt;/code&gt;.&lt;/p&gt; &#10;">
        <parameter id="" name="root" type="Node" owner_id="" description=" &#10;&lt;p&gt;The node which will serve as the &lt;code&gt;root&lt;/code&gt; for the&#10;&lt;code&gt;TreeWalker&lt;/code&gt;. The &lt;code&gt;whatToShow&lt;/code&gt; flags and the&#10;&lt;code&gt;NodeFilter&lt;/code&gt; are not considered when setting this value; any node&#10;type will be accepted as the &lt;code&gt;root&lt;/code&gt;. The &lt;code&gt;currentNode&lt;/code&gt; of&#10;the &lt;code&gt;TreeWalker&lt;/code&gt; is initialized to this node, whether or not it is&#10;visible. The &lt;code&gt;root&lt;/code&gt; functions as a stopping point for traversal&#10;methods that look upward in the document structure, such as&#10;&lt;code&gt;parentNode&lt;/code&gt; and nextNode. The &lt;code&gt;root&lt;/code&gt; must not be&#10;&lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &#10;"/>
        <parameter id="" name="whatToShow" type="unsigned long" owner_id="" description=" &#10;&lt;p&gt;This flag specifies which node types may appear in the logical view of the&#10;tree presented by the tree-walker. See the description of&#10;&lt;code&gt;NodeFilter&lt;/code&gt; for the set of possible SHOW_ values.&lt;/p&gt; &#10;&lt;p&gt;These flags can be combined using &lt;code&gt;OR&lt;/code&gt;.&lt;/p&gt; &#10;"/>
        <parameter id="" name="filter" type="NodeFilter" owner_id="" description=" &#10;&lt;p&gt;The &lt;code&gt;NodeFilter&lt;/code&gt; to be used with this &lt;code&gt;TreeWalker&lt;/code&gt;, or&#10;&lt;code&gt;null&lt;/code&gt; to indicate no filter.&lt;/p&gt; &#10;"/>
        <parameter id="" name="entityReferenceExpansion" type="boolean" owner_id="" description=" &#10;&lt;p&gt;If this flag is false, the contents of &lt;code&gt;EntityReference&lt;/code&gt; nodes&#10;are not presented in the logical view.&lt;/p&gt; &#10;"/>
      </method>
    </methods>
    <properties/>
  </interface>
  <interface id="ViewCSS" name="ViewCSS" description="&#10;    &lt;p&gt;&#10;      This interface represents a CSS view. The &lt;code&gt;getComputedStyle&lt;/code&gt;&#10;      method provides a &lt;b&gt;read only access&lt;/b&gt; to the &lt;xspecref href=&quot;/cascade.html#computed-value&quot;&gt;computed values&lt;/xspecref&gt; of&#10;      an element.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      The expectation is that an instance of the &lt;code&gt;ViewCSS&lt;/code&gt;&#10;      interface can be obtained by using binding-specific casting methods on an&#10;      instance of the &lt;code&gt;AbstractView&lt;/code&gt; interface.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      Since a computed style is related to an &lt;code&gt;Element&lt;/code&gt; node, if&#10;      this element is removed from the document, the associated&#10;      &lt;code&gt;CSSStyleDeclaration&lt;/code&gt; and &lt;code&gt;CSSValue&lt;/code&gt; related to&#10;      this declaration are no longer valid.&#10;    &lt;/p&gt;&#10;    &#10;  " parent_id="views::AbstractView">
    <methods>
      <method id="getComputedStyle" name="getComputedStyle" return_type="CSSStyleDeclaration" owner_id="ViewCSS" description="&#10;      &lt;p&gt;&#10;&#9;This method is used to get the computed style as it is defined in&#10;&#9;&lt;bibref ref=&quot;CSS2&quot;&gt;&lt;/bibref&gt;.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;&#10;&#9;  The computed style. The &lt;code&gt;CSSStyleDeclaration&lt;/code&gt; is&#10;&#9;  read-only and contains only absolute values.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="elt" type="Element" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The element whose style is to be computed.  This parameter cannot&#10;&#9;    be null.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="pseudoElt" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The pseudo-element or &lt;code&gt;null&lt;/code&gt; if none.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
    </methods>
    <properties/>
  </interface>
  <interface id="AbstractView" name="AbstractView" description="&#10;&#9;  &lt;p&gt;A base interface that all views shall derive from.&lt;/p&gt;&#10;&#9;">
    <methods/>
    <properties>
      <property name="document" id="document" type="DocumentView" description="&#10;&#9;    &lt;p&gt;The source &lt;code&gt;DocumentView&lt;/code&gt; of which this is an&#10;&#9;      &lt;code&gt;AbstractView&lt;/code&gt;.&lt;/p&gt;&#10;&#9;  " readonly="true" owner_id="AbstractView"/>
    </properties>
  </interface>
  <interface id="DocumentView" name="DocumentView" description="&#10;&#9;  &lt;p&gt;The &lt;code&gt;DocumentView&lt;/code&gt; interface is implemented by&#10;&#9;    &lt;code&gt;Document&lt;/code&gt; objects in DOM implementations supporting DOM&#10;&#9;    Views. It provides an attribute to retrieve the default view of a&#10;&#9;    document.&lt;/p&gt;&#10;&#9;">
    <methods/>
    <properties>
      <property name="defaultView" id="defaultView" type="AbstractView" description="&#10;&#9;    &lt;p&gt;The default &lt;code&gt;AbstractView&lt;/code&gt; for this&#10;&#9;      &lt;code&gt;Document&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if none&#10;&#9;      available.&lt;/p&gt;&#10;&#9;  " readonly="true" owner_id="DocumentView"/>
    </properties>
  </interface>
  <interface id="DOMStringList" name="DOMStringList" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;DOMStringList&lt;/code&gt; interface provides the abstraction&#10;      of an ordered collection of &lt;code&gt;DOMString&lt;/code&gt; values, without&#10;      defining or constraining how this collection is implemented. The&#10;      items in the &lt;code&gt;DOMStringList&lt;/code&gt; are accessible via an&#10;      integral index, starting from 0.&#10;    &lt;/p&gt;&#10;  ">
    <methods>
      <method id="item" name="item" return_type="DOMString" owner_id="DOMStringList" description="&#10;      &lt;p&gt;&#10;&#9;Returns the &lt;code&gt;index&lt;/code&gt;th item in the collection. If&#10;&#9;&lt;code&gt;index&lt;/code&gt; is greater than or equal to the number of&#10;&#9;&lt;code&gt;DOMString&lt;/code&gt;s in the list, this returns&#10;&#9;&lt;code&gt;null&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;&#9;  The &lt;code&gt;DOMString&lt;/code&gt; at the &lt;code&gt;index&lt;/code&gt;th&#10;&#9;  position in the &lt;code&gt;DOMStringList&lt;/code&gt;, or&#10;&#9;  &lt;code&gt;null&lt;/code&gt; if that is not a valid index.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="index" type="unsigned long" owner_id="" description="&#10;          &lt;p&gt;Index into the collection.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="contains" name="contains" return_type="boolean" owner_id="DOMStringList" description="&#10;      &lt;p&gt;&#10;&#9;Test if a string is part of this &lt;code&gt;DOMStringList&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;&#10;&#9;  &lt;code&gt;true&lt;/code&gt; if the string has been found,&#10;&#9;  &lt;code&gt;false&lt;/code&gt; otherwise.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="str" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The string to look for.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
    </methods>
    <properties>
      <property name="length" id="length" type="unsigned long" description="&#10;      &lt;p&gt;The number of &lt;code&gt;DOMString&lt;/code&gt;s in the list. The range of&#10;      valid child node indices is 0 to &lt;code&gt;length-1&lt;/code&gt;&#10;      inclusive.&lt;/p&gt;&#10;    " readonly="true" owner_id="DOMStringList"/>
    </properties>
  </interface>
  <interface id="NameList" name="NameList" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;NameList&lt;/code&gt; interface provides the abstraction of an&#10;      ordered collection of parallel pairs of name and namespace values&#10;      (which could be null values), without defining or constraining how&#10;      this collection is implemented. The items in the&#10;      &lt;code&gt;NameList&lt;/code&gt; are accessible via an integral index,&#10;      starting from 0.&#10;    &lt;/p&gt;&#10;  ">
    <methods>
      <method id="getName" name="getName" return_type="DOMString" owner_id="NameList" description="&#10;      &lt;p&gt;&#10;&#9;Returns the &lt;code&gt;index&lt;/code&gt;th name item in the collection.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;&#9;  The name at the &lt;code&gt;index&lt;/code&gt;th&#10;&#9;  position in the &lt;code&gt;NameList&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if&#10;&#9;  there is no name for the specified index or if the index is&#10;&#9;  out of range.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="index" type="unsigned long" owner_id="" description="&#10;          &lt;p&gt;Index into the collection.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="getNamespaceURI" name="getNamespaceURI" return_type="DOMString" owner_id="NameList" description="&#10;      &lt;p&gt;&#10;&#9;Returns the &lt;code&gt;index&lt;/code&gt;th namespaceURI item in the&#10;&#9;collection.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;&#9;  The namespace URI at the &lt;code&gt;index&lt;/code&gt;th&#10;&#9;  position in the &lt;code&gt;NameList&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if&#10;&#9;  there is no name for the specified index or if the index is&#10;&#9;  out of range.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="index" type="unsigned long" owner_id="" description="&#10;          &lt;p&gt;Index into the collection.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="contains" name="contains" return_type="boolean" owner_id="NameList" description="&#10;      &lt;p&gt;&#10;&#9;Test if a name is part of this &lt;code&gt;NameList&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;&#10;&#9;  &lt;code&gt;true&lt;/code&gt; if the name has been found,&#10;&#9;  &lt;code&gt;false&lt;/code&gt; otherwise.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="str" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The name to look for.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="containsNS" name="containsNS" return_type="boolean" owner_id="NameList" description="&#10;      &lt;p&gt;&#10;&#9;Test if the pair namespaceURI/name is part of this&#10;&#9;&lt;code&gt;NameList&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;&#10;&#9;  &lt;code&gt;true&lt;/code&gt; if the pair namespaceURI/name has been&#10;&#9;  found, &lt;code&gt;false&lt;/code&gt; otherwise.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The namespace URI to look for.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="name" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The name to look for.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
    </methods>
    <properties>
      <property name="length" id="length" type="unsigned long" description="&#10;      &lt;p&gt;&#10;&#9;The number of pairs (name and namespaceURI) in the list. The&#10;&#9;range of valid child node indices is 0 to &lt;code&gt;length-1&lt;/code&gt;&#10;&#9;inclusive.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="NameList"/>
    </properties>
  </interface>
  <interface id="DOMImplementationList" name="DOMImplementationList" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;DOMImplementationList&lt;/code&gt; interface provides the&#10;      abstraction of an ordered collection of DOM implementations,&#10;      without defining or constraining how this collection is&#10;      implemented. The items in the &lt;code&gt;DOMImplementationList&lt;/code&gt;&#10;      are accessible via an integral index, starting from 0.&#10;    &lt;/p&gt;&#10;  ">
    <methods>
      <method id="item" name="item" return_type="DOMImplementation" owner_id="DOMImplementationList" description="&#10;      &lt;p&gt;&#10;&#9;Returns the &lt;code&gt;index&lt;/code&gt;th item in the collection. If&#10;&#9;&lt;code&gt;index&lt;/code&gt; is greater than or equal to the number of&#10;&#9;&lt;code&gt;DOMImplementation&lt;/code&gt;s in the list, this returns&#10;&#9;&lt;code&gt;null&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;&#9;  The &lt;code&gt;DOMImplementation&lt;/code&gt; at the &lt;code&gt;index&lt;/code&gt;th&#10;&#9;  position in the &lt;code&gt;DOMImplementationList&lt;/code&gt;, or&#10;&#9;  &lt;code&gt;null&lt;/code&gt; if that is not a valid index.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="index" type="unsigned long" owner_id="" description="&#10;          &lt;p&gt;Index into the collection.&lt;/p&gt;&#10;        "/>
      </method>
    </methods>
    <properties>
      <property name="length" id="length" type="unsigned long" description="&#10;      &lt;p&gt;&#10;&#9;The number of &lt;code&gt;DOMImplementation&lt;/code&gt;s in the list. The&#10;&#9;range of valid child node indices is 0 to &lt;code&gt;length-1&lt;/code&gt;&#10;&#9;inclusive.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="DOMImplementationList"/>
    </properties>
  </interface>
  <interface id="DOMImplementationSource" name="DOMImplementationSource" description="&#10;    &lt;p&gt;This interface permits a DOM implementer to supply one or more&#10;      implementations, based upon requested features and versions, as&#10;      specified in &lt;specref ref=&quot;DOMFeatures&quot;&gt;&lt;/specref&gt;. Each implemented&#10;      &lt;code&gt;DOMImplementationSource&lt;/code&gt; object is listed in the&#10;      binding-specific list of available sources so that its&#10;      &lt;code&gt;DOMImplementation&lt;/code&gt; objects are made available.&lt;/p&gt;&#10;  ">
    <methods>
      <method id="getDOMImplementation" name="getDOMImplementation" return_type="DOMImplementation" owner_id="DOMImplementationSource" description="&#10;      &lt;p&gt;&#10;&#9;A method to request the first DOM implementation that supports the&#10;&#9;specified features.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;The first DOM implementation that support the desired features, or&#10;          &lt;code&gt;null&lt;/code&gt; if this source has none.&lt;/p&gt;&#10;      ">
        <parameter id="" name="features" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    A string that specifies which features and versions are&#10;&#9;    required. This is a space separated list in which each&#10;&#9;    feature is specified by its name optionally followed by a&#10;&#9;    space and a version number.&#10;&#9;  &lt;/p&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    This method returns the first item of the list returned by&#10;&#9;    &lt;code&gt;getDOMImplementationList&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    As an example, the string &lt;code&gt;&quot;XML 3.0 Traversal +Events&#10;&#9;    2.0&quot;&lt;/code&gt; will request a DOM implementation that supports&#10;&#9;    the module &quot;XML&quot; for its 3.0 version, a module that support&#10;&#9;    of the &quot;Traversal&quot; module for any version, and the module&#10;&#9;    &quot;Events&quot; for its 2.0 version. The module &quot;Events&quot; must be&#10;&#9;    accessible using the method &lt;code&gt;Node.getFeature()&lt;/code&gt; and&#10;&#9;    &lt;code&gt;DOMImplementation.getFeature()&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;        "/>
      </method>
      <method id="getDOMImplementationList" name="getDOMImplementationList" return_type="DOMImplementationList" owner_id="DOMImplementationSource" description="&#10;      &lt;p&gt;A method to request a list of DOM implementations that support&#10;      the specified features and versions, as specified in &lt;specref ref=&quot;DOMFeatures&quot;&gt;&lt;/specref&gt;.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;A list of DOM implementations that support the desired&#10;        features.&lt;/p&gt;&#10;      ">
        <parameter id="" name="features" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;A string that specifies which features and versions are&#10;          required. This is a space separated list in which each feature&#10;          is specified by its name optionally followed by a space and a&#10;          version number. This is something like: &quot;XML 3.0 Traversal&#10;          +Events 2.0&quot;&lt;/p&gt;&#10;        "/>
      </method>
    </methods>
    <properties/>
  </interface>
  <interface id="Document" name="Document" description="&#10;    &lt;p&gt;The &lt;code&gt;Document&lt;/code&gt; interface represents the entire HTML or XML&#10;      document. Conceptually, it is the&#10;      &lt;termref def=&quot;dt-root-node&quot;&gt;root&lt;/termref&gt; of the document tree, and&#10;      provides the primary access to the document's data.&lt;/p&gt;&#10;    &lt;p&gt;Since elements, text nodes, comments, processing instructions,&#10;      etc. cannot exist outside the context of a &lt;code&gt;Document&lt;/code&gt;, the&#10;      &lt;code&gt;Document&lt;/code&gt; interface also contains the factory methods needed&#10;      to create these objects. The &lt;code&gt;Node&lt;/code&gt; objects created have a&#10;      &lt;code&gt;ownerDocument&lt;/code&gt; attribute which associates them with the&#10;      &lt;code&gt;Document&lt;/code&gt; within whose context they were created.&lt;/p&gt;&#10;  " parent_id="Node">
    <methods>
      <method id="createElement" name="createElement" return_type="Element" owner_id="Document" description="&#10;      &lt;p&gt;Creates an element of the type specified. Note that the instance&#10;        returned implements the &lt;code&gt;Element&lt;/code&gt; interface, so attributes&#10;        can be specified directly  on the returned object.&lt;/p&gt;&#10;      &lt;p&gt;In addition, if there are known attributes with default values,&#10;&#9;&lt;code&gt;Attr&lt;/code&gt; nodes representing them are automatically created and&#10;&#9;attached to the element.&lt;/p&gt;&#10;      &lt;p&gt;To create an element with a &lt;termref def=&quot;dt-qualifiedname&quot;&gt;qualified name&lt;/termref&gt; and &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt;, use the&#10;&#9;&lt;code&gt;createElementNS&lt;/code&gt; method.&lt;/p&gt;&#10;    " return_description="&lt;p&gt;A new &lt;code&gt;Element&lt;/code&gt; object with the&#10;          &lt;code&gt;nodeName&lt;/code&gt; attribute set to &lt;code&gt;tagName&lt;/code&gt;, and&#10;          &lt;code&gt;localName&lt;/code&gt;, &lt;code&gt;prefix&lt;/code&gt;, and&#10;          &lt;code&gt;namespaceURI&lt;/code&gt; set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#10;      ">
        <parameter id="" name="tagName" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The name of the element type to instantiate. For XML, this is&#10;            case-sensitive, otherwise it depends on the case-sensitivity of the&#10;            markup language in use. In that case, the name is mapped to the&#10;            canonical form of that markup by the DOM implementation.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="createDocumentFragment" name="createDocumentFragment" return_type="DocumentFragment" owner_id="Document" description="&#10;      &lt;p&gt;Creates an empty &lt;code&gt;DocumentFragment&lt;/code&gt; object.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;A new &lt;code&gt;DocumentFragment&lt;/code&gt;.&lt;/p&gt;&#10;      "/>
      <method id="createTextNode" name="createTextNode" return_type="Text" owner_id="Document" description="&#10;      &lt;p&gt;Creates a &lt;code&gt;Text&lt;/code&gt; node given the specified string.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;The new &lt;code&gt;Text&lt;/code&gt; object.&lt;/p&gt;&#10;      ">
        <parameter id="" name="data" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The data for the node.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="createComment" name="createComment" return_type="Comment" owner_id="Document" description="&#10;      &lt;p&gt;Creates a &lt;code&gt;Comment&lt;/code&gt; node given the specified string.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;The new &lt;code&gt;Comment&lt;/code&gt; object.&lt;/p&gt;&#10;      ">
        <parameter id="" name="data" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The data for the node.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="createCDATASection" name="createCDATASection" return_type="CDATASection" owner_id="Document" description="&#10;      &lt;p&gt;Creates a &lt;code&gt;CDATASection&lt;/code&gt; node whose value is the specified&#10;        string.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;The new &lt;code&gt;CDATASection&lt;/code&gt; object.&lt;/p&gt;&#10;      ">
        <parameter id="" name="data" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The data for the &lt;code&gt;CDATASection&lt;/code&gt; contents.&lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="createProcessingInstruction" name="createProcessingInstruction" return_type="ProcessingInstruction" owner_id="Document" description="&#10;      &lt;p&gt;Creates a &lt;code&gt;ProcessingInstruction&lt;/code&gt; node given the specified&#10;        name and data strings.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;The new &lt;code&gt;ProcessingInstruction&lt;/code&gt; object.&lt;/p&gt;&#10;      ">
        <parameter id="" name="target" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The target part of the processing instruction.&lt;/p&gt;&#10;          &lt;p&gt;Unlike &lt;code&gt;Document.createElementNS&lt;/code&gt; or&#10;          &lt;code&gt;Document.createAttributeNS&lt;/code&gt;, no namespace&#10;          well-formed checking is done on the target name. Applications&#10;          should invoke &lt;code&gt;Document.normalizeDocument()&lt;/code&gt; with&#10;          the parameter &quot;&lt;termref def=&quot;parameter-namespaces&quot;&gt;namespaces&lt;/termref&gt;&quot; set to&#10;          &lt;code&gt;true&lt;/code&gt; in order to ensure that the target name is&#10;          namespace well-formed.&#10;&#9;  &lt;/p&gt;&#10;        "/>
        <parameter id="" name="data" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The data for the node.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="createAttribute" name="createAttribute" return_type="Attr" owner_id="Document" description="&#10;      &lt;p&gt;Creates an &lt;code&gt;Attr&lt;/code&gt; of the given name. Note that the&#10;        &lt;code&gt;Attr&lt;/code&gt; instance can then be set on an &lt;code&gt;Element&lt;/code&gt;&#10;        using the &lt;code&gt;setAttributeNode&lt;/code&gt; method. &lt;/p&gt;&#10;      &lt;p&gt;To create an attribute with a &lt;termref def=&quot;dt-qualifiedname&quot;&gt;qualified name&lt;/termref&gt; and &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt;, use&#10;&#9;the &lt;code&gt;createAttributeNS&lt;/code&gt; method.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;A new &lt;code&gt;Attr&lt;/code&gt; object with the &lt;code&gt;nodeName&lt;/code&gt;&#10;          attribute set to &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;localName&lt;/code&gt;,&#10;          &lt;code&gt;prefix&lt;/code&gt;, and &lt;code&gt;namespaceURI&lt;/code&gt; set to&#10;          &lt;code&gt;null&lt;/code&gt;. The value of the attribute is the empty&#10;          string.&lt;/p&gt;&#10;      ">
        <parameter id="" name="name" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The name of the attribute.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="createEntityReference" name="createEntityReference" return_type="EntityReference" owner_id="Document" description="&#10;      &lt;p&gt;Creates an &lt;code&gt;EntityReference&lt;/code&gt; object. In addition, if the&#10;        referenced entity is known, the child list of the&#10;        &lt;code&gt;EntityReference&lt;/code&gt; node is made the same as that of the&#10;        corresponding &lt;code&gt;Entity&lt;/code&gt; node.&lt;/p&gt;&#10;      &lt;note&gt;&#10;        &lt;p&gt;If any descendant of the &lt;code&gt;Entity&lt;/code&gt; node has an unbound&#10;          &lt;termref def=&quot;dt-namespaceprefix&quot;&gt;namespace prefix&lt;/termref&gt;, the&#10;          corresponding descendant of the created &lt;code&gt;EntityReference&lt;/code&gt;&#10;          node is also unbound; (its &lt;code&gt;namespaceURI&lt;/code&gt; is&#10;          &lt;code&gt;null&lt;/code&gt;). The DOM Level 2 and 3 do not support any mechanism to&#10;          resolve namespace prefixes in this case.&lt;/p&gt;&#10;      &lt;/note&gt;&#10;    " return_description="&lt;p&gt;The new &lt;code&gt;EntityReference&lt;/code&gt; object.&lt;/p&gt;">
        <parameter id="" name="name" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The name of the entity to reference.&lt;/p&gt;&#10;          &lt;p&gt;Unlike &lt;code&gt;Document.createElementNS&lt;/code&gt; or&#10;          &lt;code&gt;Document.createAttributeNS&lt;/code&gt;, no namespace&#10;          well-formed checking is done on the entity name. Applications&#10;          should invoke &lt;code&gt;Document.normalizeDocument()&lt;/code&gt; with&#10;          the parameter &quot;&lt;termref def=&quot;parameter-namespaces&quot;&gt;namespaces&lt;/termref&gt;&quot; set to&#10;          &lt;code&gt;true&lt;/code&gt; in order to ensure that the entity name is&#10;          namespace well-formed.&#10;&#9;  &lt;/p&gt;&#10;        "/>
      </method>
      <method id="getElementsByTagName" name="getElementsByTagName" return_type="NodeList" owner_id="Document" description="&#10;      &lt;p&gt;Returns a &lt;code&gt;NodeList&lt;/code&gt; of all the&#10;&#9;&lt;code&gt;Elements&lt;/code&gt; in &lt;termref def=&quot;dt-document-order&quot;&gt;document&#10;          order&lt;/termref&gt; with a given tag name and are contained in the&#10;&#9;document.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;A new &lt;code&gt;NodeList&lt;/code&gt; object containing all the matched&#10;          &lt;code&gt;Elements&lt;/code&gt;.&lt;/p&gt;&#10;      ">
        <parameter id="" name="tagname" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    The name of the tag to match on. The special value &quot;*&quot;&#10;&#9;    matches all tags. For XML, the &lt;code&gt;tagname&lt;/code&gt;&#10;&#9;    parameter is case-sensitive, otherwise it depends on the&#10;&#9;    case-sensitivity of the markup language in use.&#10;&#9;  &lt;/p&gt;&#10;        "/>
      </method>
      <method id="importNode" name="importNode" return_type="Node" owner_id="Document" description="&#10;      &lt;p&gt;Imports a node from another document to this document, without&#10;      altering or removing the source node from the original document;&#10;      this method creates a new copy of the source node.  The returned&#10;      node has no parent; (&lt;code&gt;parentNode&lt;/code&gt; is&#10;      &lt;code&gt;null&lt;/code&gt;).&lt;/p&gt;&#10;&#10;      &lt;p&gt;For all nodes, importing a node creates a node object owned by the&#10;&#9;importing document, with attribute values identical to the source&#10;&#9;node's &lt;code&gt;nodeName&lt;/code&gt; and &lt;code&gt;nodeType&lt;/code&gt;, plus the&#10;&#9;attributes related to namespaces (&lt;code&gt;prefix&lt;/code&gt;,&#10;&#9;&lt;code&gt;localName&lt;/code&gt;, and &lt;code&gt;namespaceURI&lt;/code&gt;). As in the&#10;&#9;&lt;code&gt;cloneNode&lt;/code&gt; operation, the source node is not altered. User&#10;        data associated to the imported node is not carried over. However,&#10;        if any &lt;code&gt;UserDataHandlers&lt;/code&gt; has been specified along with the&#10;        associated data these handlers will be called with the appropriate&#10;        parameters before this method returns.&lt;/p&gt;&#10;&#10;      &lt;p&gt;Additional information is copied as appropriate to the&#10;        &lt;code&gt;nodeType&lt;/code&gt;, attempting to mirror the behavior expected if a&#10;        fragment of XML or HTML source was copied from one document to another,&#10;        recognizing that the two documents may have different DTDs in the XML&#10;        case. The following list describes the specifics for each type of node.&#10;&#10;&#9;&lt;glist&gt;&#10;&#9;  &lt;gitem&gt;&#10;&#9;    &lt;label&gt;ATTRIBUTE_NODE&lt;/label&gt;&#10;&#10;&#9;    &lt;def&gt;&#10;              &lt;p&gt;The &lt;code&gt;ownerElement&lt;/code&gt; attribute is set to&#10;                &lt;code&gt;null&lt;/code&gt; and the &lt;code&gt;specified&lt;/code&gt; flag is set to&#10;&#9;&#9;&lt;code&gt;true&lt;/code&gt; on the generated &lt;code&gt;Attr&lt;/code&gt;. The&#10;&#9;&#9;&lt;termref def=&quot;dt-descendant&quot;&gt;descendants&lt;/termref&gt; of the&#10;                source &lt;code&gt;Attr&lt;/code&gt; are recursively imported and the&#10;                resulting nodes reassembled to form the corresponding&#10;                subtree.&lt;/p&gt;&#10;&#9;      &lt;p&gt;Note that the &lt;code&gt;deep&lt;/code&gt; parameter has no effect on &#10;&#9;&#9;&lt;code&gt;Attr&lt;/code&gt; nodes; they always carry their children with&#10;&#9;&#9;them when imported.&lt;/p&gt;&#10;&#9;    &lt;/def&gt;&#10;&#9;  &lt;/gitem&gt;&#10;&#9;  &lt;gitem&gt;&#10;&#9;    &lt;label&gt;DOCUMENT_FRAGMENT_NODE&lt;/label&gt;&#10;&#9;    &lt;def&gt;&#10;              &lt;p&gt;If the &lt;code&gt;deep&lt;/code&gt; option was set to&#10;                &lt;code&gt;true&lt;/code&gt;, the&#10;                &lt;termref def=&quot;dt-descendant&quot;&gt;descendants&lt;/termref&gt; of the&#10;                source &lt;code&gt;DocumentFragment&lt;/code&gt; are recursively imported&#10;                and the resulting nodes reassembled under the imported&#10;                &lt;code&gt;DocumentFragment&lt;/code&gt; to form the corresponding&#10;                subtree. Otherwise, this simply generates an empty&#10;                &lt;code&gt;DocumentFragment&lt;/code&gt;.&lt;/p&gt;&#10;&#9;    &lt;/def&gt;&#10;&#9;  &lt;/gitem&gt;&#10;&#9;  &lt;gitem&gt;&#10;&#9;    &lt;label&gt;DOCUMENT_NODE&lt;/label&gt;&#10;&#9;    &lt;def&gt;&#10;              &lt;p&gt;&lt;code&gt;Document&lt;/code&gt; nodes cannot be imported.&lt;/p&gt;&#10;&#9;    &lt;/def&gt;&#10;&#9;  &lt;/gitem&gt;&#10;&#9;  &lt;gitem&gt;&#10;&#9;    &lt;label&gt;DOCUMENT_TYPE_NODE&lt;/label&gt;&#10;&#9;    &lt;def&gt;&#10;              &lt;p&gt;&lt;code&gt;DocumentType&lt;/code&gt; nodes cannot be imported.&lt;/p&gt;&#10;&#9;    &lt;/def&gt;&#10;&#9;  &lt;/gitem&gt;&#10;&#9;  &lt;gitem&gt;&#10;&#9;    &lt;label&gt;ELEMENT_NODE&lt;/label&gt;&#10;&#9;    &lt;def&gt;&#10;              &lt;p&gt;&lt;emph&gt;Specified&lt;/emph&gt; attribute nodes of the source element&#10;                are imported, and the generated &lt;code&gt;Attr&lt;/code&gt; nodes are&#10;                attached to the generated &lt;code&gt;Element&lt;/code&gt;. Default&#10;                attributes are &lt;emph&gt;not&lt;/emph&gt; copied, though if the document&#10;                being imported into defines default attributes for this element&#10;                name, those are assigned. If the &lt;code&gt;importNode&lt;/code&gt;&#10;                &lt;code&gt;deep&lt;/code&gt; parameter was set to &lt;code&gt;true&lt;/code&gt;, the&#10;                &lt;termref def=&quot;dt-descendant&quot;&gt;descendants&lt;/termref&gt; of the&#10;                source element are recursively imported and the resulting nodes&#10;                reassembled to form the corresponding subtree.&lt;/p&gt;&#10;&#9;    &lt;/def&gt;&#10;&#9;  &lt;/gitem&gt;&#10;&#9;  &lt;gitem&gt;&#10;&#9;    &lt;label&gt;ENTITY_NODE&lt;/label&gt;&#10;&#9;    &lt;def&gt;&#10;              &lt;p&gt;&lt;code&gt;Entity&lt;/code&gt; nodes can be imported, however in the&#10;&#9;&#9;current release of the DOM the &lt;code&gt;DocumentType&lt;/code&gt; is&#10;&#9;&#9;readonly. Ability to add these imported nodes to a&#10;&#9;&#9;&lt;code&gt;DocumentType&lt;/code&gt; will be considered for addition to a&#10;&#9;&#9;future release of the DOM.&lt;/p&gt;&#10;&#9;      &lt;p&gt;On import, the &lt;code&gt;publicId&lt;/code&gt;, &lt;code&gt;systemId&lt;/code&gt;,&#10;&#9;&#9;and &lt;code&gt;notationName&lt;/code&gt; attributes are copied. If a&#10;&#9;&#9;&lt;code&gt;deep&lt;/code&gt; import is requested, the&#10;                &lt;termref def=&quot;dt-descendant&quot;&gt;descendants&lt;/termref&gt; of the&#10;&#9;&#9;the source &lt;code&gt;Entity&lt;/code&gt; are recursively imported and the&#10;&#9;&#9;resulting nodes reassembled to form the corresponding&#10;&#9;&#9;subtree.&lt;/p&gt;&#10;&#9;    &lt;/def&gt;&#10;&#9;  &lt;/gitem&gt;&#10;&#9;  &lt;gitem&gt;&#10;&#9;    &lt;label&gt;ENTITY_REFERENCE_NODE&lt;/label&gt;&#10;&#9;    &lt;def&gt;&#10;              &lt;p&gt;Only the &lt;code&gt;EntityReference&lt;/code&gt; itself is copied, even&#10;                if a &lt;code&gt;deep&lt;/code&gt; import is requested, since the source&#10;                and destination documents might have defined the entity&#10;                differently. If the document being imported into provides a&#10;                definition for this entity name, its value is assigned.&lt;/p&gt;&#10;&#9;    &lt;/def&gt;&#10;&#9;  &lt;/gitem&gt;&#10;&#9;  &lt;gitem&gt;&#10;&#9;    &lt;label&gt;NOTATION_NODE&lt;/label&gt;&#10;&#9;    &lt;def&gt;&#10;              &lt;p&gt;&lt;code&gt;Notation&lt;/code&gt; nodes can be imported, however in the&#10;&#9;&#9;current release of the DOM the &lt;code&gt;DocumentType&lt;/code&gt; is&#10;&#9;&#9;readonly. Ability to add these imported nodes to a&#10;&#9;&#9;&lt;code&gt;DocumentType&lt;/code&gt; will be considered for addition to a&#10;&#9;&#9;future release of the DOM.&lt;/p&gt;&#10;&#9;      &lt;p&gt;On import, the &lt;code&gt;publicId&lt;/code&gt; and&#10;&#9;&#9;&lt;code&gt;systemId&lt;/code&gt; attributes are copied.&lt;/p&gt;&#10;&#9;      &lt;p&gt;Note that the &lt;code&gt;deep&lt;/code&gt; parameter has no effect on &#10;&#9;&#9;this type of nodes since they cannot have any children.&lt;/p&gt;&#10;&#9;    &lt;/def&gt;&#10;&#9;  &lt;/gitem&gt;&#10;&#9;  &lt;gitem&gt;&#10;&#9;    &lt;label&gt;PROCESSING_INSTRUCTION_NODE&lt;/label&gt;&#10;&#9;    &lt;def&gt;&#10;              &lt;p&gt;The imported node copies its &lt;code&gt;target&lt;/code&gt; and&#10;                &lt;code&gt;data&lt;/code&gt; values from those of the source node.&lt;/p&gt;&#10;&#9;      &lt;p&gt;Note that the &lt;code&gt;deep&lt;/code&gt; parameter has no effect on &#10;&#9;&#9;this type of nodes since they cannot have any children.&lt;/p&gt;&#10;&#9;    &lt;/def&gt;&#10;&#9;  &lt;/gitem&gt;&#10;&#9;  &lt;gitem&gt;&#10;&#9;    &lt;label&gt;TEXT_NODE, CDATA_SECTION_NODE, COMMENT_NODE&lt;/label&gt;&#10;&#9;    &lt;def&gt;&#10;              &lt;p&gt;These three types of nodes inheriting from&#10;                &lt;code&gt;CharacterData&lt;/code&gt; copy their &lt;code&gt;data&lt;/code&gt; and&#10;&#9;&#9;&lt;code&gt;length&lt;/code&gt; attributes from those of the source&#10;&#9;&#9;node.&lt;/p&gt;&#10;&#9;      &lt;p&gt;Note that the &lt;code&gt;deep&lt;/code&gt; parameter has no effect on &#10;&#9;&#9;these types of nodes since they cannot have any children.&lt;/p&gt;&#10;&#9;    &lt;/def&gt;&#10;&#9;  &lt;/gitem&gt;&#10;&#9;&lt;/glist&gt;&#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;The imported node that belongs to this &lt;code&gt;Document&lt;/code&gt;.&lt;/p&gt;&#10;      ">
        <parameter id="" name="importedNode" type="Node" owner_id="" description="&#10;          &lt;p&gt;The node to import.&lt;/p&gt;&#10;        "/>
        <parameter id="" name="deep" type="boolean" owner_id="" description="&#10;          &lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, recursively import the subtree under the&#10;            specified node; if &lt;code&gt;false&lt;/code&gt;, import only the node itself,&#10;            as explained above. This has no effect on nodes that cannot have&#10;            any children, and on &lt;code&gt;Attr&lt;/code&gt;, and&#10;            &lt;code&gt;EntityReference&lt;/code&gt; nodes.&lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="createElementNS" name="createElementNS" return_type="Element" owner_id="Document" description="&#10;      &lt;p&gt;Creates an element of the given &lt;termref def=&quot;dt-qualifiedname&quot;&gt;qualified name&lt;/termref&gt; and &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt;.&lt;/p&gt;&#10;      &lt;p&gt;Per &lt;bibref ref=&quot;Namespaces&quot;&gt;&lt;/bibref&gt;, applications must use the value &lt;code&gt;null&lt;/code&gt;&#10;      as the namespaceURI parameter for methods if they wish to have no&#10;      namespace.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;A new &lt;code&gt;Element&lt;/code&gt; object with the following attributes:&lt;/p&gt;&#10;&#9;&lt;table cellpadding=&quot;3&quot; summary=&quot;Layout table: the first cell the name property,                the second cell contains his initial value&quot;&gt;&#10;&#9;  &lt;tbody&gt;&#10;&#9;    &lt;tr&gt;&#10;&lt;th rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;Attribute&lt;/th&gt;&#10;&lt;th rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;Value&lt;/th&gt;&#10;&lt;/tr&gt;&#10;&#9;    &lt;tr&gt;&#10;&lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;code&gt;Node.nodeName&lt;/code&gt;&lt;/td&gt;&#10;&#9;      &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;code&gt;qualifiedName&lt;/code&gt;&lt;/td&gt;&#10;&#9;    &lt;/tr&gt;&#10;&#9;    &lt;tr&gt;&#10;&lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;code&gt;Node.namespaceURI&lt;/code&gt;&lt;/td&gt;&#10;&#9;      &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;code&gt;namespaceURI&lt;/code&gt;&lt;/td&gt;&#10;&lt;/tr&gt;&#10;&#9;    &lt;tr&gt;&#10;&lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;code&gt;Node.prefix&lt;/code&gt;&lt;/td&gt;&#10;&lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;prefix, extracted from&#10;&#9;&#9;&lt;code&gt;qualifiedName&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if there is no&#10;&#9;&#9;prefix&lt;/td&gt;&#10;&lt;/tr&gt;&#10;&#9;    &lt;tr&gt;&#10;&lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;code&gt;Node.localName&lt;/code&gt;&lt;/td&gt;&#10;              &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&#10;&lt;termref def=&quot;dt-localname&quot;&gt;local name&lt;/termref&gt;, extracted&#10;                from &lt;code&gt;qualifiedName&lt;/code&gt;&#10;&lt;/td&gt;&#10;&lt;/tr&gt;&#10;&#9;    &lt;tr&gt;&#10;&lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;code&gt;Element.tagName&lt;/code&gt;&lt;/td&gt;&#10;&#9;      &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;code&gt;qualifiedName&lt;/code&gt;&lt;/td&gt;&#10;&#9;    &lt;/tr&gt;&#10;&#9;  &lt;/tbody&gt;&#10;&#9;&lt;/table&gt;&#10;      ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt; of the&#10;            element to create.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="qualifiedName" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-qualifiedname&quot;&gt;qualified name&lt;/termref&gt; of&#10;            the element type to instantiate.&lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="createAttributeNS" name="createAttributeNS" return_type="Attr" owner_id="Document" description="&#10;      &lt;p&gt;Creates an attribute of the given &lt;termref def=&quot;dt-qualifiedname&quot;&gt;qualified name&lt;/termref&gt; and &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace&#10;        URI&lt;/termref&gt;.&lt;/p&gt;&#10;      &lt;p&gt;Per &lt;bibref ref=&quot;Namespaces&quot;&gt;&lt;/bibref&gt;, applications must use the value &lt;code&gt;null&lt;/code&gt;&#10;      as the &lt;code&gt;namespaceURI&lt;/code&gt; parameter for methods if they wish to have no&#10;      namespace.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;A new &lt;code&gt;Attr&lt;/code&gt; object with the following attributes:&lt;/p&gt;&#10;&#9;&lt;table cellpadding=&quot;3&quot; summary=&quot;Layout table: the first cell the name property,                the second cell contains his initial value&quot;&gt;&#10;&#9;  &lt;tbody&gt;&#10;&#9;    &lt;tr&gt;&#10;&lt;th rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;Attribute&lt;/th&gt;&#10;&lt;th rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;Value&lt;/th&gt;&#10;&lt;/tr&gt;&#10;&#9;    &lt;tr&gt;&#10;&lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;code&gt;Node.nodeName&lt;/code&gt;&lt;/td&gt;&#10;&lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;qualifiedName&lt;/td&gt;&#10;&#9;    &lt;/tr&gt;&#10;&#9;    &lt;tr&gt;&#10;&lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;code&gt;Node.namespaceURI&lt;/code&gt;&lt;/td&gt;&#10;&#9;      &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;code&gt;namespaceURI&lt;/code&gt;&lt;/td&gt;&#10;&lt;/tr&gt;&#10;&#9;    &lt;tr&gt;&#10;&lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;code&gt;Node.prefix&lt;/code&gt;&lt;/td&gt;&#10;&lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;prefix, extracted from&#10;&#9;&#9;&lt;code&gt;qualifiedName&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if there is no&#10;&#9;&#9;prefix&lt;/td&gt;&#10;&lt;/tr&gt;&#10;&#9;    &lt;tr&gt;&#10;&lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;code&gt;Node.localName&lt;/code&gt;&lt;/td&gt;&#10;              &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&#10;&lt;termref def=&quot;dt-localname&quot;&gt;local name&lt;/termref&gt;, extracted&#10;                from &lt;code&gt;qualifiedName&lt;/code&gt;&#10;&lt;/td&gt;&#10;&lt;/tr&gt;&#10;&#9;    &lt;tr&gt;&#10;&lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;code&gt;Attr.name&lt;/code&gt;&lt;/td&gt;&#10;&#9;      &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;code&gt;qualifiedName&lt;/code&gt;&lt;/td&gt;&#10;&lt;/tr&gt;&#10;&#9;    &lt;tr&gt;&#10;&lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;code&gt;Node.nodeValue&lt;/code&gt;&lt;/td&gt;&#10;&#9;      &lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;the empty string&lt;/td&gt;&#10;&lt;/tr&gt;&#10;&#9;  &lt;/tbody&gt;&#10;&#9;&lt;/table&gt;&#10;      ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt; of the&#10;            attribute to create.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="qualifiedName" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-qualifiedname&quot;&gt;qualified name&lt;/termref&gt; of&#10;            the attribute to instantiate.&lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="getElementsByTagNameNS" name="getElementsByTagNameNS" return_type="NodeList" owner_id="Document" description="&#10;      &lt;p&gt;Returns a &lt;code&gt;NodeList&lt;/code&gt; of all the &lt;code&gt;Elements&lt;/code&gt; with&#10;        a given &lt;termref def=&quot;dt-localname&quot;&gt;local name&lt;/termref&gt; and &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace&#10;        URI&lt;/termref&gt; in &lt;termref def=&quot;dt-document-order&quot;&gt;document order&lt;/termref&gt;.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;A new &lt;code&gt;NodeList&lt;/code&gt; object containing all the matched&#10;&#9;  &lt;code&gt;Elements&lt;/code&gt;.&lt;/p&gt;&#10;      ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt; of the&#10;            elements to match on. The special value &lt;code&gt;&quot;*&quot;&lt;/code&gt; matches all&#10;            namespaces.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="localName" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The &lt;termref def=&quot;dt-localname&quot;&gt;local name&lt;/termref&gt; of the&#10;&#9;    elements to match on. The special value &quot;*&quot; matches all local&#10;&#9;    names.&lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="getElementById" name="getElementById" return_type="Element" owner_id="Document" description="&#10;      &lt;p&gt;Returns the &lt;code&gt;Element&lt;/code&gt; that has an ID attribute with the&#10;        given value. If no such element exists, this returns &lt;code&gt;null&lt;/code&gt;.&#10;        If more than one element has an ID attribute with that value, what&#10;        is returned is undefined.&#10;      &lt;/p&gt;&#10;      &lt;p&gt;&#10;&#9;The DOM implementation is expected to use the attribute&#10;&#9;&lt;code&gt;Attr.isId&lt;/code&gt; to determine if an attribute is of type&#10;&#9;ID.&#10;      &lt;/p&gt;&#10;        &lt;note&gt;&#10;          &lt;p&gt;Attributes with the name &quot;ID&quot; or &quot;id&quot; are not of type ID unless&#10;            so defined.&lt;/p&gt;&#10;        &lt;/note&gt;&#10;    " return_description="&#10;        &lt;p&gt;The matching element or &lt;code&gt;null&lt;/code&gt; if there is none.&lt;/p&gt;&#10;      ">
        <parameter id="" name="elementId" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The unique &lt;code&gt;id&lt;/code&gt; value for an element.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="adoptNode" name="adoptNode" return_type="Node" owner_id="Document" description="&#10;      &lt;p&gt;&#10;&#9;Attempts to adopt a node from another document to this&#10;&#9;document. If supported, it changes the&#10;&#9;&lt;code&gt;ownerDocument&lt;/code&gt; of the source node, its children, as&#10;&#9;well as the attached attribute nodes if there are any. If the&#10;&#9;source node has a parent it is first removed from the child list&#10;&#9;of its parent. This effectively allows moving a subtree from one&#10;&#9;document to another (unlike &lt;code&gt;importNode()&lt;/code&gt; which&#10;&#9;create a copy of the source node instead of moving it). When it&#10;&#9;fails, applications should use&#10;&#9;&lt;code&gt;Document.importNode()&lt;/code&gt; instead. Note that if the&#10;&#9;adopted node is already part of this document (i.e. the source&#10;&#9;and target document are the same), this method still has the&#10;&#9;effect of removing the source node from the child list of its&#10;&#9;parent, if any. The following list describes the specifics for&#10;&#9;each type of node.&#10;&#9;&lt;glist&gt;&#10;&#9;  &lt;gitem&gt;&#10;&#9;    &lt;label&gt;ATTRIBUTE_NODE&lt;/label&gt;&#10;&#9;    &lt;def&gt;&#10;              &lt;p&gt;The &lt;code&gt;ownerElement&lt;/code&gt; attribute is set to&#10;                &lt;code&gt;null&lt;/code&gt; and the &lt;code&gt;specified&lt;/code&gt; flag is set to&#10;&#9;&#9;&lt;code&gt;true&lt;/code&gt; on the adopted &lt;code&gt;Attr&lt;/code&gt;. The&#10;&#9;&#9;descendants of the source &lt;code&gt;Attr&lt;/code&gt; are recursively&#10;&#9;&#9;adopted.&lt;/p&gt;&#10;&#9;    &lt;/def&gt;&#10;&#9;  &lt;/gitem&gt;&#10;&#9;  &lt;gitem&gt;&#10;&#9;    &lt;label&gt;DOCUMENT_FRAGMENT_NODE&lt;/label&gt;&#10;&#9;    &lt;def&gt;&#10;              &lt;p&gt;The descendants of the source node are recursively&#10;                adopted.&lt;/p&gt;&#10;&#9;    &lt;/def&gt;&#10;&#9;  &lt;/gitem&gt;&#10;&#9;  &lt;gitem&gt;&#10;&#9;    &lt;label&gt;DOCUMENT_NODE&lt;/label&gt;&#10;&#9;    &lt;def&gt;&#10;              &lt;p&gt;&lt;code&gt;Document&lt;/code&gt; nodes cannot be adopted.&lt;/p&gt;&#10;&#9;    &lt;/def&gt;&#10;&#9;  &lt;/gitem&gt;&#10;&#9;  &lt;gitem&gt;&#10;&#9;    &lt;label&gt;DOCUMENT_TYPE_NODE&lt;/label&gt;&#10;&#9;    &lt;def&gt;&#10;              &lt;p&gt;&lt;code&gt;DocumentType&lt;/code&gt; nodes cannot be adopted.&lt;/p&gt;&#10;&#9;    &lt;/def&gt;&#10;&#9;  &lt;/gitem&gt;&#10;&#9;  &lt;gitem&gt;&#10;&#9;    &lt;label&gt;ELEMENT_NODE&lt;/label&gt;&#10;&#9;    &lt;def&gt;&#10;              &lt;p&gt;&lt;emph&gt;Specified&lt;/emph&gt; attribute nodes of the source element&#10;                are adopted. Default attributes are discarded, though if&#10;&#9;&#9;the document being adopted into defines default&#10;&#9;&#9;attributes for this element name, those are&#10;&#9;&#9;assigned. The descendants of the source element are&#10;&#9;&#9;recursively adopted.&lt;/p&gt;&#10;&#9;    &lt;/def&gt;&#10;&#9;  &lt;/gitem&gt;&#10;&#9;  &lt;gitem&gt;&#10;&#9;    &lt;label&gt;ENTITY_NODE&lt;/label&gt;&#10;&#9;    &lt;def&gt;&#10;              &lt;p&gt;&lt;code&gt;Entity&lt;/code&gt; nodes cannot be adopted.&lt;/p&gt;&#10;&#9;    &lt;/def&gt;&#10;&#9;  &lt;/gitem&gt;&#10;&#9;  &lt;gitem&gt;&#10;&#9;    &lt;label&gt;ENTITY_REFERENCE_NODE&lt;/label&gt;&#10;&#9;    &lt;def&gt;&#10;              &lt;p&gt;Only the &lt;code&gt;EntityReference&lt;/code&gt; node itself is adopted,&#10;                the descendants are discarded, since the source and destination&#10;                documents might have defined the entity differently. If the&#10;                document being imported into provides a definition for this&#10;                entity name, its value is assigned.&lt;/p&gt;&#10;&#9;    &lt;/def&gt;&#10;&#9;  &lt;/gitem&gt;&#10;&#9;  &lt;gitem&gt;&#10;&#9;    &lt;label&gt;NOTATION_NODE&lt;/label&gt;&#10;&#9;    &lt;def&gt;&#10;              &lt;p&gt;&lt;code&gt;Notation&lt;/code&gt; nodes cannot be adopted.&lt;/p&gt;&#10;&#9;    &lt;/def&gt;&#10;&#9;  &lt;/gitem&gt;&#10;&#9;  &lt;gitem&gt;&#10;&#9;    &lt;label&gt;PROCESSING_INSTRUCTION_NODE, TEXT_NODE, CDATA_SECTION_NODE,&#10;              COMMENT_NODE&lt;/label&gt;&#10;&#9;    &lt;def&gt;&#10;              &lt;p&gt;These nodes can all be adopted. No specifics.&lt;/p&gt;&#10;&#9;    &lt;/def&gt;&#10;&#9;  &lt;/gitem&gt;&#10;&#9;&lt;/glist&gt;&#10;      &lt;/p&gt;&#10;      &lt;note&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  Since it does not create new nodes unlike the&#10;&#9;  &lt;code&gt;Document.importNode()&lt;/code&gt; method, this method does&#10;&#9;  not raise an &lt;code&gt;INVALID_CHARACTER_ERR&lt;/code&gt; exception, and&#10;&#9;  applications should use the&#10;&#9;  &lt;code&gt;Document.normalizeDocument()&lt;/code&gt; method to check if&#10;&#9;  an imported name is not an XML name according to the&#10;&#9;  XML version in use.&#10;&#9;&lt;/p&gt;&#10;      &lt;/note&gt;&#10;    " return_description="&#10;        &lt;p&gt;The adopted node, or &lt;code&gt;null&lt;/code&gt; if this operation fails, such&#10;          as when the source node comes from a different implementation.&lt;/p&gt;&#10;      ">
        <parameter id="" name="source" type="Node" owner_id="" description="&#10;          &lt;p&gt;The node to move into this document.&lt;/p&gt;&#10;        "/>
      </method>
      <method id="normalizeDocument" name="normalizeDocument" return_type="void" owner_id="Document" description="&#10;      &lt;p&gt;&#10;&#9;This method acts as if the document was going through a save and&#10;&#9;load cycle, putting the document in a &quot;normal&quot; form. As a&#10;&#9;consequence, this method updates the replacement tree of&#10;&#9;&lt;code&gt;EntityReference&lt;/code&gt; nodes and normalizes&#10;&#9;&lt;code&gt;Text&lt;/code&gt; nodes, as defined in the method&#10;&#9;&lt;code&gt;Node.normalize()&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;      &lt;p&gt;&#10;&#9;Otherwise, the actual result depends on the features being set&#10;&#9;on the &lt;code&gt;Document.domConfig&lt;/code&gt; object and governing what&#10;&#9;operations actually take place. Noticeably this method could&#10;&#9;also make the document &lt;termref def=&quot;dt-namespace-well-formed&quot;&gt;namespace well-formed&lt;/termref&gt;&#10;&#9;according to the algorithm described in &lt;specref ref=&quot;normalizeDocumentAlgo&quot;&gt;&lt;/specref&gt;, check the character&#10;&#9;normalization, remove the &lt;code&gt;CDATASection&lt;/code&gt; nodes,&#10;&#9;etc. See &lt;code&gt;DOMConfiguration&lt;/code&gt; for details.&#10;      &lt;/p&gt;&#10;      &lt;eg role=&quot;code&quot; xml:space=&quot;preserve&quot;&gt;// Keep in the document the information defined&#10;// in the XML Information Set (Java example)&#10;DOMConfiguration docConfig = myDocument.getDomConfig();&#10;docConfig.setParameter(&quot;infoset&quot;, Boolean.TRUE);&#10;myDocument.normalizeDocument();&lt;/eg&gt;&#10;      &lt;p&gt;Mutation events, when supported, are generated to reflect the changes&#10;        occurring on the document.&lt;/p&gt;&#10;      &lt;p&gt;&#10;&#9;If errors occur during the invocation of this method, such as an&#10;&#9;attempt to update a &lt;termref def=&quot;dt-readonly-node&quot;&gt;read-only&#10;&#9;node&lt;/termref&gt; or a &lt;code&gt;Node.nodeName&lt;/code&gt; contains an&#10;&#9;invalid character according to the XML version in use, errors or&#10;&#9;warnings (&lt;code&gt;DOMError.SEVERITY_ERROR&lt;/code&gt; or&#10;&#9;&lt;code&gt;DOMError.SEVERITY_WARNING&lt;/code&gt;) will be reported using&#10;&#9;the &lt;code&gt;DOMErrorHandler&lt;/code&gt; object associated with the&#10;&#9;&quot;&lt;termref def=&quot;parameter-error-handler&quot;&gt;error-handler&lt;/termref&gt;&quot;&#10;&#9;parameter. Note this method might also report fatal errors&#10;&#9;(&lt;code&gt;DOMError.SEVERITY_FATAL_ERROR&lt;/code&gt;) if an&#10;&#9;implementation cannot recover from an error.&#10;      &lt;/p&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;"/>
      <method id="renameNode" name="renameNode" return_type="Node" owner_id="Document" description="&#10;      &lt;p&gt;Rename an existing node of type &lt;code&gt;ELEMENT_NODE&lt;/code&gt; or&#10;&#9;&lt;code&gt;ATTRIBUTE_NODE&lt;/code&gt;.&lt;/p&gt;&#10;      &lt;p&gt;When possible this simply changes the name of the given node,&#10;&#9;otherwise this creates a new node with the specified name and&#10;&#9;replaces the existing node with the new node as described&#10;&#9;below.&lt;/p&gt;&#10;      &lt;p&gt;If simply changing the name of the given node is not possible,&#10;&#9;the following operations are performed: &#10;        a new node is created, any registered event listener is registered on&#10;        the new node, any user data attached to the old node is removed from&#10;        that node, the old node is removed from its parent if it has one, the&#10;        children are moved to the new node, if the renamed node is an&#10;        &lt;code&gt;Element&lt;/code&gt; its attributes are moved to the new node,&#10;        the new node is inserted at the position the old node used to have in&#10;        its parent's child nodes list if it has one, the user data that was&#10;        attached to the old node is attached to the new node.&lt;/p&gt;&#10;      &lt;p&gt;When the node being renamed is an &lt;code&gt;Element&lt;/code&gt; only the&#10;        specified attributes are moved, default attributes originated from the&#10;        DTD are updated according to the new element name. In addition, the&#10;        implementation may update default attributes from other&#10;        schemas. Applications should use&#10;&#9;&lt;code&gt;Document.normalizeDocument()&lt;/code&gt; to guarantee these&#10;&#9;attributes are up-to-date.&lt;/p&gt;&#10;      &lt;p&gt;When the node being renamed is an &lt;code&gt;Attr&lt;/code&gt; that is attached&#10;        to an &lt;code&gt;Element&lt;/code&gt;, the node is first removed from the&#10;        &lt;code&gt;Element&lt;/code&gt; attributes map. Then, once renamed, either by&#10;        modifying the existing node or creating a new one as described above,&#10;        it is put back.&lt;/p&gt;&#10;      &lt;p&gt;In addition,&lt;/p&gt;&#10;      &lt;ulist&gt;&#10;&#9;&lt;item&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    a user data event &lt;code&gt;NODE_RENAMED&lt;/code&gt; is fired,&#10;&#9;  &lt;/p&gt;&#10;&#9;&lt;/item&gt;&#10;&#9;&lt;item&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    when the implementation supports the feature&#10;&#9;    &quot;MutationNameEvents&quot;, each mutation operation involved in&#10;&#9;    this method fires the appropriate event, and in the end the&#10;&#9;    event {&lt;code&gt;http://www.w3.org/2001/xml-events&lt;/code&gt;,&#10;&#9;    &lt;code&gt;DOMElementNameChanged&lt;/code&gt;} or&#10;&#9;    {&lt;code&gt;http://www.w3.org/2001/xml-events&lt;/code&gt;,&#10;&#9;    &lt;code&gt;DOMAttributeNameChanged&lt;/code&gt;} is fired.&#10;&#9;  &lt;/p&gt;&#10;&#9;&lt;/item&gt;&#10;      &lt;/ulist&gt;&#10;    " return_description="&#10;        &lt;p&gt;The renamed node. This is either the specified node or the new node&#10;          that was created to replace the specified node.&lt;/p&gt;&#10;      ">
        <parameter id="" name="n" type="Node" owner_id="" description="&#10;          &lt;p&gt;The node to rename.&lt;/p&gt;&#10;        "/>
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The new &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt;.&lt;/p&gt;&#10;        "/>
        <parameter id="" name="qualifiedName" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The new &lt;termref def=&quot;dt-qualifiedname&quot;&gt;qualified name&lt;/termref&gt;.&lt;/p&gt;&#10;        "/>
      </method>
    </methods>
    <properties>
      <property name="doctype" id="doctype" type="DocumentType" description="&#10;      &lt;p&gt;The Document Type Declaration (see &lt;code&gt;DocumentType&lt;/code&gt;)&#10;        associated with this document. For XML&#10;        documents without a document type declaration this returns&#10;        &lt;code&gt;null&lt;/code&gt;. For HTML documents, a&#10;&#9;&lt;code&gt;DocumentType&lt;/code&gt; object may be returned, independently&#10;&#9;of the presence or absence of document type declaration in the&#10;&#9;HTML document.&lt;/p&gt;&#10;      &lt;p&gt;This provides direct access to the &lt;code&gt;DocumentType&lt;/code&gt; node,&#10;        child node of this &lt;code&gt;Document&lt;/code&gt;. This node can be set at&#10;        document creation time and later changed through the use of child nodes&#10;        manipulation methods, such as &lt;code&gt;Node.insertBefore&lt;/code&gt;, or&#10;        &lt;code&gt;Node.replaceChild&lt;/code&gt;. Note, however, that while some&#10;        implementations may instantiate different types of&#10;        &lt;code&gt;Document&lt;/code&gt; objects supporting additional features than the&#10;        &quot;Core&quot;, such as &quot;HTML&quot; &lt;bibref role=&quot;informative&quot; ref=&quot;DOM2HTML&quot;&gt;&lt;/bibref&gt;,&#10;        based on the &lt;code&gt;DocumentType&lt;/code&gt; specified at creation time,&#10;        changing it afterwards is very unlikely to result in a change of the&#10;        features supported.&lt;/p&gt;&#10;    " readonly="true" owner_id="Document"/>
      <property name="implementation" id="implementation" type="DOMImplementation" description="&#10;      &lt;p&gt;The &lt;code&gt;DOMImplementation&lt;/code&gt; object that handles this&#10;        document. A DOM application may use objects from multiple&#10;        implementations.&lt;/p&gt;&#10;    " readonly="true" owner_id="Document"/>
      <property name="documentElement" id="documentElement" type="Element" description="&#10;&#10;      &lt;p&gt;This is a &lt;termref def=&quot;dt-convenience&quot;&gt;convenience&lt;/termref&gt;&#10;&#9;attribute that allows direct access to the child node that is the&#10;&#9;&lt;termref def=&quot;dt-document-element&quot;&gt;document element&lt;/termref&gt; of the&#10;&#9;document.&lt;/p&gt;&#10;    " readonly="true" owner_id="Document"/>
      <property name="inputEncoding" id="inputEncoding" type="DOMString" description="&#10;      &lt;p&gt;An attribute specifying the encoding used for this&#10;&#9;document at the time of the parsing. This is&#10;        &lt;code&gt;null&lt;/code&gt; when it is not known, such as when the&#10;&#9;&lt;code&gt;Document&lt;/code&gt; was created in memory.&lt;/p&gt;&#10;    " readonly="true" owner_id="Document"/>
      <property name="xmlEncoding" id="xmlEncoding" type="DOMString" description="&#10;      &lt;p&gt;An attribute specifying, as part of the &lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;XML declaration&lt;/xspecref&gt;, the&#10;      encoding of this document. This is &lt;code&gt;null&lt;/code&gt; when&#10;      unspecified or when it is not known, such as when the&#10;      &lt;code&gt;Document&lt;/code&gt; was created in memory.&lt;/p&gt;&#10;    " readonly="true" owner_id="Document"/>
      <property name="xmlStandalone" id="xmlStandalone" type="boolean" description="&#10;      &lt;p&gt;An attribute specifying, as part of the &lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;XML declaration&lt;/xspecref&gt;, whether this&#10;        document is standalone. This is &lt;code&gt;false&lt;/code&gt; when&#10;&#9;unspecified.&lt;/p&gt;&#10;      &lt;note&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  No verification is done on the value when setting this&#10;&#9;  attribute. Applications should use&#10;&#9;  &lt;code&gt;Document.normalizeDocument()&lt;/code&gt; with the &quot;&lt;termref def=&quot;parameter-validate&quot;&gt;validate&lt;/termref&gt;&quot; parameter to&#10;&#9;  verify if the value matches the &lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#sec-rmd&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;validity constraint for standalone&#10;&#9;    document declaration&lt;/xspecref&gt; as defined in &lt;bibref ref=&quot;XML&quot;&gt;&lt;/bibref&gt;.&#10;&#9;&lt;/p&gt;&#10;      &lt;/note&gt;&#10;    " readonly="false" owner_id="Document"/>
      <property name="xmlVersion" id="xmlVersion" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;An attribute specifying, as part of the &lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;XML declaration&lt;/xspecref&gt;, the&#10;&#9;version number of this document. If there is no declaration and&#10;&#9;if this document supports the &quot;XML&quot; feature, the value is&#10;&#9;&lt;code&gt;&quot;1.0&quot;&lt;/code&gt;. If this document does not support the &quot;XML&quot;&#10;&#9;feature, the value is always &lt;code&gt;null&lt;/code&gt;. Changing this&#10;&#9;attribute will affect methods that check for invalid characters&#10;&#9;in XML names. Application should invoke&#10;&#9;&lt;code&gt;Document.normalizeDocument()&lt;/code&gt; in order to check for&#10;&#9;invalid characters in the &lt;code&gt;Node&lt;/code&gt;s that are already&#10;&#9;part of this &lt;code&gt;Document&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;      &lt;p&gt;&#10;&#9;DOM applications may use the&#10;&#9;&lt;code&gt;DOMImplementation.hasFeature(feature, version)&lt;/code&gt;&#10;&#9;method with parameter values &quot;XMLVersion&quot; and &quot;1.0&quot;&#10;&#9;(respectively) to determine if an implementation supports&#10;&#9;&lt;bibref ref=&quot;XML&quot;&gt;&lt;/bibref&gt;. DOM applications may use the same method&#10;&#9;with parameter values &quot;XMLVersion&quot; and &quot;1.1&quot; (respectively) to&#10;&#9;determine if an implementation supports &lt;bibref ref=&quot;XML11&quot;&gt;&lt;/bibref&gt;. In both cases, in order to support XML, an&#10;&#9;implementation must also support the &quot;XML&quot; feature defined in&#10;&#9;this specification. &lt;code&gt;Document&lt;/code&gt; objects supporting a&#10;&#9;version of the &quot;XMLVersion&quot; feature must not raise a&#10;&#9;&lt;code&gt;NOT_SUPPORTED_ERR&lt;/code&gt; exception for the same version&#10;&#9;number when using &lt;code&gt;Document.xmlVersion&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="Document"/>
      <property name="strictErrorChecking" id="strictErrorChecking" type="boolean" description="&#10;      &lt;p&gt;An attribute specifying whether error checking is enforced or&#10;      not. When set to &lt;code&gt;false&lt;/code&gt;, the implementation is free to&#10;      not test every possible error case normally defined on DOM&#10;      operations, and not raise any &lt;code&gt;DOMException&lt;/code&gt; on DOM&#10;      operations or report errors while using&#10;      &lt;code&gt;Document.normalizeDocument()&lt;/code&gt;. In case of error, the&#10;      behavior is undefined. This attribute is &lt;code&gt;true&lt;/code&gt; by&#10;      default.&lt;/p&gt;&#10;    " readonly="false" owner_id="Document"/>
      <property name="documentURI" id="documentURI" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;The location of the document or &lt;code&gt;null&lt;/code&gt; if undefined&#10;&#9;or if the &lt;code&gt;Document&lt;/code&gt; was created using&#10;&#9;&lt;code&gt;DOMImplementation.createDocument&lt;/code&gt;. No lexical&#10;&#9;checking is performed when setting this attribute; this could&#10;&#9;result in a &lt;code&gt;null&lt;/code&gt; value returned when using&#10;&#9;&lt;code&gt;Node.baseURI&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;      &lt;p&gt;&#10;&#9;Beware that when the &lt;code&gt;Document&lt;/code&gt; supports the feature&#10;&#9;&quot;HTML&quot; &lt;bibref role=&quot;informative&quot; ref=&quot;DOM2HTML&quot;&gt;&lt;/bibref&gt;, the href&#10;&#9;attribute of the HTML BASE element takes precedence over this&#10;&#9;attribute when computing &lt;code&gt;Node.baseURI&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="Document"/>
      <property name="domConfig" id="domConfig" type="DOMConfiguration" description="&#10;      &lt;p&gt;&#10;&#9;The configuration used when&#10;&#9;&lt;code&gt;Document.normalizeDocument()&lt;/code&gt; is invoked.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="Document"/>
    </properties>
  </interface>
  <interface id="TypeInfo" name="TypeInfo" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;TypeInfo&lt;/code&gt; interface represents a type referenced&#10;      from &lt;code&gt;Element&lt;/code&gt; or &lt;code&gt;Attr&lt;/code&gt; nodes, specified in&#10;      the &lt;termref def=&quot;dt-schema&quot;&gt;schemas&lt;/termref&gt; associated with the&#10;      document. The type is a pair of a &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt; and name properties,&#10;      and depends on the document's schema.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      If the document's schema is an XML DTD &lt;bibref ref=&quot;XML&quot;&gt;&lt;/bibref&gt;, the&#10;      values are computed as follows:&#10;    &lt;/p&gt;&#10;    &lt;ulist&gt;&#10;      &lt;item&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  If this type is referenced from an &lt;code&gt;Attr&lt;/code&gt; node,&#10;&#9;  &lt;code&gt;typeNamespace&lt;/code&gt; is&#10;&#9;  &lt;code&gt;&quot;http://www.w3.org/TR/REC-xml&quot;&lt;/code&gt; and&#10;&#9;  &lt;code&gt;typeName&lt;/code&gt; represents the &lt;b&gt;[attribute type]&lt;/b&gt;&#10;&#9;  property in the &lt;bibref ref=&quot;InfoSet&quot;&gt;&lt;/bibref&gt;. If there is no&#10;&#9;  declaration for the attribute, &lt;code&gt;typeNamespace&lt;/code&gt; and&#10;&#9;  &lt;code&gt;typeName&lt;/code&gt; are &lt;code&gt;null&lt;/code&gt;.&#10;&#9;&lt;/p&gt;&#10;      &lt;/item&gt;&#10;      &lt;item&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  If this type is referenced from an &lt;code&gt;Element&lt;/code&gt; node,&#10;&#9;  &lt;code&gt;typeNamespace&lt;/code&gt; and &lt;code&gt;typeName&lt;/code&gt; are&#10;&#9;  &lt;code&gt;null&lt;/code&gt;.&#10;&#9;&lt;/p&gt;&#10;      &lt;/item&gt;&#10;    &lt;/ulist&gt;&#10;    &lt;p&gt;&#10;      If the document's schema is an XML Schema &lt;bibref ref=&quot;XMLSchema1&quot;&gt;&lt;/bibref&gt;, the values are computed as follows using the&#10;      post-schema-validation infoset contributions (also called PSVI&#10;      contributions):&#10;    &lt;/p&gt;&#10;    &lt;ulist&gt;&#10;      &lt;item&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  If the &lt;b&gt;[validity]&lt;/b&gt; property exists AND is&#10;&#9;  &lt;emph&gt;&quot;invalid&quot;&lt;/emph&gt; or &lt;emph&gt;&quot;notKnown&quot;&lt;/emph&gt;: the {target&#10;&#9;  namespace} and {name} properties of the declared type if&#10;&#9;  available, otherwise &lt;code&gt;null&lt;/code&gt;.&#10;&#9;&lt;/p&gt;&#10;&#9;&lt;note&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    At the time of writing, the XML Schema specification does&#10;&#9;    not require exposing the declared type. Thus, DOM&#10;&#9;    implementations might choose not to provide type information&#10;&#9;    if validity is not valid.&#10;&#9;  &lt;/p&gt;&#10;&#9;&lt;/note&gt;&#10;      &lt;/item&gt;&#10;      &lt;item&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  If the &lt;b&gt;[validity]&lt;/b&gt; property exists and is &lt;emph&gt;&quot;valid&quot;&lt;/emph&gt;:&#10;&#9;&lt;/p&gt;&#10;&#9;&lt;olist&gt;&#10;&#9;  &lt;item&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      If &lt;b&gt;[member type definition]&lt;/b&gt; exists: &lt;/p&gt; &#10;            &lt;olist&gt;&#10;             &lt;item&gt;&lt;p&gt;If {name} is not absent, then expose {name} and {target namespace} properties of the &#10;                      &lt;b&gt;[member type definition]&lt;/b&gt; property;&lt;/p&gt;&lt;/item&gt;&#10;             &lt;item&gt;&lt;p&gt;Otherwise, expose the namespace and local name of the corresponding&#10;             &lt;termref def=&quot;dt-anonymous&quot;&gt;anonymous type name&lt;/termref&gt;.&lt;/p&gt;&lt;/item&gt;&#10;            &lt;/olist&gt;&#10;&#9;  &lt;/item&gt;&#10; &#9;  &lt;item&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      If the &lt;b&gt;[type definition]&lt;/b&gt; property exists:&#10;            &lt;olist&gt;&#10;             &lt;item&gt;&lt;p&gt;If {name} is not absent, then expose {name} and {target namespace} properties of the &#10;                      &lt;b&gt;[type definition]&lt;/b&gt; property;&lt;/p&gt;&lt;/item&gt;&#10;             &lt;item&gt;&lt;p&gt;Otherwise, expose the namespace and local name of the corresponding&#10;             &lt;termref def=&quot;dt-anonymous&quot;&gt;anonymous type name&lt;/termref&gt;.&lt;/p&gt;&lt;/item&gt;&#10;            &lt;/olist&gt;&#10;&#9;    &lt;/p&gt;&#10;&#9;  &lt;/item&gt;&#10;&#9;  &lt;item&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      If the &lt;b&gt;[member type definition anonymous]&lt;/b&gt; exists:&#10;            &lt;olist&gt;&#10;             &lt;item&gt;&lt;p&gt;If it is false, then expose &#10;                      &lt;b&gt;[member type definition name]&lt;/b&gt; and &lt;b&gt;[member type definition namespace]&lt;/b&gt; properties;&lt;/p&gt;&lt;/item&gt;&#10;             &lt;item&gt;&lt;p&gt;Otherwise, expose the namespace and local name of the corresponding &#10;             &lt;termref def=&quot;dt-anonymous&quot;&gt;anonymous type name&lt;/termref&gt;.&lt;/p&gt;&lt;/item&gt;&#10;            &lt;/olist&gt;  &#10;&#9;    &lt;/p&gt;&#10;&#9;  &lt;/item&gt;&#10;&#9;  &lt;item&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      If the &lt;b&gt;[type definition anonymous]&lt;/b&gt; exists:&#10;            &lt;olist&gt;&#10;             &lt;item&gt;&lt;p&gt;If it is false, then expose &#10;                      &lt;b&gt;[type definition name]&lt;/b&gt; and &lt;b&gt;[type definition namespace]&lt;/b&gt; properties;&lt;/p&gt;&lt;/item&gt;&#10;             &lt;item&gt;&lt;p&gt;Otherwise, expose the namespace and local name of the corresponding &#10;                    &lt;termref def=&quot;dt-anonymous&quot;&gt;anonymous type name&lt;/termref&gt;.&lt;/p&gt;&lt;/item&gt;&#10;            &lt;/olist&gt;&#10;&#9;    &lt;/p&gt;&#10;&#9;  &lt;/item&gt;&#10;&#9;&lt;/olist&gt;&#10;      &lt;/item&gt;&#10;    &lt;/ulist&gt;&#10;&#10;    &lt;note&gt;&#10;      &lt;p&gt;&#10;&#9;Other schema languages are outside the scope of the W3C and&#10;&#9;therefore should define how to represent their type systems using&#10;&#9;&lt;code&gt;TypeInfo&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    &lt;/note&gt;    &#10;  ">
    <methods>
      <method id="isDerivedFrom" name="isDerivedFrom" return_type="boolean" owner_id="TypeInfo" description="&#10;      &lt;p&gt;&#10;&#9;This method returns if there is a derivation between the&#10;&#9;reference type definition, i.e. the &lt;code&gt;TypeInfo&lt;/code&gt; on&#10;&#9;which the method is being called, and the other type definition,&#10;&#9;i.e. the one passed as parameters.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;&#10;&#9;  If the document's schema is a DTD or no schema is associated&#10;&#9;  with the document, this method will always return&#10;&#9;  &lt;code&gt;false&lt;/code&gt;.&#10;&#9;&lt;/p&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  If the document's schema is an XML Schema, the method will&#10;&#9;  &lt;code&gt;true&lt;/code&gt; if the reference type definition is derived&#10;&#9;  from the other type definition according to the derivation&#10;&#9;  parameter.  If the value of the parameter is &lt;code&gt;0&lt;/code&gt;&#10;&#9;  (no bit is set to &lt;code&gt;1&lt;/code&gt; for the&#10;&#9;  &lt;code&gt;derivationMethod&lt;/code&gt; parameter), the method will&#10;&#9;  return &lt;code&gt;true&lt;/code&gt; if the other type definition can be&#10;&#9;  reached by recursing any combination of {base type&#10;&#9;  definition}, {item type definition}, or {member type&#10;&#9;  definitions} from the reference type definition.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="typeNamespaceArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    the namespace of the other type definition.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="typeNameArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    the name of the other type definition.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="derivationMethod" type="unsigned long" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    the type of derivation and conditions applied between two&#10;&#9;    types, as described in the list of constants provided in&#10;&#9;    this interface.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
    </methods>
    <properties>
      <property name="typeName" id="typeName" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;The name of a type declared for the associated element or&#10;&#9;attribute, or &lt;code&gt;null&lt;/code&gt; if unknown.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="TypeInfo"/>
      <property name="typeNamespace" id="typeNamespace" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;The namespace of the type declared for the associated element or&#10;&#9;attribute or &lt;code&gt;null&lt;/code&gt; if the element does not have&#10;&#9;declaration or if no namespace information is&#10;&#9;available. &#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="TypeInfo"/>
    </properties>
  </interface>
  <interface id="UserDataHandler" name="UserDataHandler" description="&#10;    &lt;p&gt;When associating an object to a key on a node using&#10;      &lt;code&gt;Node.setUserData()&lt;/code&gt; the application can provide a handler that gets&#10;      called when the node the object is associated to is being cloned,&#10;      imported, or renamed. This can be used by the application to implement&#10;      various behaviors regarding the data it associates to the DOM nodes.&#10;      This interface defines that handler.&#10;    &lt;/p&gt;&#10;  ">
    <methods>
      <method id="handle" name="handle" return_type="void" owner_id="UserDataHandler" description="&#10;      &lt;p&gt;This method is called whenever the node for which this handler is&#10;        registered is imported or cloned.&lt;/p&gt;&#10;      &lt;p&gt;&#10;&#9;DOM applications must not raise exceptions in a&#10;&#9;&lt;code&gt;UserDataHandler&lt;/code&gt;. The effect of throwing exceptions&#10;&#9;from the handler is DOM implementation dependent.&#10;      &lt;/p&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="operation" type="unsigned short" owner_id="" description="&#10;          &lt;p&gt;Specifies the type of operation that is being performed on the&#10;            node.&lt;/p&gt;&#10;        "/>
        <parameter id="" name="key" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;Specifies the key for which this handler is being called.&#10;          &lt;/p&gt;&#10;        "/>
        <parameter id="" name="data" type="DOMUserData" owner_id="" description="&#10;          &lt;p&gt;Specifies the data for which this handler is being called.&#10;          &lt;/p&gt;&#10;        "/>
        <parameter id="" name="src" type="Node" owner_id="" description="&#10;          &lt;p&gt;Specifies the node being cloned, adopted, imported, or&#10;&#9;    renamed. This is &lt;code&gt;null&lt;/code&gt; when the node is being&#10;&#9;    deleted.&lt;/p&gt;&#10;        "/>
        <parameter id="" name="dst" type="Node" owner_id="" description="&#10;          &lt;p&gt;Specifies the node newly created if any, or &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#10;        "/>
      </method>
    </methods>
    <properties/>
  </interface>
  <interface id="DOMError" name="DOMError" description="&#10;    &lt;p&gt;&lt;code&gt;DOMError&lt;/code&gt; is an interface that describes an error.&lt;/p&gt;&#10;  ">
    <methods/>
    <properties>
      <property name="severity" id="severity" type="unsigned short" description="&#10;      &lt;p&gt;The severity of the error, either&#10;        &lt;code&gt;SEVERITY_WARNING&lt;/code&gt;, &lt;code&gt;SEVERITY_ERROR&lt;/code&gt;,&#10;        or &lt;code&gt;SEVERITY_FATAL_ERROR&lt;/code&gt;.&lt;/p&gt;&#10;    " readonly="true" owner_id="DOMError"/>
      <property name="message" id="message" type="DOMString" description="&#10;      &lt;p&gt;An implementation specific string describing the error that&#10;        occurred.&lt;/p&gt;&#10;    " readonly="true" owner_id="DOMError"/>
      <property name="type" id="type" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;A &lt;code&gt;DOMString&lt;/code&gt; indicating which related data is&#10;&#9;expected in &lt;code&gt;relatedData&lt;/code&gt;. Users should refer to the&#10;&#9;specification of the error in order to find its&#10;&#9;&lt;code&gt;DOMString&lt;/code&gt; type and &lt;code&gt;relatedData&lt;/code&gt;&#10;&#9;definitions if any.&#10;      &lt;/p&gt;&#10;      &lt;note&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  As an example, &lt;code&gt;Document.normalizeDocument()&lt;/code&gt; does&#10;&#9;  generate warnings when the &quot;&lt;termref def=&quot;parameter-split-cdata-sections&quot;&gt;split-cdata-sections&lt;/termref&gt;&quot;&#10;&#9;  parameter is in use. Therefore, the method generates a&#10;&#9;  &lt;code&gt;SEVERITY_WARNING&lt;/code&gt; with &lt;code&gt;type&lt;/code&gt;&#10;&#9;  &lt;code&gt;&quot;cdata-sections-splitted&quot;&lt;/code&gt; and the first&#10;&#9;  &lt;code&gt;CDATASection&lt;/code&gt; node in document order resulting&#10;&#9;  from the split is returned by the &lt;code&gt;relatedData&lt;/code&gt;&#10;&#9;  attribute.&#10;&#9;&lt;/p&gt;&#10;      &lt;/note&gt;&#10;    " readonly="true" owner_id="DOMError"/>
      <property name="relatedException" id="relatedException" type="DOMObject" description="&#10;      &lt;p&gt;The related platform dependent exception if any.&lt;/p&gt;&#10;    " readonly="true" owner_id="DOMError"/>
      <property name="relatedData" id="relatedData" type="DOMObject" description="&#10;      &lt;p&gt;&#10;&#9;The related &lt;code&gt;DOMError.type&lt;/code&gt; dependent data if any.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="DOMError"/>
      <property name="location" id="location" type="DOMLocator" description="&#10;      &lt;p&gt;The location of the error.&lt;/p&gt;&#10;    " readonly="true" owner_id="DOMError"/>
    </properties>
  </interface>
  <interface id="DOMErrorHandler" name="DOMErrorHandler" description="&#10;    &lt;p&gt;&#10;      &lt;code&gt;DOMErrorHandler&lt;/code&gt; is a callback interface that the DOM&#10;      implementation can call when reporting errors that happens while&#10;      processing XML data, or when doing some other processing&#10;      (e.g. validating a document). A &lt;code&gt;DOMErrorHandler&lt;/code&gt;&#10;      object can be attached to a &lt;code&gt;Document&lt;/code&gt; using the&#10;      &quot;&lt;termref def=&quot;parameter-error-handler&quot;&gt;error-handler&lt;/termref&gt;&quot;&#10;      on the &lt;code&gt;DOMConfiguration&lt;/code&gt; interface. If more than one&#10;      error needs to be reported during an operation, the sequence and&#10;      numbers of the errors passed to the error handler are&#10;      implementation dependent.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      The application that is using the DOM implementation is expected&#10;      to implement this interface.&#10;    &lt;/p&gt;&#10;  ">
    <methods>
      <method id="handleError" name="handleError" return_type="boolean" owner_id="DOMErrorHandler" description="&#10;      &lt;p&gt;This method is called on the error handler when an error occurs.&lt;/p&gt;&#10;      &lt;p&gt;&#10;&#9;If an exception is thrown from this method, it is considered to&#10;&#9;be equivalent of returning &lt;code&gt;true&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;&#9;  If the &lt;code&gt;handleError&lt;/code&gt; method returns&#10;&#9;  &lt;code&gt;false&lt;/code&gt;, the DOM implementation should stop the&#10;&#9;  current processing when possible. If the method returns&#10;&#9;  &lt;code&gt;true&lt;/code&gt;, the processing may continue depending on&#10;&#9;  &lt;code&gt;DOMError.severity&lt;/code&gt;.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="error" type="DOMError" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    The error object that describes the error. This object may&#10;&#9;    be reused by the DOM implementation across multiple calls to&#10;&#9;    the &lt;code&gt;handleError&lt;/code&gt; method.&#10;&#9;  &lt;/p&gt;&#10;        "/>
      </method>
    </methods>
    <properties/>
  </interface>
  <interface id="DOMLocator" name="DOMLocator" description="&#10;    &lt;p&gt;&lt;code&gt;DOMLocator&lt;/code&gt; is an interface that describes a location&#10;      (e.g. where an error occurred).&lt;/p&gt;&#10;  ">
    <methods/>
    <properties>
      <property name="lineNumber" id="lineNumber" type="long" description="&#10;      &lt;p&gt;The line number this locator is pointing to, or &lt;code&gt;-1&lt;/code&gt; if&#10;        there is no column number available.&lt;/p&gt;&#10;    " readonly="true" owner_id="DOMLocator"/>
      <property name="columnNumber" id="columnNumber" type="long" description="&#10;      &lt;p&gt;The column number this locator is pointing to, or &lt;code&gt;-1&lt;/code&gt; if&#10;        there is no column number available.&lt;/p&gt;&#10;    " readonly="true" owner_id="DOMLocator"/>
      <property name="byteOffset" id="byteOffset" type="long" description="&#10;      &lt;p&gt;The byte offset into the input source this locator is pointing&#10;      to or &lt;code&gt;-1&lt;/code&gt; if there is no byte offset available.&lt;/p&gt;&#10;    " readonly="true" owner_id="DOMLocator"/>
      <property name="utf16Offset" id="utf16Offset" type="long" description="&#10;      &lt;p&gt;The UTF-16, as defined in &lt;bibref ref=&quot;Unicode&quot;&gt;&lt;/bibref&gt; and Amendment&#10;      1 of &lt;bibref ref=&quot;ISO10646&quot;&gt;&lt;/bibref&gt;, offset into the input source this&#10;      locator is pointing to or &lt;code&gt;-1&lt;/code&gt; if there is no UTF-16&#10;      offset available.&lt;/p&gt;&#10;    " readonly="true" owner_id="DOMLocator"/>
      <property name="relatedNode" id="relatedNode" type="Node" description="&#10;      &lt;p&gt;The node this locator is pointing to, or &lt;code&gt;null&lt;/code&gt; if no node&#10;        is available.&lt;/p&gt;&#10;    " readonly="true" owner_id="DOMLocator"/>
      <property name="uri" id="uri" type="DOMString" description="&#10;      &lt;p&gt;The URI this locator is pointing to, or &lt;code&gt;null&lt;/code&gt; if no URI&#10;        is available.&lt;/p&gt;&#10;    " readonly="true" owner_id="DOMLocator"/>
    </properties>
  </interface>
  <interface id="DOMConfiguration" name="DOMConfiguration" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;DOMConfiguration&lt;/code&gt; interface represents the&#10;      configuration of a document and maintains a table of recognized&#10;      parameters. Using the configuration, it is possible to change&#10;      &lt;code&gt;Document.normalizeDocument()&lt;/code&gt; behavior, such as&#10;      replacing the &lt;code&gt;CDATASection&lt;/code&gt; nodes with&#10;      &lt;code&gt;Text&lt;/code&gt; nodes or specifying the type of the &lt;termref def=&quot;dt-schema&quot;&gt;schema&lt;/termref&gt; that must be used when the&#10;      validation of the &lt;code&gt;Document&lt;/code&gt; is&#10;      requested. &lt;code&gt;DOMConfiguration&lt;/code&gt; objects are also used in&#10;      &lt;bibref role=&quot;informative&quot; ref=&quot;DOMLS&quot;&gt;&lt;/bibref&gt; in the&#10;      &lt;code&gt;DOMParser&lt;/code&gt; and &lt;code&gt;DOMSerializer&lt;/code&gt; interfaces.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      The parameter names used by the &lt;code&gt;DOMConfiguration&lt;/code&gt;&#10;      object are defined throughout the DOM Level 3&#10;      specifications. Names are case-insensitive. To avoid possible&#10;      conflicts, as a convention, names referring to parameters defined&#10;      outside the DOM specification should be made unique. Because&#10;      parameters are exposed as properties in the &lt;specref ref=&quot;ecma-binding&quot;&gt;&lt;/specref&gt;, names are recommended to follow the section&#10;      &lt;quote&gt;5.16 Identifiers&lt;/quote&gt; of &lt;bibref role=&quot;informative&quot; ref=&quot;Unicode&quot;&gt;&lt;/bibref&gt; with the addition of the character '-'&#10;      (HYPHEN-MINUS) but it is not enforced by the DOM&#10;      implementation. DOM Level 3 Core Implementations are required to&#10;      recognize all parameters defined in this specification. Some&#10;      parameter values may also be required to be supported by&#10;      the implementation. Refer to the definition of the parameter to&#10;      know if a value must be supported or not.&#10;    &lt;/p&gt;&#10;    &lt;note&gt;&#10;      &lt;p&gt;&#10;&#9;Parameters are similar to features and properties used in SAX2&#10;&#9;&lt;bibref role=&quot;informative&quot; ref=&quot;SAX&quot;&gt;&lt;/bibref&gt;.&#10;      &lt;/p&gt;&#10;    &lt;/note&gt;&#10;&#10;    &lt;p&gt;&#10;      The following list of parameters defined in the DOM:&#10;    &lt;/p&gt;    &#10;    &lt;glist&gt;&#10;      &#10;      &lt;gitem&gt;&#10;&#9;&lt;label id=&quot;parameter-canonical-form&quot;&gt;&lt;code&gt;&quot;canonical-form&quot;&lt;/code&gt;&lt;/label&gt;&#10;&#9;&lt;def&gt;&#10;&#9;  &lt;glist&gt;&#10;&#9;    &lt;gitem&gt;&#10;&#9;      &lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;&#9;      &lt;def&gt;&#10;&#9;&#9;&lt;p&gt;[&lt;emph&gt;optional&lt;/emph&gt;]&lt;/p&gt;&#10;&#9;&#9;&lt;p&gt;&#10;&#9;&#9;  Canonicalize the document according to the rules&#10;&#9;&#9;  specified in &lt;bibref role=&quot;informative&quot; ref=&quot;c14n&quot;&gt;&lt;/bibref&gt;,&#10;&#9;&#9;  such as removing the &lt;code&gt;DocumentType&lt;/code&gt; node (if&#10;&#9;&#9;  any) from the tree, or removing superfluous namespace&#10;&#9;&#9;  declarations from each element. Note that this is&#10;&#9;&#9;  limited to what can be represented in the DOM; in&#10;&#9;&#9;  particular, there is no way to specify the order of&#10;&#9;&#9;  the attributes in the DOM. In addition,&#10;&#9;&#9;&lt;/p&gt;&#10;&#9;&#9;&lt;p&gt;&#10;&#9;&#9;  Setting this parameter to &lt;code&gt;true&lt;/code&gt; will also&#10;&#9;&#9;  set the state of the parameters listed below. Later&#10;&#9;&#9;  changes to the state of one of those parameters will&#10;&#9;&#9;  revert &quot;&lt;termref def=&quot;parameter-canonical-form&quot;&gt;canonical-form&lt;/termref&gt;&quot;&#10;&#9;&#9;  back to &lt;code&gt;false&lt;/code&gt;.&#10;&#9;&#9;&lt;/p&gt;&#10;&#9;&#9;&lt;p&gt;Parameters set to&#10;&#9;&#9;  &lt;code&gt;false&lt;/code&gt;:&#10;&#9;&#9;  &quot;&lt;termref def=&quot;parameter-entities&quot;&gt;entities&lt;/termref&gt;&quot;,&#10;&#9;&#9;  &quot;&lt;termref def=&quot;parameter-normalize-characters&quot;&gt;normalize-characters&lt;/termref&gt;&quot;,&#10;&#9;&#9;  &quot;&lt;termref def=&quot;parameter-cdata-sections&quot;&gt;cdata-sections&lt;/termref&gt;&quot;.&#10;&#9;&#9;&lt;/p&gt;&#10;&#9;&#9;&lt;p&gt;Parameters set to&#10;&#9;&#9;  &lt;code&gt;true&lt;/code&gt;:&#10;&#9;&#9;  &quot;&lt;termref def=&quot;parameter-namespaces&quot;&gt;namespaces&lt;/termref&gt;&quot;,&#10;&#9;&#9;  &quot;&lt;termref def=&quot;parameter-namespace-declarations&quot;&gt;namespace-declarations&lt;/termref&gt;&quot;,&#10;&#9;&#9;  &quot;&lt;termref def=&quot;parameter-well-formed&quot;&gt;well-formed&lt;/termref&gt;&quot;,&#10;&#9;&#9;  &quot;&lt;termref def=&quot;parameter-element-content-whitespace&quot;&gt;element-content-whitespace&lt;/termref&gt;&quot;.&#10;&#9;&#9;&lt;/p&gt;&#10;&#9;&#9;&lt;p&gt;Other parameters are not changed unless explicitly specified&#10;&#9;&#9;  in the description of the parameters.&lt;/p&gt;&#10;&#9;      &lt;/def&gt;&#10;&#9;    &lt;/gitem&gt;&#10;&#9;    &lt;gitem&gt;&#10;&#9;      &lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;&#9;      &lt;def&gt;&#10;&#9;&#9;&lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;&#9;&#9;&lt;p&gt;Do not canonicalize the document.&lt;/p&gt;&#10;&#9;      &lt;/def&gt;&#10;&#9;    &lt;/gitem&gt;&#10;&#9;  &lt;/glist&gt;&#10;&#9;&lt;/def&gt;&#10;      &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label id=&quot;parameter-cdata-sections&quot;&gt;&lt;code&gt;&quot;cdata-sections&quot;&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;            &lt;glist&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;                  &lt;p&gt;Keep &lt;code&gt;CDATASection&lt;/code&gt; nodes in the document.&lt;/p&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;]&lt;/p&gt;&#10;                  &lt;p&gt;Transform &lt;code&gt;CDATASection&lt;/code&gt; nodes in the document&#10;                    into &lt;code&gt;Text&lt;/code&gt; nodes. The new &lt;code&gt;Text&lt;/code&gt;&#10;                    node is then combined with any adjacent &lt;code&gt;Text&lt;/code&gt;&#10;                    node.&lt;/p&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;            &lt;/glist&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label id=&quot;parameter-check-character-normalization&quot;&gt;&lt;code&gt;&quot;check-character-normalization&quot;&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;            &lt;glist&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;optional&lt;/emph&gt;]&lt;/p&gt;&#10;&#9;&#9;&lt;p&gt;&#10;&#9;&#9;  Check if the characters in the document are &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2004/REC-xml11-20040204/#dt-fullnorm&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;fully&#10;&#9;&#9;  normalized&lt;/loc&gt;, as defined in appendix B of &lt;bibref ref=&quot;XML11&quot;&gt;&lt;/bibref&gt;.  When a sequence of characters is&#10;&#9;&#9;  encountered that fails normalization checking, an&#10;&#9;&#9;  error with the &lt;code&gt;DOMError.type&lt;/code&gt; equals to&#10;&#9;&#9;  &quot;check-character-normalization-failure&quot; is issued.&#10;&#9;&#9;&lt;/p&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;                  &lt;p&gt;Do not check if characters are normalized.&lt;/p&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;            &lt;/glist&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label id=&quot;parameter-comments&quot;&gt;&lt;code&gt;&quot;comments&quot;&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;            &lt;glist&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;                  &lt;p&gt;Keep &lt;code&gt;Comment&lt;/code&gt; nodes in the document.&lt;/p&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;]&lt;/p&gt;&#10;                  &lt;p&gt;Discard &lt;code&gt;Comment&lt;/code&gt; nodes in the document.&lt;/p&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;            &lt;/glist&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label id=&quot;parameter-datatype-normalization&quot;&gt;&lt;code&gt;&quot;datatype-normalization&quot;&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;            &lt;glist&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;optional&lt;/emph&gt;]&lt;/p&gt;&#10;&#9;&#9;&lt;p&gt;&#10;&#9;&#9;  Expose schema normalized values in the tree, such as&#10;&#9;&#9;  &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#key-nv&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;XML Schema&#10;&#9;&#9;  normalized values&lt;/loc&gt; in the case of XML&#10;&#9;&#9;  Schema. Since this parameter requires to have &lt;termref def=&quot;dt-schema&quot;&gt;schema&lt;/termref&gt; information, the&#10;&#9;&#9;  &quot;&lt;termref def=&quot;parameter-validate&quot;&gt;validate&lt;/termref&gt;&quot;&#10;&#9;&#9;  parameter will also be set to&#10;&#9;&#9;  &lt;code&gt;true&lt;/code&gt;. Having this parameter activated&#10;&#9;&#9;  when &quot;validate&quot; is &lt;code&gt;false&lt;/code&gt; has no effect&#10;&#9;&#9;  and no schema-normalization will happen.&#10;&#9;&#9;&lt;/p&gt;&#10;&#9;&#9;&lt;note&gt;&#10;&#9;&#9;  &lt;p&gt;&#10;&#9;&#9;    Since the document contains the result of the XML&#10;&#9;&#9;    1.0 processing, this parameter does not apply to&#10;&#9;&#9;    attribute value normalization as defined in section&#10;&#9;&#9;    3.3.3 of &lt;bibref ref=&quot;XML&quot;&gt;&lt;/bibref&gt; and is only meant for&#10;&#9;&#9;    &lt;termref def=&quot;dt-schema&quot;&gt;schema&lt;/termref&gt; languages&#10;&#9;&#9;    other than Document Type Definition (DTD).&#10;&#9;&#9;  &lt;/p&gt;&#10;&#9;&#9;&lt;/note&gt;&#10;&#9;        &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;&#9;&#9;&lt;p&gt;&#10;&#9;&#9;  Do not perform schema normalization on the tree.&#10;&#9;&#9;&lt;/p&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;            &lt;/glist&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label id=&quot;parameter-element-content-whitespace&quot;&gt;&lt;code&gt;&quot;element-content-whitespace&quot;&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;            &lt;glist&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;                  &lt;p&gt;Keep all whitespaces in the document.&lt;/p&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;optional&lt;/emph&gt;]&lt;/p&gt;&#10;                  &lt;p&gt;&#10;&#9;&#9;    Discard all &lt;code&gt;Text&lt;/code&gt; nodes that contain&#10;&#9;&#9;    whitespaces in element content, as described in&#10;&#9;&#9;    &lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2004/REC-xml-infoset-20040204#infoitem.character&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;[element content&#10;&#9;&#9;    whitespace]&lt;/xspecref&gt;.  The implementation is&#10;&#9;&#9;    expected to use the attribute&#10;&#9;&#9;    &lt;code&gt;Text.isElementContentWhitespace&lt;/code&gt; to&#10;&#9;&#9;    determine if a &lt;code&gt;Text&lt;/code&gt; node should be&#10;&#9;&#9;    discarded or not.&lt;/p&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;            &lt;/glist&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label id=&quot;parameter-entities&quot;&gt;&lt;code&gt;&quot;entities&quot;&lt;/code&gt;&lt;/label&gt;&#10;&#9;  &lt;def&gt;&#10;            &lt;glist&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;                  &lt;p&gt;Keep &lt;code&gt;EntityReference&lt;/code&gt; nodes in the&#10;                  document.&lt;/p&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;]&lt;/p&gt;&#10;                  &lt;p&gt;&#10;&#9;&#9;  Remove all &lt;code&gt;EntityReference&lt;/code&gt; nodes from the&#10;&#9;&#9;  document, putting the entity expansions directly in&#10;&#9;&#9;  their place.  &lt;code&gt;Text&lt;/code&gt; nodes are normalized,&#10;&#9;&#9;  as defined in &lt;code&gt;Node.normalize&lt;/code&gt;. Only &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2004/REC-xml-infoset-20040204/#infoitem.rse&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;unexpanded entity&#10;&#9;&#9;  references&lt;/loc&gt; are kept in the document.&#10;&#9;&#9;&lt;/p&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;  &#9;      &lt;/glist&gt;&#10;&#9;  &lt;note&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      This parameter does not affect &lt;code&gt;Entity&lt;/code&gt; nodes.&#10;&#9;    &lt;/p&gt;&#10;&#9;  &lt;/note&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;      &lt;gitem&gt;&#10;&#9;&lt;label id=&quot;parameter-error-handler&quot;&gt;&lt;code&gt;&quot;error-handler&quot;&lt;/code&gt;&lt;/label&gt;&#10;&#9;&lt;def&gt;&#10;&#9;  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;]&lt;/p&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    Contains a &lt;code&gt;DOMErrorHandler&lt;/code&gt; object. If an error&#10;&#9;    is encountered in the document, the implementation will call&#10;&#9;    back the &lt;code&gt;DOMErrorHandler&lt;/code&gt; registered using this&#10;&#9;    parameter. The implementation may provide a default&#10;&#9;    &lt;code&gt;DOMErrorHandler&lt;/code&gt; object.&#10;&#9;  &lt;/p&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    When called, &lt;code&gt;DOMError.relatedData&lt;/code&gt; will contain&#10;&#9;    the closest node to where the error occurred. If the&#10;&#9;    implementation is unable to determine the node where the&#10;&#9;    error occurs, &lt;code&gt;DOMError.relatedData&lt;/code&gt; will contain&#10;&#9;    the &lt;code&gt;Document&lt;/code&gt; node. Mutations to the document&#10;&#9;    from within an error handler will result in implementation&#10;&#9;    dependent behavior.&#10;&#9;  &lt;/p&gt;&#10;&#9;&lt;/def&gt;&#10;      &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label id=&quot;parameter-infoset&quot;&gt;&lt;code&gt;&quot;infoset&quot;&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;            &lt;glist&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;]&lt;/p&gt;&#10;                  &lt;p&gt;Keep in the document the information defined in the&#10;                    XML Information Set &lt;bibref ref=&quot;InfoSet&quot;&gt;&lt;/bibref&gt;.&lt;/p&gt;&#10;                  &lt;p&gt;This forces the following parameters to&#10;                    &lt;code&gt;false&lt;/code&gt;:&#10;                    &quot;&lt;termref def=&quot;parameter-validate-if-schema&quot;&gt;validate-if-schema&lt;/termref&gt;&quot;,&#10;                    &quot;&lt;termref def=&quot;parameter-entities&quot;&gt;entities&lt;/termref&gt;&quot;,&#10;                    &quot;&lt;termref def=&quot;parameter-datatype-normalization&quot;&gt;datatype-normalization&lt;/termref&gt;&quot;,&#10;                    &quot;&lt;termref def=&quot;parameter-cdata-sections&quot;&gt;cdata-sections&lt;/termref&gt;&quot;.&lt;/p&gt;&#10;                  &lt;p&gt;This forces the following parameters to&#10;                    &lt;code&gt;true&lt;/code&gt;:&#10;                    &quot;&lt;termref def=&quot;parameter-namespace-declarations&quot;&gt;namespace-declarations&lt;/termref&gt;&quot;,&#10;                    &quot;&lt;termref def=&quot;parameter-well-formed&quot;&gt;well-formed&lt;/termref&gt;&quot;,&#10;                    &quot;&lt;termref def=&quot;parameter-element-content-whitespace&quot;&gt;element-content-whitespace&lt;/termref&gt;&quot;,&#10;                    &quot;&lt;termref def=&quot;parameter-comments&quot;&gt;comments&lt;/termref&gt;&quot;, &quot;&lt;termref def=&quot;parameter-namespaces&quot;&gt;namespaces&lt;/termref&gt;&quot;.&lt;/p&gt;&#10;                  &lt;p&gt;Other parameters are not changed unless explicitly specified&#10;                    in the description of the parameters.&lt;/p&gt;&#10;                  &lt;p&gt; Note that querying this parameter with&#10;                    &lt;code&gt;getParameter&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; only if&#10;                    the individual parameters specified above are appropriately&#10;                    set.&lt;/p&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;Setting &lt;code&gt;infoset&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;&#10;                    has no effect.&lt;/p&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;            &lt;/glist&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;      &lt;gitem&gt;&#10;&#9;&lt;label id=&quot;parameter-namespaces&quot;&gt;&lt;code&gt;&quot;namespaces&quot;&lt;/code&gt;&lt;/label&gt;&#10;&#9;&lt;def&gt;&#10;&#9;  &lt;glist&gt;&#10;&#9;    &lt;gitem&gt;&#10;&#9;      &lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;&#9;      &lt;def&gt;&#10;&#9;&#9;&lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;&#9;&#9;&lt;p&gt;&#10;&#9;&#9;  Perform the namespace processing as defined in&#10;&#9;&#9;  &lt;specref ref=&quot;normalizeDocumentAlgo&quot;&gt;&lt;/specref&gt;.&#10;&#9;&#9;&lt;/p&gt;&#10;&#9;      &lt;/def&gt;&#10;&#9;    &lt;/gitem&gt;&#10;&#9;    &lt;gitem&gt;&#10;&#9;      &lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;&#9;      &lt;def&gt;&#10;&#9;&#9;&lt;p&gt;[&lt;emph&gt;optional&lt;/emph&gt;]&lt;/p&gt;&#10;&#9;&#9;&lt;p&gt;&#10;&#9;&#9;  Do not perform the namespace processing.&#10;&#9;&#9;&lt;/p&gt;&#10;&#9;      &lt;/def&gt;&#10;&#9;    &lt;/gitem&gt;&#10;&#9;  &lt;/glist&gt;&#10;&#9;&lt;/def&gt;&#10;      &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label id=&quot;parameter-namespace-declarations&quot;&gt;&lt;code&gt;&quot;namespace-declarations&quot;&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    This parameter has no effect if the parameter &quot;&lt;termref def=&quot;parameter-namespaces&quot;&gt;namespaces&lt;/termref&gt;&quot; is set to&#10;&#9;    &lt;code&gt;false&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;            &lt;glist&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;                  &lt;p&gt;&#10;&#9;&#9;  Include namespace declaration attributes, specified or&#10;&#9;&#9;  defaulted from the &lt;termref def=&quot;dt-schema&quot;&gt;schema&lt;/termref&gt;, in the document. See&#10;&#9;&#9;  also the sections &quot;Declaring Namespaces&quot; in &lt;bibref ref=&quot;Namespaces&quot;&gt;&lt;/bibref&gt; and &lt;bibref ref=&quot;Namespaces11&quot;&gt;&lt;/bibref&gt;.&lt;/p&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;]&lt;/p&gt;&#10;                  &lt;p&gt;Discard all namespace declaration attributes. The&#10;&#9;&#9;  namespace prefixes (&lt;code&gt;Node.prefix&lt;/code&gt;) are&#10;&#9;&#9;  retained even if this parameter is set&#10;                    to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;            &lt;/glist&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label id=&quot;parameter-normalize-characters&quot;&gt;&lt;code&gt;&quot;normalize-characters&quot;&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;            &lt;glist&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;optional&lt;/emph&gt;]&lt;/p&gt;&#10;&#9;&#9;&lt;p&gt;&#10;&#9;&#9;  &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2004/REC-xml11-20040204/#dt-fullnorm&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;Fully&#10;&#9;&#9;  normalized&lt;/loc&gt; the characters in the document as&#10;&#9;&#9;  defined in appendix B of &lt;bibref ref=&quot;XML11&quot;&gt;&lt;/bibref&gt;.&#10;&#9;&#9;&lt;/p&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;                  &lt;p&gt;Do not perform character normalization.&lt;/p&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;            &lt;/glist&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;      &lt;gitem&gt;&#10;&#9;&lt;label id=&quot;parameter-schema-location&quot;&gt;&lt;code&gt;&quot;schema-location&quot;&lt;/code&gt;&lt;/label&gt;&#10;&#9;&lt;def&gt;&#10;&#9;  &lt;p&gt;[&lt;emph&gt;optional&lt;/emph&gt;]&lt;/p&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    Represent a &lt;code&gt;DOMString&lt;/code&gt; object containing a list&#10;&#9;    of URIs, separated by whitespaces (characters matching the&#10;&#9;    &lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#NT-S&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;nonterminal production&#10;&#9;    S&lt;/xspecref&gt; defined in section 2.3 &lt;bibref ref=&quot;XML&quot;&gt;&lt;/bibref&gt;),&#10;&#9;    that represents the &lt;termref def=&quot;dt-schema&quot;&gt;schemas&lt;/termref&gt; against which validation&#10;&#9;    should occur, i.e. the current schema. The types of schemas&#10;&#9;    referenced in this list must match the type specified with&#10;&#9;    &lt;code&gt;schema-type&lt;/code&gt;, otherwise the behavior of an&#10;&#9;    implementation is undefined.&#10;&#9;  &lt;/p&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    The schemas specified using this property take precedence to&#10;&#9;    the schema information specified in the document itself. For&#10;&#9;    namespace aware schema, if a schema specified using this&#10;&#9;    property and a schema specified in the document instance&#10;&#9;    (i.e. using the &lt;code&gt;schemaLocation&lt;/code&gt; attribute) in a&#10;&#9;    schema document (i.e. using schema &lt;code&gt;import&lt;/code&gt;&#10;&#9;    mechanisms) share the same &lt;code&gt;targetNamespace&lt;/code&gt;, the&#10;&#9;    schema specified by the user using this property will be&#10;&#9;    used. If two schemas specified using this property share the&#10;&#9;    same &lt;code&gt;targetNamespace&lt;/code&gt; or have no namespace, the&#10;&#9;    behavior is implementation dependent.&#10;&#9;  &lt;/p&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    If no location has been provided, this parameter is&#10;&#9;    &lt;code&gt;null&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;&#9;  &lt;note&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      The &lt;code&gt;&quot;schema-location&quot;&lt;/code&gt; parameter is ignored&#10;&#9;      unless the &quot;&lt;termref def=&quot;parameter-schema-type&quot;&gt;schema-type&lt;/termref&gt;&quot;&#10;&#9;      parameter value is set. It is strongly recommended that&#10;&#9;      &lt;code&gt;Document.documentURI&lt;/code&gt; will be set so that an&#10;&#9;      implementation can successfully resolve any external&#10;&#9;      entities referenced.&#10;&#9;    &lt;/p&gt;&#10;&#9;  &lt;/note&gt;&#10;&#9;&lt;/def&gt;&#10;      &lt;/gitem&gt;&#10;      &lt;gitem&gt;&#10;&#9;&lt;label id=&quot;parameter-schema-type&quot;&gt;&lt;code&gt;&quot;schema-type&quot;&lt;/code&gt;&lt;/label&gt;&#10;&#9;&lt;def&gt;&#10;&#9;  &lt;p&gt;[&lt;emph&gt;optional&lt;/emph&gt;]&lt;/p&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    Represent a &lt;code&gt;DOMString&lt;/code&gt; object containing an&#10;&#9;    absolute URI and representing the type of the &lt;termref def=&quot;dt-schema&quot;&gt;schema&lt;/termref&gt; language used to validate a&#10;&#9;    document against. Note that no lexical checking is done on&#10;&#9;    the absolute URI.&#10;&#9;  &lt;/p&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    If this parameter is not set, a default value may be&#10;&#9;    provided by the implementation, based on the schema&#10;&#9;    languages supported and on the schema language used at load&#10;&#9;    time. If no value is provided, this parameter is&#10;&#9;    &lt;code&gt;null&lt;/code&gt;.&#10;          &lt;/p&gt;&#10;&#9;  &lt;note&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      For XML Schema &lt;bibref ref=&quot;XMLSchema1&quot;&gt;&lt;/bibref&gt;, applications&#10;&#9;      must use the value&#10;&#9;      &lt;code&gt;&quot;http://www.w3.org/2001/XMLSchema&quot;&lt;/code&gt;. For XML&#10;&#9;      DTD &lt;bibref ref=&quot;XML&quot;&gt;&lt;/bibref&gt;, applications must use the value&#10;&#9;      &lt;code&gt;&quot;http://www.w3.org/TR/REC-xml&quot;&lt;/code&gt;. Other schema&#10;&#9;      languages are outside the scope of the W3C and therefore&#10;&#9;      should recommend an absolute URI in order to use this&#10;&#9;      method.&#10;&#9;    &lt;/p&gt;&#10;&#9;  &lt;/note&gt;&#10;&#9;&lt;/def&gt;&#10;      &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label id=&quot;parameter-split-cdata-sections&quot;&gt;&lt;code&gt;&quot;split-cdata-sections&quot;&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;            &lt;glist&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;                  &lt;p&gt;Split CDATA sections containing the CDATA section&#10;                    termination marker ']]&amp;gt;'. When a CDATA section is split&#10;                    a warning is issued with a&#10;&#9;&#9;  &lt;code&gt;DOMError.type&lt;/code&gt; equals to&#10;&#9;&#9;  &lt;code&gt;&quot;cdata-sections-splitted&quot;&lt;/code&gt; and&#10;&#9;&#9;  &lt;code&gt;DOMError.relatedData&lt;/code&gt; equals to the first&#10;&#9;&#9;  &lt;code&gt;CDATASection&lt;/code&gt; node in document order&#10;&#9;&#9;  resulting from the split.&lt;/p&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;]&lt;/p&gt;&#10;                  &lt;p&gt;Signal an error if a &lt;code&gt;CDATASection&lt;/code&gt; contains&#10;                    an unrepresentable character.&lt;/p&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;            &lt;/glist&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;      &lt;gitem&gt;&#10;&#9;&lt;label id=&quot;parameter-validate&quot;&gt;&lt;code&gt;&quot;validate&quot;&lt;/code&gt;&lt;/label&gt;&#10;&#9;&lt;def&gt;&#10;&#9;  &lt;glist&gt;&#10;&#9;    &lt;gitem&gt;&#10;&#9;      &lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;&#9;      &lt;def&gt;&#10;&#9;&#9;&lt;p&gt;[&lt;emph&gt;optional&lt;/emph&gt;]&lt;/p&gt;&#9;&#10;&#9;&#9;&lt;p&gt;&#10;&#9;&#9;  Require the validation against a &lt;termref def=&quot;dt-schema&quot;&gt;schema&lt;/termref&gt; (i.e. XML schema,&#10;&#9;&#9;  DTD, any other type or representation of schema) of&#10;&#9;&#9;  the document as it is being normalized as defined by&#10;&#9;&#9;  &lt;bibref ref=&quot;XML&quot;&gt;&lt;/bibref&gt;. If validation errors are found,&#10;&#9;&#9;  or no schema was found, the error handler is&#10;&#9;&#9;  notified. Schema-normalized values will not be exposed&#10;&#9;&#9;  according to the schema in used unless the parameter&#10;&#9;&#9;  &quot;&lt;termref def=&quot;parameter-datatype-normalization&quot;&gt;datatype-normalization&lt;/termref&gt;&quot;&#10;&#9;&#9;  is &lt;code&gt;true&lt;/code&gt;.&#10;&#9;&#9;&lt;/p&gt;&#10;&#9;&#9;&lt;p&gt;&#10;&#9;&#9;  This parameter will reevaluate:&#10;&#9;&#9;&lt;/p&gt;&#10;&#9;&#9;&lt;ulist&gt;&#10;&#9;&#9;  &lt;item&gt;&#10;&#9;&#9;    &lt;p&gt;&#10;&#9;&#9;      Attribute nodes with &lt;code&gt;Attr.specified&lt;/code&gt;&#10;&#9;&#9;      equals to &lt;code&gt;false&lt;/code&gt;, as specified in the&#10;&#9;&#9;      description of the &lt;code&gt;Attr&lt;/code&gt; interface;&#10;&#9;&#9;    &lt;/p&gt;&#10;&#9;&#9;  &lt;/item&gt;&#10;&#9;&#9;  &lt;item&gt;&#10;&#9;&#9;    &lt;p&gt;&#10;&#9;&#9;      The value of the attribute&#10;&#9;&#9;      &lt;code&gt;Text.isElementContentWhitespace&lt;/code&gt; for&#10;&#9;&#9;      all &lt;code&gt;Text&lt;/code&gt; nodes;&#10;&#9;&#9;    &lt;/p&gt;&#10;&#9;&#9;  &lt;/item&gt;&#10;&#9;&#9;  &lt;item&gt;&#10;&#9;&#9;    &lt;p&gt;&#10;&#9;&#9;      The value of the attribute &lt;code&gt;Attr.isId&lt;/code&gt;&#10;&#9;&#9;      for all &lt;code&gt;Attr&lt;/code&gt; nodes;&#10;&#9;&#9;    &lt;/p&gt;&#10;&#9;&#9;  &lt;/item&gt;&#10;&#9;&#9;  &lt;item&gt;&#10;&#9;&#9;    &lt;p&gt;&#10;&#9;&#9;      The attributes &lt;code&gt;Element.schemaTypeInfo&lt;/code&gt;&#10;&#9;&#9;      and &lt;code&gt;Attr.schemaTypeInfo&lt;/code&gt;.&#10;&#9;&#9;    &lt;/p&gt;&#10;&#9;&#9;  &lt;/item&gt;&#10;&#9;&#9;&lt;/ulist&gt;&#10;&#9;&#9;&lt;note&gt;&#10;&#9;&#9;  &lt;p&gt;&#10;&#9;&#9;    &quot;&lt;termref def=&quot;parameter-validate-if-schema&quot;&gt;validate-if-schema&lt;/termref&gt;&quot;&#10;&#9;&#9;    and &quot;validate&quot; are mutually exclusive,&#10;&#9;&#9;    setting one of them to &lt;code&gt;true&lt;/code&gt; will set&#10;&#9;&#9;    the other one to &lt;code&gt;false&lt;/code&gt;. Applications&#10;&#9;&#9;    should also consider setting the parameter&#10;&#9;&#9;    &quot;&lt;termref def=&quot;parameter-well-formed&quot;&gt;well-formed&lt;/termref&gt;&quot; to &lt;code&gt;true&lt;/code&gt;,&#10;&#9;&#9;    which is the default for that option, when&#10;&#9;&#9;    validating the document.&#10;&#9;&#9;  &lt;/p&gt;&#10;&#9;&#9;&lt;/note&gt;&#10;&#9;      &lt;/def&gt;&#10;&#9;    &lt;/gitem&gt;&#10;&#9;    &lt;gitem&gt;&#10;&#9;      &lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;&#9;      &lt;def&gt;&#10;&#9;&#9;&lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;&#9;&#9;&lt;p&gt;&#10;&#9;&#9;  Do not accomplish schema processing, including the&#10;&#9;&#9;  internal subset processing. Default attribute values&#10;&#9;&#9;  information are kept. Note that validation might still&#10;&#9;&#9;  happen if &quot;&lt;termref def=&quot;parameter-validate-if-schema&quot;&gt;validate-if-schema&lt;/termref&gt;&quot;&#10;&#9;&#9;  is &lt;code&gt;true&lt;/code&gt;.&#10;&#9;&#9;&lt;/p&gt;&#10;&#9;      &lt;/def&gt;&#10;&#9;    &lt;/gitem&gt;&#10;&#9;  &lt;/glist&gt;&#10;&#9;&lt;/def&gt;&#10;      &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label id=&quot;parameter-validate-if-schema&quot;&gt;&lt;code&gt;&quot;validate-if-schema&quot;&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;            &lt;glist&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;optional&lt;/emph&gt;]&lt;/p&gt;&#10;                  &lt;p&gt;Enable validation only if a declaration for the&#10;                  document element can be found in a &lt;termref def=&quot;dt-schema&quot;&gt;schema&lt;/termref&gt; (independently of where&#10;                  it is found, i.e. XML schema, DTD, or any other type&#10;                  or representation of schema). If validation is&#10;                  enabled, this parameter has the same behavior as the&#10;                  parameter &quot;&lt;termref def=&quot;parameter-validate&quot;&gt;validate&lt;/termref&gt;&quot; set to&#10;                  &lt;code&gt;true&lt;/code&gt;.&#10;&#9;&#9;&lt;/p&gt;&#10;&#9;&#9;  &lt;note&gt;&#10;&#9;&#9;    &lt;p&gt;&#10;&#9;&#9;      &quot;validate-if-schema&quot; and&#10;&#9;&#9;      &quot;&lt;termref def=&quot;parameter-validate&quot;&gt;validate&lt;/termref&gt;&quot; are mutually exclusive,&#10;&#9;&#9;      setting one of them to &lt;code&gt;true&lt;/code&gt; will&#10;&#9;&#9;      set the other one to &lt;code&gt;false&lt;/code&gt;.&#10;&#9;&#9;    &lt;/p&gt;&#10;&#9;&#9;  &lt;/note&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;                  &lt;p&gt;&#10;&#9;&#9;  No schema processing should be performed if the&#10;&#9;&#9;  document has a schema, including internal subset&#10;&#9;&#9;  processing. Default attribute values information are&#10;&#9;&#9;  kept. Note that validation must still happen if&#10;&#9;&#9;  &quot;&lt;termref def=&quot;parameter-validate&quot;&gt;validate&lt;/termref&gt;&quot;&#10;&#9;&#9;  is &lt;code&gt;true&lt;/code&gt;.&#10;&#9;&#9;  &lt;/p&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;            &lt;/glist&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;      &lt;gitem&gt;&#10;&#9;&lt;label id=&quot;parameter-well-formed&quot;&gt;&lt;code&gt;&quot;well-formed&quot;&lt;/code&gt;&lt;/label&gt;&#10;&#9;&lt;def&gt;&#10;&#9;  &lt;glist&gt;&#10;&#9;    &lt;gitem&gt;&#10;&#9;      &lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;&#9;      &lt;def&gt;&#10;&#9;&#9;&lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;&#9;&#9;&lt;p&gt;&#10;&#9;&#9;  Check if all nodes are XML &lt;termref def=&quot;dt-well-formed&quot;&gt;well formed&lt;/termref&gt; according&#10;&#9;&#9;  to the XML version in use in&#10;&#9;&#9;  &lt;code&gt;Document.xmlVersion&lt;/code&gt;:&#10;&#9;&#9;&lt;/p&gt;&#10;&#9;&#9;&lt;ulist&gt;&#10;&#9;&#9;  &lt;item&gt;&#10;&#9;&#9;    &lt;p&gt;&#10;&#9;&#9;      check if the attribute &lt;code&gt;Node.nodeName&lt;/code&gt;&#10;&#9;&#9;      contains invalid characters according to its node&#10;&#9;&#9;      type and generate a &lt;code&gt;DOMError&lt;/code&gt; of type&#10;&#9;&#9;      &lt;code&gt;&quot;wf-invalid-character-in-node-name&quot;&lt;/code&gt;,&#10;&#9;&#9;      with a &lt;code&gt;DOMError.SEVERITY_ERROR&lt;/code&gt;&#10;&#9;&#9;      severity, if necessary;&#10;&#9;&#9;    &lt;/p&gt;&#10;&#9;&#9;  &lt;/item&gt;&#10;&#9;&#9;  &lt;item&gt;&#10;&#9;&#9;    &lt;p&gt;&#10;&#9;&#9;      check if the text content inside&#10;&#9;&#9;      &lt;code&gt;Attr&lt;/code&gt;, &lt;code&gt;Element&lt;/code&gt;,&#10;&#9;&#9;      &lt;code&gt;Comment&lt;/code&gt;, &lt;code&gt;Text&lt;/code&gt;,&#10;&#9;&#9;      &lt;code&gt;CDATASection&lt;/code&gt; nodes for invalid&#10;&#9;&#9;      characters and generate a &lt;code&gt;DOMError&lt;/code&gt; of&#10;&#9;&#9;      type &lt;code&gt;&quot;wf-invalid-character&quot;&lt;/code&gt;, with a&#10;&#9;&#9;      &lt;code&gt;DOMError.SEVERITY_ERROR&lt;/code&gt; severity, if&#10;&#9;&#9;      necessary;&#10;&#9;&#9;    &lt;/p&gt;&#10;&#9;&#9;  &lt;/item&gt;&#10;&#9;&#9;  &lt;item&gt;&#10;&#9;&#9;    &lt;p&gt;&#10;&#9;&#9;      check if the data inside&#10;&#9;&#9;      &lt;code&gt;ProcessingInstruction&lt;/code&gt; nodes for&#10;&#9;&#9;      invalid characters and generate a&#10;&#9;&#9;      &lt;code&gt;DOMError&lt;/code&gt; of type&#10;&#9;&#9;      &lt;code&gt;&quot;wf-invalid-character&quot;&lt;/code&gt;, with a&#10;&#9;&#9;      &lt;code&gt;DOMError.SEVERITY_ERROR&lt;/code&gt; severity, if&#10;&#9;&#9;      necessary;&#10;&#9;&#9;    &lt;/p&gt;&#10;&#9;&#9;  &lt;/item&gt;&#10;&#9;&#9;&lt;/ulist&gt;&#10;&#9;      &lt;/def&gt;&#10;&#9;    &lt;/gitem&gt;&#10;&#9;    &lt;gitem&gt;&#10;&#9;      &lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;&#9;      &lt;def&gt;&#10;&#9;&#9;&lt;p&gt;[&lt;emph&gt;optional&lt;/emph&gt;]&lt;/p&gt;&#10;&#9;&#9;&lt;p&gt;&#10;&#9;&#9;  Do not check for XML well-formedness.&#10;&#9;&#9;&lt;/p&gt;&#10;&#9;      &lt;/def&gt;&#10;&#9;    &lt;/gitem&gt;&#10;&#9;  &lt;/glist&gt;&#10;&#9;&lt;/def&gt;&#10;      &lt;/gitem&gt;&#10;    &lt;/glist&gt;&#10;&#10;    &lt;p&gt;&#10;      The resolution of the system identifiers associated with entities&#10;      is done using &lt;code&gt;Document.documentURI&lt;/code&gt;. However, when the&#10;      feature &quot;LS&quot; defined in &lt;bibref role=&quot;informative&quot; ref=&quot;DOMLS&quot;&gt;&lt;/bibref&gt;&#10;      is supported by the DOM implementation, the parameter&#10;      &quot;resource-resolver&quot; can also be used on&#10;      &lt;code&gt;DOMConfiguration&lt;/code&gt; objects attached to&#10;      &lt;code&gt;Document&lt;/code&gt; nodes. If this parameter is set,&#10;      &lt;code&gt;Document.normalizeDocument()&lt;/code&gt; will invoke the resource&#10;      resolver instead of using &lt;code&gt;Document.documentURI&lt;/code&gt;.&#10;    &lt;/p&gt;&#10;&#10;  ">
    <methods>
      <method id="setParameter" name="setParameter" return_type="void" owner_id="DOMConfiguration" description="&#10;      &lt;p&gt;Set the value of a parameter.&lt;/p&gt;&#10;    " return_description="&#10;      ">
        <parameter id="" name="name" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The name of the parameter to set.&lt;/p&gt;&#10;        "/>
        <parameter id="" name="value" type="DOMUserData" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    The new value or &lt;code&gt;null&lt;/code&gt; if the user wishes to&#10;&#9;    unset the parameter. While the type of the value parameter&#10;&#9;    is defined as &lt;code&gt;DOMUserData&lt;/code&gt;, the object type must&#10;&#9;    match the type defined by the definition of the&#10;&#9;    parameter. For example, if the parameter is &lt;termref def=&quot;parameter-error-handler&quot;&gt;&quot;error-handler&quot;&lt;/termref&gt;, the&#10;&#9;    value must be of type &lt;code&gt;DOMErrorHandler&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;        "/>
      </method>
      <method id="getParameter" name="getParameter" return_type="DOMUserData" owner_id="DOMConfiguration" description="&#10;      &lt;p&gt;&#10;&#9;Return the value of a parameter if known.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;&#9;  The current object associated with the specified parameter or&#10;&#9;  &lt;code&gt;null&lt;/code&gt; if no object has been associated or if the&#10;&#9;  parameter is not supported.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="name" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    The name of the parameter.&#10;&#9;  &lt;/p&gt;&#10;        "/>
      </method>
      <method id="canSetParameter" name="canSetParameter" return_type="boolean" owner_id="DOMConfiguration" description="&#10;      &lt;p&gt;Check if setting a parameter to a specific value is supported.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;&#9;  &lt;code&gt;true&lt;/code&gt; if the parameter could be successfully set&#10;&#9;  to the specified value, or &lt;code&gt;false&lt;/code&gt; if the parameter&#10;&#9;  is not recognized or the requested value is not&#10;&#9;  supported. This does not change the current value of the&#10;&#9;  parameter itself.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="name" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;The name of the parameter to check.&lt;/p&gt;&#10;        "/>
        <parameter id="" name="value" type="DOMUserData" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    An object. if &lt;code&gt;null&lt;/code&gt;, the returned value is&#10;&#9;    &lt;code&gt;true&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;        "/>
      </method>
    </methods>
    <properties>
      <property name="parameterNames" id="parameterNames" type="DOMStringList" description="&#10;      &lt;p&gt;&#10;&#9;The list of the parameters supported by this&#10;&#9;&lt;code&gt;DOMConfiguration&lt;/code&gt; object and for which at least one&#10;&#9;value can be set by the application. Note that this list can&#10;&#9;also contain parameter names defined outside this specification.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="DOMConfiguration"/>
    </properties>
  </interface>
  <interface id="StringExtend" name="StringExtend" description="&#10;&#9;  &lt;p&gt;Extensions to a language's native String class or interface&lt;/p&gt;&#10;&#9;">
    <methods>
      <method id="findOffset16" name="findOffset16" return_type="int" owner_id="StringExtend" description="&#10;&#9;    &lt;p&gt;Returns the UTF-16 offset that corresponds to a UTF-32 offset.&#10;&#9;      Used for random access.&lt;/p&gt;&#10;&#9;&#9;&lt;note&gt;&#10;&#9;&#9;  &lt;p&gt;&#10;&#9;&#9;    You can always round-trip from a UTF-32 offset to a UTF-16&#10;&#9;&#9;    offset and back. You can round-trip from a UTF-16 offset to&#10;&#9;&#9;    a UTF-32 offset and back if and only if the offset16 is not&#10;&#9;&#9;    in the middle of a surrogate pair. Unmatched surrogates&#10;&#9;&#9;    count as a single UTF-16 value.&#10;&#9;&#9;  &lt;/p&gt;&#10;&#9;&#9;&lt;/note&gt;&#10;&#9;  " return_description="&#10;&#9;      &lt;p&gt;UTF-16 offset&lt;/p&gt;&#10;&#9;    ">
        <parameter id="" name="offset32" type="int" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;&#10;&#9;&#9;  UTF-32 offset. &#10;&#9;&#9;&lt;/p&gt;&#10;&#9;      "/>
      </method>
      <method id="findOffset32" name="findOffset32" return_type="int" owner_id="StringExtend" description="&#10;&#9;    &lt;p&gt;&#10;&#9;      Returns the UTF-32 offset corresponding to a UTF-16 offset. Used&#10;&#9;      for random access. To find the UTF-32 length of a string, use:&#10;&#9;      &lt;eg xml:space=&quot;preserve&quot;&gt;len32 = findOffset32(source, source.length());&lt;/eg&gt;&#10;&#9;    &lt;/p&gt;&#10;&#9;    &lt;note&gt;&#10;&#9;      &lt;p&gt;&#10;&#9;&#9;If the UTF-16 offset is into the middle of a surrogate pair,&#10;&#9;&#9;then the UTF-32 offset of the &lt;emph&gt;end&lt;/emph&gt; of the pair is&#10;&#9;&#9;returned; that is, the index of the char after the end of the&#10;&#9;&#9;pair. You can always round-trip from a UTF-32 offset to a UTF-16&#10;&#9;&#9;offset and back. You can round-trip from a UTF-16 offset to a&#10;&#9;&#9;UTF-32 offset and back if and only if the offset16 is not in&#10;&#9;&#9;the middle of a surrogate pair. Unmatched surrogates count as a&#10;&#9;&#9;single UTF-16 value.&#10;&#9;      &lt;/p&gt;&#10;&#9;    &lt;/note&gt;&#10;&#9;  " return_description="&#10;&#9;      &lt;p&gt;UTF-32 offset&lt;/p&gt;&#10;&#9;    ">
        <parameter id="" name="offset16" type="int" owner_id="" description="&#10;&#9;&#9;&lt;p&gt;UTF-16 offset&lt;/p&gt;&#10;&#9;      "/>
      </method>
    </methods>
    <properties/>
  </interface>
  <interface id="Event" name="Event" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;Event&lt;/code&gt; interface is used to provide contextual&#10;      information about an event to the listener processing the event.&#10;      An object which implements the &lt;code&gt;Event&lt;/code&gt; interface is&#10;      passed as the parameter to an &lt;code&gt;EventListener&lt;/code&gt;.  More&#10;      specific context information is passed to event listeners by&#10;      deriving additional interfaces from &lt;code&gt;Event&lt;/code&gt; which&#10;      contain information directly relating to the type of event they&#10;      represent. These derived interfaces are also implemented by the&#10;      object passed to the event listener.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      To create an instance of the &lt;code&gt;Event&lt;/code&gt; interface, use&#10;      the &lt;code&gt;DocumentEvent.createEvent(&quot;Event&quot;)&lt;/code&gt; method call.&#10;    &lt;/p&gt;&#10;  ">
    <methods>
      <method id="stopPropagation" name="stopPropagation" return_type="void" owner_id="Event" description="&#10;      &lt;p&gt;&#10;&#9;This method is used to prevent event listeners of the same group&#10;&#9;to be triggered but its effect is deferred until all event&#10;&#9;listeners attached on the &lt;code&gt;currentTarget&lt;/code&gt; have been&#10;&#9;triggered (see &lt;specref ref=&quot;Events-propagation-and-groups&quot;&gt;&lt;/specref&gt;). Once it has been called,&#10;&#9;further calls to that method have no additional effect.&#10;      &lt;/p&gt;&#10;      &lt;note&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  This method does not prevent the default action from being&#10;&#9;  invoked; use &lt;code&gt;preventDefault&lt;/code&gt; for that effect.&#10;&#9;&lt;/p&gt;&#10;      &lt;/note&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;"/>
      <method id="preventDefault" name="preventDefault" return_type="void" owner_id="Event" description="&#10;      &lt;p&gt;&#10;&#9;If an event is cancelable, the &lt;code&gt;preventDefault&lt;/code&gt;&#10;&#9;method is used to signify that the event is to be canceled,&#10;&#9;meaning any default action normally taken by the implementation&#10;&#9;as a result of the event will not occur (see also &lt;specref ref=&quot;Events-flow-cancelation&quot;&gt;&lt;/specref&gt;), and thus independently of&#10;&#9;event groups. Calling this method for a non-cancelable event has&#10;&#9;no effect.&#10;      &lt;/p&gt;&#10;      &lt;note&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  This method does not stop the event propagation; use&#10;&#9;  &lt;code&gt;stopPropagation&lt;/code&gt; or&#10;&#9;  &lt;code&gt;stopImmediatePropagation&lt;/code&gt; for that effect.&#10;&#9;&lt;/p&gt;&#10;      &lt;/note&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;"/>
      <method id="initEvent" name="initEvent" return_type="void" owner_id="Event" description="&#10;      &lt;p&gt;&#10;&#9;The &lt;code&gt;initEvent&lt;/code&gt; method is used to initialize the&#10;&#9;value of an &lt;code&gt;Event&lt;/code&gt; created through the&#10;&#9;&lt;code&gt;DocumentEvent.createEvent&lt;/code&gt; method. This method may&#10;&#9;only be called before the &lt;code&gt;Event&lt;/code&gt; has been dispatched&#10;&#9;via the &lt;code&gt;EventTarget.dispatchEvent()&lt;/code&gt; method. If the&#10;&#9;method is called several times before invoking&#10;&#9;&lt;code&gt;EventTarget.dispatchEvent&lt;/code&gt;, only the final&#10;&#9;invocation takes precedence. This method has no effect if called&#10;&#9;after the event has been dispatched. If called from a subclass&#10;&#9;of the &lt;code&gt;Event&lt;/code&gt; interface only the values specified in&#10;&#9;this method are modified, all other attributes are left&#10;&#9;unchanged.&#10;      &lt;/p&gt;&#10;      &lt;p&gt;&#10;&#9;This method sets the &lt;code&gt;Event.type&lt;/code&gt; attribute to&#10;&#9;&lt;code&gt;eventTypeArg&lt;/code&gt;, and &lt;code&gt;Event.namespaceURI&lt;/code&gt;&#10;&#9;to &lt;code&gt;null&lt;/code&gt;. To initialize an event with a namespace&#10;&#9;URI, use the &lt;code&gt;Event.initEventNS(namespaceURIArg, eventTypeArg,&#10;&#9;...)&lt;/code&gt; method.&#10;      &lt;/p&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;&#10;      ">
        <parameter id="" name="eventTypeArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;Event.type&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="canBubbleArg" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;Event.bubbles&lt;/code&gt;. This parameter&#10;&#9;    overrides the intrinsic bubbling behavior of the event.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="cancelableArg" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;Event.cancelable&lt;/code&gt;. This parameter&#10;&#9;    overrides the intrinsic cancelable behavior of the event.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="isCustom" name="isCustom" return_type="boolean" owner_id="Event" description="&#10;      &lt;p&gt;&#10;&#9;This method will always return &lt;code&gt;false&lt;/code&gt;, unless the&#10;&#9;event implements the &lt;code&gt;CustomEvent&lt;/code&gt; interface.&#10;      &lt;/p&gt;&#10;     " return_description="&#10;&#9;&lt;p&gt;&#10;&#9;  &lt;code&gt;false&lt;/code&gt;, unless the event object implements the&#10;&#9;  &lt;code&gt;CustomEvent&lt;/code&gt; interface.&#10;&#9;&lt;/p&gt;&#10;      "/>
      <method id="stopImmediatePropagation" name="stopImmediatePropagation" return_type="void" owner_id="Event" description="&#10;      &lt;p&gt;&#10;&#9;This method is used to prevent event listeners of the same group&#10;&#9;to be triggered and, unlike &lt;code&gt;stopPropagation&lt;/code&gt; its&#10;&#9;effect is immediate (see &lt;specref ref=&quot;Events-propagation-and-groups&quot;&gt;&lt;/specref&gt;). Once it has been called,&#10;&#9;further calls to that method have no additional effect.&#10;      &lt;/p&gt;&#10;      &lt;note&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  This method does not prevent the default action from being&#10;&#9;  invoked; use &lt;code&gt;Event.preventDefault()&lt;/code&gt; for that effect.&#10;&#9;&lt;/p&gt;&#10;      &lt;/note&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;"/>
      <method id="isDefaultPrevented" name="isDefaultPrevented" return_type="boolean" owner_id="Event" description="&#10;      &lt;p&gt;&#10;&#9;This method will return &lt;code&gt;true&lt;/code&gt; if the method&#10;&#9;&lt;code&gt;Event.preventDefault()&lt;/code&gt; has been called for this&#10;&#9;event, &lt;code&gt;false&lt;/code&gt; otherwise.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;&#10;&#9;  &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;Event.preventDefault()&lt;/code&gt; has&#10;&#9;  been called for this event.&#10;&#9;&lt;/p&gt;&#10;      "/>
      <method id="initEventNS" name="initEventNS" return_type="void" owner_id="Event" description="&#10;      &lt;p&gt;&#10;&#9;The &lt;code&gt;initEventNS&lt;/code&gt; method is used to initialize the&#10;&#9;value of an &lt;code&gt;Event&lt;/code&gt; object and has the same behavior&#10;&#9;as &lt;code&gt;Event.initEvent()&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="namespaceURIArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;Event.namespaceuRI&lt;/code&gt;, the &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt; associated&#10;&#9;    with this event, or &lt;code&gt;null&lt;/code&gt; if no namespace.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="eventTypeArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;Event.type&lt;/code&gt;, the &lt;termref def=&quot;dt-localname&quot;&gt;local name&lt;/termref&gt; of the event&#10;&#9;    type.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="canBubbleArg" type="boolean" owner_id="" description="&lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;Event.initEvent()&lt;/code&gt; method for&#10;&#9;    a description of this parameter.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="cancelableArg" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;Event.initEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
    </methods>
    <properties>
      <property name="type" id="type" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;The name should be an &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-NCName&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;NCName&lt;/loc&gt;&#10;&#9;as defined in &lt;bibref ref=&quot;Namespaces&quot;&gt;&lt;/bibref&gt; and is&#10;&#9;case-sensitive.&#10;      &lt;/p&gt;&#10;      &lt;p&gt;&#10;&#9;If the attribute &lt;code&gt;Event.namespaceURI&lt;/code&gt; is different&#10;&#9;from &lt;code&gt;null&lt;/code&gt;, this attribute represents a &lt;termref def=&quot;dt-localname&quot;&gt;local name&lt;/termref&gt;.&#10;      &lt;/p&gt;&#10;     " readonly="true" owner_id="Event"/>
      <property name="target" id="target" type="EventTarget" description="&#10;      &lt;p&gt;&#10;&#9;Used to indicate the &lt;termref def=&quot;dt-event-target&quot;&gt;event&#10;&#9;target&lt;/termref&gt;. This attribute contains the &lt;termref def=&quot;dt-target-node&quot;&gt;target node&lt;/termref&gt; when used with the&#10;&#9;&lt;specref ref=&quot;Events-flow&quot;&gt;&lt;/specref&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="Event"/>
      <property name="currentTarget" id="currentTarget" type="EventTarget" description="&#10;      &lt;p&gt;&#10;&#9;Used to indicate the &lt;code&gt;EventTarget&lt;/code&gt; whose&#10;&#9;&lt;code&gt;EventListeners&lt;/code&gt; are currently being processed. This&#10;&#9;is particularly useful during the capture and bubbling&#10;&#9;phases. This attribute could contain the &lt;termref def=&quot;dt-target-node&quot;&gt;target node&lt;/termref&gt; or a target ancestor&#10;&#9;when used with the &lt;specref ref=&quot;Events-flow&quot;&gt;&lt;/specref&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="Event"/>
      <property name="eventPhase" id="eventPhase" type="unsigned short" description="&#10;      &lt;p&gt;&#10;&#9;Used to indicate which phase of event flow is currently being&#10;&#9;accomplished.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="Event"/>
      <property name="bubbles" id="bubbles" type="boolean" description="&#10;      &lt;p&gt;&#10;&#9;Used to indicate whether or not an event is a bubbling event.&#10;&#9;If the event can bubble the value is &lt;code&gt;true&lt;/code&gt;,&#10;&#9;otherwise the value is &lt;code&gt;false&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="Event"/>
      <property name="cancelable" id="cancelable" type="boolean" description="&#10;      &lt;p&gt;&#10;&#9;Used to indicate whether or not an event can have its default&#10;&#9;action prevented (see also &lt;specref ref=&quot;Events-flow-cancelation&quot;&gt;&lt;/specref&gt;). If the default action can be&#10;&#9;prevented the value is &lt;code&gt;true&lt;/code&gt;, otherwise the value is&#10;&#9;&lt;code&gt;false&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="Event"/>
      <property name="timeStamp" id="timeStamp" type="DOMTimeStamp" description="&#10;      &lt;p&gt;&#10;&#9;Used to specify the time (in milliseconds relative to the epoch)&#10;&#9;at which the event was created. Due to the fact that some&#10;&#9;systems may not provide this information the value of&#10;&#9;&lt;code&gt;timeStamp&lt;/code&gt; may be not available for all events. When&#10;&#9;not available, a value of &lt;code&gt;0&lt;/code&gt; will be&#10;&#9;returned. Examples of epoch time are the time of the system&#10;&#9;start or 0:0:0 UTC 1st January 1970.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="Event"/>
      <property name="namespaceURI" id="namespaceURI" type="DOMString" description="     &#10;      &lt;p&gt;&#10;&#9;The &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt;&#10;&#9;associated with this event at creation time, or&#10;&#9;&lt;code&gt;null&lt;/code&gt; if it is unspecified.&#10;      &lt;/p&gt;&#10;      &lt;p&gt;&#10;&#9;For events initialized with a DOM Level 2 Events method, such as&#10;&#9;&lt;code&gt;Event.initEvent()&lt;/code&gt;, this is always &lt;code&gt;null&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="Event"/>
    </properties>
  </interface>
  <interface id="EventTarget" name="EventTarget" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;EventTarget&lt;/code&gt; interface is implemented by all the&#10;      objects which could be &lt;termref def=&quot;dt-event-target&quot;&gt;event&#10;      targets&lt;/termref&gt; in an implementation which supports the &lt;specref ref=&quot;Events-flows&quot;&gt;&lt;/specref&gt;. The interface allows registration, removal&#10;      or query of event listeners, and dispatch of events to an event&#10;      target.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      When used with &lt;specref ref=&quot;Events-flow&quot;&gt;&lt;/specref&gt;, this interface is&#10;      implemented by all &lt;termref def=&quot;dt-target-node&quot;&gt;target&#10;      nodes&lt;/termref&gt; and target ancestors, i.e. all DOM&#10;      &lt;code&gt;Nodes&lt;/code&gt; of the tree support this interface when the&#10;      implementation conforms to DOM Level 3 Events and, therefore, this&#10;      interface can be obtained by using binding-specific casting&#10;      methods on an instance of the &lt;code&gt;Node&lt;/code&gt; interface.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      Invoking &lt;code&gt;addEventListener&lt;/code&gt; or&#10;      &lt;code&gt;addEventListenerNS&lt;/code&gt; multiple times on the same&#10;      &lt;code&gt;EventTarget&lt;/code&gt; with the same parameters&#10;      (&lt;code&gt;namespaceURI&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;,&#10;      &lt;code&gt;listener&lt;/code&gt;, and &lt;code&gt;useCapture&lt;/code&gt;) is considered&#10;      to be a no-op and thus independently of the event group. They do&#10;      not cause the &lt;code&gt;EventListener&lt;/code&gt; to be called more than&#10;      once and do not cause a change in the triggering order. In order&#10;      to guarantee that an event listener will be added to the event&#10;      target for the specified event group, one needs to invoke&#10;      &lt;code&gt;removeEventListener&lt;/code&gt; or&#10;      &lt;code&gt;removeEventListenerNS&lt;/code&gt; first.&#10;     &lt;/p&gt;&#10;    ">
    <methods>
      <method id="addEventListener" name="addEventListener" return_type="void" owner_id="EventTarget" description="&#10;      &lt;p&gt;&#10;&#9;This method allows the registration of an event listener in the&#10;&#9;default group and, depending on the &lt;code&gt;useCapture&lt;/code&gt;&#10;&#9;parameter, on the capture phase of the DOM event flow or its&#10;&#9;target and bubbling phases.&#10;      &lt;/p&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="type" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies the &lt;code&gt;Event.type&lt;/code&gt; associated with the&#10;&#9;    event for which the user is registering.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="listener" type="EventListener" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The &lt;code&gt;listener&lt;/code&gt; parameter takes an object&#10;&#9;    implemented by the user which implements the&#10;&#9;    &lt;code&gt;EventListener&lt;/code&gt; interface and contains the method&#10;&#9;    to be called when the event occurs.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="useCapture" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    If true, &lt;code&gt;useCapture&lt;/code&gt; indicates that the user&#10;&#9;    wishes to add the event listener for the &lt;termref def=&quot;dt-capture-phase&quot;&gt;capture phase&lt;/termref&gt; only,&#10;&#9;    i.e. this event listener will not be triggered during the&#10;&#9;    &lt;termref def=&quot;dt-target-phase&quot;&gt;target&lt;/termref&gt; and &lt;termref def=&quot;dt-bubbling-phase&quot;&gt;bubbling&lt;/termref&gt; phases. If&#10;&#9;    &lt;code&gt;false&lt;/code&gt;, the event listener will only be&#10;&#9;    triggered during the target and bubbling phases.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="removeEventListener" name="removeEventListener" return_type="void" owner_id="EventTarget" description="&#10;      &lt;p&gt;&#10;&#9;This method allows the removal of event listeners from the&#10;&#9;default group.&#10;      &lt;/p&gt;&#10;      &lt;p&gt;&#10;&#9;Calling &lt;code&gt;removeEventListener&lt;/code&gt; with arguments which do&#10;&#9;not identify any currently registered &lt;code&gt;EventListener&lt;/code&gt;&#10;&#9;on the &lt;code&gt;EventTarget&lt;/code&gt; has no effect.&#10;      &lt;/p&gt;&#10;     " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="type" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies the &lt;code&gt;Event.type&lt;/code&gt; for which the user&#10;&#9;    registered the event listener.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="listener" type="EventListener" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The &lt;code&gt;EventListener&lt;/code&gt; to be removed.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="useCapture" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies whether the &lt;code&gt;EventListener&lt;/code&gt; being&#10;&#9;    removed was registered for the capture phase or not.  If a&#10;&#9;    listener was registered twice, once for the capture phase&#10;&#9;    and once for the target and bubbling phases, each must be&#10;&#9;    removed separately. Removal of an event listener registered&#10;&#9;    for the capture phase does not affect the same event&#10;&#9;    listener registered for the target and bubbling phases, and&#10;&#9;    vice versa.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="dispatchEvent" name="dispatchEvent" return_type="boolean" owner_id="EventTarget" description="&#10;     &lt;p&gt;&#10;&#9;This method allows the dispatch of events into the&#10;&#9;implementation's event model. The &lt;termref def=&quot;dt-event-target&quot;&gt;event target&lt;/termref&gt; of the event is the&#10;&#9;&lt;code&gt;EventTarget&lt;/code&gt; object on which&#10;&#9;&lt;code&gt;dispatchEvent&lt;/code&gt; is called.&#10;     &lt;/p&gt;&#10;     " return_description="&#10;&#9;&lt;p&gt;&#10;&#9;  Indicates whether any of the listeners which handled the event&#10;&#9;  called &lt;code&gt;Event.preventDefault()&lt;/code&gt;. If&#10;&#9;  &lt;code&gt;Event.preventDefault()&lt;/code&gt; was called the returned value is&#10;&#9;  &lt;code&gt;false&lt;/code&gt;, else it is &lt;code&gt;true&lt;/code&gt;.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="evt" type="Event" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The event to be dispatched.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="addEventListenerNS" name="addEventListenerNS" return_type="void" owner_id="EventTarget" description="&#10;     &lt;p&gt;&#10;&#9;This method allows the registration of an event listener in a&#10;&#9;specified group or the default group and, depending on the&#10;&#9;&lt;code&gt;useCapture&lt;/code&gt; parameter, on the capture phase of the&#10;&#9;DOM event flow or its target and bubbling phases.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;      ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies the &lt;code&gt;Event.namespaceURI&lt;/code&gt; associated&#10;&#9;    with the event for which the user is registering.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="type" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies the &lt;code&gt;Event.type&lt;/code&gt; associated&#10;&#9;    with the event for which the user is registering.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="listener" type="EventListener" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The &lt;code&gt;listener&lt;/code&gt; parameter takes an object&#10;&#9;    implemented by the user which implements the&#10;&#9;    &lt;code&gt;EventListener&lt;/code&gt; interface and contains the method&#10;&#9;    to be called when the event occurs.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="useCapture" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    If true, &lt;code&gt;useCapture&lt;/code&gt; indicates that the user&#10;&#9;    wishes to add the event listener for the &lt;termref def=&quot;dt-capture-phase&quot;&gt;capture phase&lt;/termref&gt; only,&#10;&#9;    i.e. this event listener will not be triggered during the&#10;&#9;    &lt;termref def=&quot;dt-target-phase&quot;&gt;target&lt;/termref&gt; and &lt;termref def=&quot;dt-bubbling-phase&quot;&gt;bubbling&lt;/termref&gt; phases. If&#10;&#9;    &lt;code&gt;false&lt;/code&gt;, the event listener will only be&#10;&#9;    triggered during the target and bubbling phases.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="evtGroup" type="DOMObject" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The object that represents the event group to associate with&#10;&#9;    the &lt;code&gt;EventListener&lt;/code&gt; (see also &lt;specref ref=&quot;Events-propagation-and-groups&quot;&gt;&lt;/specref&gt;). Use&#10;&#9;    &lt;code&gt;null&lt;/code&gt; to attach the event listener to the&#10;&#9;    default group.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="removeEventListenerNS" name="removeEventListenerNS" return_type="void" owner_id="EventTarget" description="&#10;      &lt;p&gt;&#10;&#9;This method allows the removal of an event listener,&#10;&#9;independently of the associated event group.&#10;      &lt;/p&gt;&#10;      &lt;p&gt;&#10;&#9;Calling &lt;code&gt;removeEventListenerNS&lt;/code&gt; with arguments which&#10;&#9;do not identify any currently registered&#10;&#9;&lt;code&gt;EventListener&lt;/code&gt; on the &lt;code&gt;EventTarget&lt;/code&gt; has&#10;&#9;no effect.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;&#10;      ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies the &lt;code&gt;Event.namespaceURI&lt;/code&gt; associated&#10;&#9;    with the event for which the user registered the event&#10;&#9;    listener.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="type" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies the &lt;code&gt;Event.type&lt;/code&gt; associated with the&#10;&#9;    event for which the user registered the event listener.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="listener" type="EventListener" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The &lt;code&gt;EventListener&lt;/code&gt; parameter indicates the&#10;&#9;    &lt;code&gt;EventListener&lt;/code&gt; to be removed.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="useCapture" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies whether the &lt;code&gt;EventListener&lt;/code&gt; being&#10;&#9;    removed was registered for the capture phase or not.  If a&#10;&#9;    listener was registered twice, once for the capture phase&#10;&#9;    and once for the target and bubbling phases, each must be&#10;&#9;    removed separately. Removal of an event listener registered&#10;&#9;    for the capture phase does not affect the same event&#10;&#9;    listener registered for the target and bubbling phases, and&#10;&#9;    vice versa.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="willTriggerNS" name="willTriggerNS" return_type="boolean" owner_id="EventTarget" description="&#10;      &lt;p&gt;&#10;&#9;This method allows the DOM application to know if an event&#10;&#9;listener, attached to this &lt;code&gt;EventTarget&lt;/code&gt; or one of&#10;&#9;its ancestors, will be triggered by the specified event type&#10;&#9;during the dispatch of the event to this event target or one of&#10;&#9;its descendants.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;&#10;&#9;  &lt;code&gt;true&lt;/code&gt; if an event listener will be triggered on&#10;&#9;  the &lt;code&gt;EventTarget&lt;/code&gt; with the specified event type,&#10;&#9;  &lt;code&gt;false&lt;/code&gt; otherwise.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies the &lt;code&gt;Event.namespaceURI&lt;/code&gt; associated&#10;&#9;    with the event.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="type" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies the &lt;code&gt;Event.type&lt;/code&gt; associated with the&#10;&#9;    event.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="hasEventListenerNS" name="hasEventListenerNS" return_type="boolean" owner_id="EventTarget" description="&#10;      &lt;p&gt;&#10;&#9;This method allows the DOM application to know if this&#10;&#9;&lt;code&gt;EventTarget&lt;/code&gt; contains an event listener registered&#10;&#9;for the specified event type.  This is useful for determining at&#10;&#9;which nodes within a hierarchy altered handling of specific&#10;&#9;event types has been introduced, but should not be used to&#10;&#9;determine whether the specified event type triggers an event&#10;&#9;listener (see &lt;code&gt;EventTarget.willTriggerNS()&lt;/code&gt;).&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;&#10;&#9;  &lt;code&gt;true&lt;/code&gt; if an event listener is registered on this&#10;&#9;  &lt;code&gt;EventTarget&lt;/code&gt; for the specified event type,&#10;&#9;  &lt;code&gt;false&lt;/code&gt; otherwise.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies the &lt;code&gt;Event.namespaceURI&lt;/code&gt; associated&#10;&#9;    with the event.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="type" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies the &lt;code&gt;Event.type&lt;/code&gt; associated&#10;&#9;    with the event.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
    </methods>
    <properties/>
  </interface>
  <interface id="EventListener" name="EventListener" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;EventListener&lt;/code&gt; interface is the primary way for&#10;      handling events. Users implement the &lt;code&gt;EventListener&lt;/code&gt;&#10;      interface and register their event listener on an&#10;      &lt;code&gt;EventTarget&lt;/code&gt;. The users should also remove their&#10;      &lt;code&gt;EventListener&lt;/code&gt; from its &lt;code&gt;EventTarget&lt;/code&gt; after&#10;      they have completed using the listener.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      Copying a &lt;code&gt;Node&lt;/code&gt;, with methods such as&#10;      &lt;code&gt;Node.cloneNode&lt;/code&gt; or &lt;code&gt;Range.cloneContents&lt;/code&gt;,&#10;      does not copy the event listeners attached to it.  Event listeners&#10;      must be attached to the newly created &lt;code&gt;Node&lt;/code&gt; afterwards&#10;      if so desired.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      Moving a &lt;code&gt;Node&lt;/code&gt;, with methods&#10;      &lt;code&gt;Document.adoptNode&lt;/code&gt;, &lt;code&gt;Node.appendChild&lt;/code&gt;, or&#10;      &lt;code&gt;Range.extractContents&lt;/code&gt;, does not affect the event&#10;      listeners attached to it.&#10;    &lt;/p&gt;&#10;  ">
    <methods>
      <method id="handleEvent" name="handleEvent" return_type="void" owner_id="EventListener" description="&#10;      &lt;p&gt;&#10;&#9;This method is called whenever an event occurs of the event type&#10;&#9;for which the &lt;code&gt;EventListener&lt;/code&gt; interface was&#10;&#9;registered.&#10;      &lt;/p&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="evt" type="Event" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The &lt;code&gt;Event&lt;/code&gt; contains contextual information about&#10;&#9;    the &lt;termref def=&quot;dt-event&quot;&gt;event&lt;/termref&gt;.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
    </methods>
    <properties/>
  </interface>
  <interface id="DocumentEvent" name="DocumentEvent" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;DocumentEvent&lt;/code&gt; interface provides a mechanism by&#10;      which the user can create an &lt;code&gt;Event&lt;/code&gt; object of a type&#10;      supported by the implementation. If the feature &quot;Events&quot; is&#10;      supported by the &lt;code&gt;Document&lt;/code&gt; object, the&#10;      &lt;code&gt;DocumentEvent&lt;/code&gt; interface must be implemented on the&#10;      same object. If the feature &quot;+Events&quot; is supported by the&#10;      &lt;code&gt;Document&lt;/code&gt; object, an object that supports the&#10;      &lt;code&gt;DocumentEvent&lt;/code&gt; interface must be returned by invoking&#10;      the method &lt;code&gt;Node.getFeature(&quot;+Events&quot;, &quot;3.0&quot;)&lt;/code&gt; on the&#10;      &lt;code&gt;Document&lt;/code&gt; object.&#10;    &lt;/p&gt;&#10;  ">
    <methods>
      <method id="createEvent" name="createEvent" return_type="Event" owner_id="DocumentEvent" description="&#10;     &lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;&#10;     " return_description="&#10;&#9;&lt;p&gt;&#10;&#9;  The newly created event object.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="eventType" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The &lt;code&gt;eventType&lt;/code&gt; parameter specifies the name of&#10;&#9;    the DOM Events interface to be supported by the created&#10;&#9;    event object, e.g. &lt;code&gt;&quot;Event&quot;&lt;/code&gt;,&#10;&#9;    &lt;code&gt;&quot;MouseEvent&quot;&lt;/code&gt;, &lt;code&gt;&quot;MutationEvent&quot;&lt;/code&gt;&#10;&#9;    and so on. If the &lt;code&gt;Event&lt;/code&gt; is to be dispatched via the&#10;&#9;    &lt;code&gt;EventTarget.dispatchEvent()&lt;/code&gt; method the&#10;&#9;    appropriate event init method must be called after creation&#10;&#9;    in order to initialize the &lt;code&gt;Event&lt;/code&gt;'s values.&#10;&#9;  &lt;/p&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    As an example, a user wishing to synthesize some kind of&#10;&#9;    &lt;code&gt;UIEvent&lt;/code&gt; would invoke&#10;&#9;    &lt;code&gt;DocumentEvent.createEvent(&quot;UIEvent&quot;)&lt;/code&gt;.  The&#10;&#9;    &lt;code&gt;UIEvent.initUIEventNS()&lt;/code&gt; method could then be&#10;&#9;    called on the newly created &lt;code&gt;UIEvent&lt;/code&gt; object to&#10;&#9;    set the specific type of user interface event to be&#10;&#9;    dispatched, &lt;code&gt;{&quot;http://www.w3.org/2001/xml-events&quot;, &quot;DOMActivate&quot;}&lt;/code&gt;&#10;&#9;    for example, and set its context information,&#10;&#9;    e.g. &lt;code&gt;UIEvent.detail&lt;/code&gt; in this example.&#10;&#9;  &lt;/p&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    The &lt;code&gt;createEvent&lt;/code&gt; method is used in creating&#10;&#9;    &lt;code&gt;Event&lt;/code&gt;s when it is either inconvenient or&#10;&#9;    unnecessary for the user to create an &lt;code&gt;Event&lt;/code&gt;&#10;&#9;    themselves.  In cases where the implementation provided&#10;&#9;    &lt;code&gt;Event&lt;/code&gt; is insufficient, users may supply their&#10;&#9;    own &lt;code&gt;Event&lt;/code&gt; implementations for use with the&#10;&#9;    &lt;code&gt;EventTarget.dispatchEvent()&lt;/code&gt; method. However, the&#10;&#9;    DOM implementation needs access to the attributes&#10;&#9;    &lt;code&gt;Event.currentTarget&lt;/code&gt; and&#10;&#9;    &lt;code&gt;Event.eventPhase&lt;/code&gt; to appropriately propagate the&#10;&#9;    event in the DOM tree. Therefore users' &lt;code&gt;Event&lt;/code&gt;&#10;&#9;    implementations might need to support the&#10;&#9;    &lt;code&gt;CustomEvent&lt;/code&gt; interface for that effect.&#10;&#9;  &lt;/p&gt;&#10;&#9;  &lt;note&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      For backward compatibility reason, &quot;UIEvents&quot;,&#10;&#9;      &quot;MouseEvents&quot;, &quot;MutationEvents&quot;, and &quot;HTMLEvents&quot; feature&#10;&#9;      names are valid values for the parameter&#10;&#9;      &lt;code&gt;eventType&lt;/code&gt; and represent respectively the&#10;&#9;      interfaces &quot;UIEvent&quot;, &quot;MouseEvent&quot;, &quot;MutationEvent&quot;, and&#10;&#9;      &quot;Event&quot;.&#10;&#9;    &lt;/p&gt;&#10;&#9;  &lt;/note&gt;&#10;      "/>
      </method>
      <method id="canDispatch" name="canDispatch" return_type="boolean" owner_id="DocumentEvent" description="&#10;      &lt;p&gt;&#10;&#9;Test if the implementation can generate events of a specified&#10;&#9;type.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;&#10;&#9;  &lt;code&gt;true&lt;/code&gt; if the implementation can generate and&#10;&#9;  dispatch this event type, &lt;code&gt;false&lt;/code&gt; otherwise.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;&#10;            Specifies the &lt;code&gt;Event.namespaceURI&lt;/code&gt; of the event.&#10;          &lt;/p&gt;&#10;        "/>
        <parameter id="" name="type" type="DOMString" owner_id="" description="&#10;          &lt;p&gt;&#10;            Specifies the &lt;code&gt;Event.type&lt;/code&gt; of the event.&#10;          &lt;/p&gt;&#10;        "/>
      </method>
    </methods>
    <properties/>
  </interface>
  <interface id="CustomEvent" name="CustomEvent" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;CustomEvent&lt;/code&gt; interface gives access to the&#10;      attributes &lt;code&gt;Event.currentTarget&lt;/code&gt; and&#10;      &lt;code&gt;Event.eventPhase&lt;/code&gt;. It is intended to be used by the&#10;      DOM Events implementation to access the underlying current target&#10;      and event phase while dispatching a custom &lt;code&gt;Event&lt;/code&gt; in&#10;      the tree; it is also intended to be implemented, and &lt;emph&gt;not&#10;      used&lt;/emph&gt;, by DOM applications.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      The methods contained in this interface are not intended to be&#10;      used by a DOM application, especially during the dispatch on the&#10;      &lt;code&gt;Event&lt;/code&gt; object. Changing the current target or the&#10;      current phase may result in unpredictable results of the event&#10;      flow. The DOM Events implementation should ensure that both&#10;      methods return the appropriate current target and phase before&#10;      invoking each event listener on the current target to protect DOM&#10;      applications from malicious event listeners.&#10;    &lt;/p&gt;&#10;    &lt;note&gt;&#10;      &lt;p&gt;&#10;&#9;If this interface is supported by the event object,&#10;&#9;&lt;code&gt;Event.isCustom()&lt;/code&gt; must return &lt;code&gt;true&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    &lt;/note&gt;&#10;  " parent_id="Event">
    <methods>
      <method id="setDispatchState" name="setDispatchState" return_type="void" owner_id="CustomEvent" description="&#10;      &lt;p&gt;&#10;&#9;The &lt;code&gt;setDispatchState&lt;/code&gt; method is used by the DOM&#10;&#9;Events implementation to set the values of&#10;&#9;&lt;code&gt;Event.currentTarget&lt;/code&gt; and&#10;&#9;&lt;code&gt;Event.eventPhase&lt;/code&gt;. It also reset the states of&#10;&#9;&lt;code&gt;isPropagationStopped&lt;/code&gt; and&#10;&#9;&lt;code&gt;isImmediatePropagationStopped&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;      ">
        <parameter id="" name="target" type="EventTarget" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies the new value for the&#10;&#9;    &lt;code&gt;Event.currentTarget&lt;/code&gt; attribute.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="phase" type="unsigned short" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies the new value for the&#10;&#9;    &lt;code&gt;Event.eventPhase&lt;/code&gt; attribute.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="isPropagationStopped" name="isPropagationStopped" return_type="boolean" owner_id="CustomEvent" description="&#10;      &lt;p&gt;&#10;&#9;This method will return &lt;code&gt;true&lt;/code&gt; if the method&#10;&#9;&lt;code&gt;stopPropagation()&lt;/code&gt; has been called for this event,&#10;&#9;&lt;code&gt;false&lt;/code&gt; in any other cases.&#10;      &lt;/p&gt;&#10;     " return_description="&#10;&#9;&lt;p&gt;&#10;&#9;  &lt;code&gt;true&lt;/code&gt; if the event propagation has been stopped&#10;&#9;  in the current group.&#10;&#9;&lt;/p&gt;&#10;      "/>
      <method id="isImmediatePropagationStopped" name="isImmediatePropagationStopped" return_type="boolean" owner_id="CustomEvent" description="&#10;      &lt;p&gt;&#10;&#9;The &lt;code&gt;isImmediatePropagationStopped&lt;/code&gt; method is used by&#10;&#9;the DOM Events implementation to know if the method&#10;&#9;&lt;code&gt;stopImmediatePropagation()&lt;/code&gt; has been called for this&#10;&#9;event. It returns &lt;code&gt;true&lt;/code&gt; if the&#10;&#9;method has been called, &lt;code&gt;false&lt;/code&gt; otherwise.&#10;      &lt;/p&gt;&#10;     " return_description="&#10;&#9;&lt;p&gt;&#10;&#9;  &lt;code&gt;true&lt;/code&gt; if the event propagation has been stopped&#10;&#9;  immediately in the current group.&#10;&#9;&lt;/p&gt;&#10;      "/>
    </methods>
    <properties/>
  </interface>
  <interface id="UIEvent" name="UIEvent" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;UIEvent&lt;/code&gt; interface provides specific contextual&#10;      information associated with User Interface events.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      To create an instance of the &lt;code&gt;UIEvent&lt;/code&gt; interface, use&#10;      the &lt;code&gt;DocumentEvent.createEvent(&quot;UIEvent&quot;)&lt;/code&gt; method call.&#10;    &lt;/p&gt;&#10;  " parent_id="Event">
    <methods>
      <method id="initUIEvent" name="initUIEvent" return_type="void" owner_id="UIEvent" description="&#10;      &lt;p&gt;&#10;&#9;The &lt;code&gt;initUIEvent&lt;/code&gt; method is used to initialize the&#10;&#9;value of a &lt;code&gt;UIEvent&lt;/code&gt; object and has the same behavior&#10;&#9;as &lt;code&gt;Event.initEvent()&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;      " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="typeArg" type="DOMString" owner_id="" description="&lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;Event.initEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="canBubbleArg" type="boolean" owner_id="" description="&lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;Event.initEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="cancelableArg" type="boolean" owner_id="" description="&lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;Event.initEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="viewArg" type="views::AbstractView" owner_id="" description="&lt;p&gt;Specifies &lt;code&gt;UIEvent.view&lt;/code&gt;.&lt;/p&gt;&#10;          "/>
        <parameter id="" name="detailArg" type="long" owner_id="" description="&lt;p&gt;Specifies &lt;code&gt;UIEvent.detail&lt;/code&gt;.&lt;/p&gt;&#10;          "/>
      </method>
      <method id="initUIEventNS" name="initUIEventNS" return_type="void" owner_id="UIEvent" description="&#10;      &lt;p&gt;&#10;&#9;The &lt;code&gt;initUIEventNS&lt;/code&gt; method is used to initialize the&#10;&#9;value of a &lt;code&gt;UIEvent&lt;/code&gt; object and has the same behavior&#10;&#9;as &lt;code&gt;Event.initEventNS()&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;      " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;Event.initEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="typeArg" type="DOMString" owner_id="" description="&lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;Event.initEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="canBubbleArg" type="boolean" owner_id="" description="&lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;Event.initEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="cancelableArg" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;Event.initEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="viewArg" type="views::AbstractView" owner_id="" description="&lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="detailArg" type="long" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
      </method>
    </methods>
    <properties>
      <property name="view" id="view" type="views::AbstractView" description="&#10;      &lt;p&gt;The &lt;code&gt;view&lt;/code&gt; attribute identifies the&#10;&#9;&lt;code&gt;AbstractView&lt;/code&gt; from which the event was generated.&lt;/p&gt;&#10;    " readonly="true" owner_id="UIEvent"/>
      <property name="detail" id="detail" type="long" description="&lt;p&gt;Specifies some detail information about the &lt;code&gt;Event&lt;/code&gt;,&#10;&#9;depending on the type of event.&lt;/p&gt;&#10;    " readonly="true" owner_id="UIEvent"/>
    </properties>
  </interface>
  <interface id="TextEvent" name="TextEvent" description=" &#10;    &lt;p&gt;The &lt;code&gt;TextEvent&lt;/code&gt; interface provides specific contextual&#10;      information associated with Text Events.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      To create an instance of the &lt;code&gt;TextEvent&lt;/code&gt; interface, use&#10;      the &lt;code&gt;DocumentEvent.createEvent(&quot;TextEvent&quot;)&lt;/code&gt; method&#10;      call.&#10;    &lt;/p&gt;&#10;  " parent_id="UIEvent">
    <methods>
      <method id="initTextEvent" name="initTextEvent" return_type="void" owner_id="TextEvent" description=" &#10;      &lt;p&gt;&#10;&#9;The &lt;code&gt;initTextEvent&lt;/code&gt; method is used to initialize the&#10;&#9;value of a &lt;code&gt;TextEvent&lt;/code&gt; object and has the same&#10;&#9;behavior as &lt;code&gt;UIEvent.initUIEvent()&lt;/code&gt;. The value of&#10;&#9;&lt;code&gt;UIEvent.detail&lt;/code&gt; remains undefined.&#10;      &lt;/p&gt;&#9;&#10;    " return_description="&#10;      ">
        <parameter id="" name="typeArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="canBubbleArg" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt; &#10;&#9;"/>
        <parameter id="" name="cancelableArg" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt; &#10;&#9;"/>
        <parameter id="" name="viewArg" type="views::AbstractView" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt; &#10;&#9;"/>
        <parameter id="" name="dataArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;TextEvent.data&lt;/code&gt;.&#10;&#9;  &lt;/p&gt; &#10;&#9;"/>
      </method>
      <method id="initTextEventNS" name="initTextEventNS" return_type="void" owner_id="TextEvent" description=" &#10;      &lt;p&gt;&#10;&#9;The &lt;code&gt;initTextEventNS&lt;/code&gt; method is used to initialize&#10;&#9;the value of a &lt;code&gt;TextEvent&lt;/code&gt; object and has the same&#10;&#9;behavior as &lt;code&gt;UIEvent.initUIEventNS()&lt;/code&gt;. The value of&#10;&#9;&lt;code&gt;UIEvent.detail&lt;/code&gt; remains undefined.&#10;      &lt;/p&gt;&#9;&#10;    " return_description="&#10;      ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="type" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="canBubbleArg" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt; &#10;&#9;"/>
        <parameter id="" name="cancelableArg" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt; &#10;&#9;"/>
        <parameter id="" name="viewArg" type="views::AbstractView" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt; &#10;&#9;"/>
        <parameter id="" name="dataArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;TextEvent.initTextEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt; &#10;&#9;"/>
      </method>
    </methods>
    <properties>
      <property name="data" id="data" type="DOMString" description=" &#10;      &lt;p&gt;&#10;&#9;&lt;code&gt;data&lt;/code&gt; holds the value of the characters generated by&#10;&#9;the character device. This may be a single Unicode character or&#10;&#9;a non-empty sequence of Unicode characters &lt;bibref ref=&quot;Unicode&quot;&gt;&lt;/bibref&gt;. Characters should be normalized as defined by&#10;&#9;the Unicode normalization form &lt;term&gt;NFC&lt;/term&gt;, defined in&#10;&#9;&lt;bibref ref=&quot;UnicodeNormalization&quot;&gt;&lt;/bibref&gt;. This attribute cannot be&#10;&#9;null or contain the empty string.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="TextEvent"/>
    </properties>
  </interface>
  <interface id="MouseEvent" name="MouseEvent" description="&#10;    &lt;p&gt;The &lt;code&gt;MouseEvent&lt;/code&gt; interface provides specific contextual &#10;      information associated with Mouse events.&lt;/p&gt;&#10;    &lt;p&gt;&#10;      In the case of nested elements mouse events are always targeted at the&#10;      most deeply nested element. Ancestors of the targeted element may use&#10;      bubbling to obtain notification of mouse events which occur within theirs&#10;      descendent elements.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      To create an instance of the &lt;code&gt;MouseEvent&lt;/code&gt; interface,&#10;      use the &lt;code&gt;DocumentEvent.createEvent(&quot;MouseEvent&quot;)&lt;/code&gt; method&#10;      call.&#10;    &lt;/p&gt;&#10;    &lt;note&gt;&#10;      &lt;p&gt;&#10;&#9;When initializing &lt;code&gt;MouseEvent&lt;/code&gt; objects using&#10;&#9;&lt;code&gt;initMouseEvent&lt;/code&gt; or &lt;code&gt;initMouseEventNS&lt;/code&gt;,&#10;&#9;implementations should use the client coordinates&#10;&#9;&lt;code&gt;clientX&lt;/code&gt; and &lt;code&gt;clientY&lt;/code&gt; for calculation of&#10;&#9;other coordinates (such as target coordinates exposed by&#10;&#9;&lt;termref def=&quot;dt-DOM-Level-0&quot;&gt;DOM Level 0&lt;/termref&gt;&#10;&#9;implementations).&#10;      &lt;/p&gt;&#10;    &lt;/note&gt;&#10;  " parent_id="UIEvent">
    <methods>
      <method id="initMouseEvent" name="initMouseEvent" return_type="void" owner_id="MouseEvent" description="&#10;      &lt;p&gt;&#10;&#9;The &lt;code&gt;initMouseEvent&lt;/code&gt; method is used to initialize the&#10;&#9;value of a &lt;code&gt;MouseEvent&lt;/code&gt; object and has the same&#10;&#9;behavior as &lt;code&gt;UIEvent.initUIEvent()&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;      " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="typeArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="canBubbleArg" type="boolean" owner_id="" description="&lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="cancelableArg" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="viewArg" type="views::AbstractView" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="detailArg" type="long" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="screenXArg" type="long" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;MouseEvent.screenX&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="screenYArg" type="long" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;MouseEvent.screenY&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="clientXArg" type="long" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;MouseEvent.clientX&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="clientYArg" type="long" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;MouseEvent.clientY&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="ctrlKeyArg" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;MouseEvent.ctrlKey&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="altKeyArg" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;MouseEvent.altKey&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="shiftKeyArg" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;MouseEvent.shiftKey&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="metaKeyArg" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;MouseEvent.metaKey&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="buttonArg" type="unsigned short" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;MouseEvent.button&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="relatedTargetArg" type="EventTarget" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;MouseEvent.relatedTarget&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;          "/>
      </method>
      <method id="getModifierState" name="getModifierState" return_type="boolean" owner_id="MouseEvent" description="&#10;      &lt;p&gt;&#10;&#9;This methods queries the state of a modifier using a key&#10;&#9;identifier. See also &lt;specref ref=&quot;Modifiers&quot;&gt;&lt;/specref&gt;.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;&#10;&#9;  &lt;code&gt;true&lt;/code&gt; if it is modifier key and the modifier is&#10;&#9;  activated, &lt;code&gt;false&lt;/code&gt; otherwise.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="keyIdentifierArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    A modifier key identifier, as defined by the&#10;&#9;    &lt;code&gt;KeyboardEvent.keyIdentifier&lt;/code&gt; attribute. Common&#10;&#9;    modifier keys are &lt;code&gt;&quot;Alt&quot;&lt;/code&gt;,&#10;&#9;    &lt;code&gt;&quot;AltGraph&quot;&lt;/code&gt;, &lt;code&gt;&quot;CapsLock&quot;&lt;/code&gt;,&#10;&#9;    &lt;code&gt;&quot;Control&quot;&lt;/code&gt;, &lt;code&gt;&quot;Meta&quot;&lt;/code&gt;,&#10;&#9;    &lt;code&gt;&quot;NumLock&quot;&lt;/code&gt;, &lt;code&gt;&quot;Scroll&quot;&lt;/code&gt;, or&#10;&#9;    &lt;code&gt;&quot;Shift&quot;&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;&#10;&#9;  &lt;note&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      If an application wishes to distinguish between right and&#10;&#9;      left modifiers, this information could be deduced using&#10;&#9;      keyboard events and&#10;&#9;      &lt;code&gt;KeyboardEvent.keyLocation&lt;/code&gt;.&#10;&#9;    &lt;/p&gt;&#10;&#9;  &lt;/note&gt;&#10;&#9;"/>
      </method>
      <method id="initMouseEventNS" name="initMouseEventNS" return_type="void" owner_id="MouseEvent" description="&#10;      &lt;p&gt;&#10;&#9;The &lt;code&gt;initMouseEventNS&lt;/code&gt; method is used to initialize&#10;&#9;the value of a &lt;code&gt;MouseEvent&lt;/code&gt; object and has the same&#10;&#9;behavior as &lt;code&gt;UIEvent.initUIEventNS()&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;      " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="typeArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="canBubbleArg" type="boolean" owner_id="" description="&lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="cancelableArg" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="viewArg" type="views::AbstractView" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="detailArg" type="long" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="screenXArg" type="long" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;MouseEvent.initMouseEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="screenYArg" type="long" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;MouseEvent.initMouseEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="clientXArg" type="long" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;MouseEvent.initMouseEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="clientYArg" type="long" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;MouseEvent.initMouseEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="buttonArg" type="unsigned short" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;MouseEvent.initMouseEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="relatedTargetArg" type="EventTarget" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;MouseEvent.initMouseEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="modifiersList" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    A &lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2000/REC-xml-20001006#NT-S&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;white&#10;&#9;    space&lt;/xspecref&gt; separated list of modifier key identifiers&#10;&#9;    to be activated on this object. As an example,&#10;&#9;    &lt;code&gt;&quot;Control Alt&quot;&lt;/code&gt; will activated the control and&#10;&#9;    alt modifiers.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
    </methods>
    <properties>
      <property name="screenX" id="screenX" type="long" description="&#10;      &lt;p&gt;The horizontal coordinate at which the&#10;&#9;event occurred relative to the origin of the screen coordinate&#10;&#9;system.&lt;/p&gt;&#10;     " readonly="true" owner_id="MouseEvent"/>
      <property name="screenY" id="screenY" type="long" description="&#10;      &lt;p&gt;The vertical coordinate at which the&#10;&#9;event occurred relative to the origin of the screen coordinate&#10;&#9;system.&lt;/p&gt;&#10;     " readonly="true" owner_id="MouseEvent"/>
      <property name="clientX" id="clientX" type="long" description="&#10;      &lt;p&gt;The horizontal coordinate at which the&#10;&#9;event occurred relative to the DOM implementation's client area.&lt;/p&gt;&#10;     " readonly="true" owner_id="MouseEvent"/>
      <property name="clientY" id="clientY" type="long" description="&#10;      &lt;p&gt;The vertical coordinate at which the&#10;&#9;event occurred relative to the DOM implementation's client area.&lt;/p&gt;&#10;     " readonly="true" owner_id="MouseEvent"/>
      <property name="ctrlKey" id="ctrlKey" type="boolean" description="&#10;      &lt;p&gt;&#10;&#9;&lt;code&gt;true&lt;/code&gt; if the control (Ctrl) key modifier is&#10;&#9;activated.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="MouseEvent"/>
      <property name="shiftKey" id="shiftKey" type="boolean" description="&#10;      &lt;p&gt;&#10;&#9;&lt;code&gt;true&lt;/code&gt; if the shift (Shift) key modifier is&#10;&#9;activated.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="MouseEvent"/>
      <property name="altKey" id="altKey" type="boolean" description="&#10;      &lt;p&gt;&#10;&#9;&lt;code&gt;true&lt;/code&gt; if the alt (alternative) key modifier is activated.&#10;      &lt;/p&gt;&#10;      &lt;note&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  The Option key modifier on Macintosh systems must&#10;&#9;  be represented using this key modifier.&#10;&#9;&lt;/p&gt;&#10;      &lt;/note&gt;&#10;    " readonly="true" owner_id="MouseEvent"/>
      <property name="metaKey" id="metaKey" type="boolean" description="&#10;      &lt;p&gt;&#10;&#9;&lt;code&gt;true&lt;/code&gt; if the meta (Meta) key modifier is activated.&#10;      &lt;/p&gt;&#10;      &lt;note&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  The Command key modifier on Macintosh system must be&#10;&#9;  represented using this meta key.&#10;&#9;&lt;/p&gt;&#10;      &lt;/note&gt;&#10;    " readonly="true" owner_id="MouseEvent"/>
      <property name="button" id="button" type="unsigned short" description="&#10;      &lt;p&gt;&#10;&#9;During mouse events caused by the depression or release of a&#10;&#9;mouse button, &lt;code&gt;button&lt;/code&gt; is used to indicate which&#10;&#9;mouse button changed state. &lt;code&gt;0&lt;/code&gt; indicates the normal&#10;&#9;button of the mouse (in general on the left or the one button on&#10;&#9;Macintosh mice, used to activate a button or select&#10;&#9;text). &lt;code&gt;2&lt;/code&gt; indicates the contextual property (in&#10;&#9;general on the right, used to display a context menu) button of&#10;&#9;the mouse if present. &lt;code&gt;1&lt;/code&gt; indicates the extra (in&#10;&#9;general in the middle and often combined with the mouse wheel)&#10;&#9;button. Some mice may provide or simulate more buttons, and&#10;&#9;values higher than &lt;code&gt;2&lt;/code&gt; can be used to represent&#10;&#9;such buttons.&#10;      &lt;/p&gt;&#10;     " readonly="true" owner_id="MouseEvent"/>
      <property name="relatedTarget" id="relatedTarget" type="EventTarget" description="&#10;      &lt;p&gt;&#10;&#9;Used to identify a secondary &lt;code&gt;EventTarget&lt;/code&gt; related to&#10;&#9;a UI event. Currently this attribute is used with the mouseover&#10;&#9;event to indicate the &lt;code&gt;EventTarget&lt;/code&gt; which the&#10;&#9;pointing device exited and with the mouseout event to indicate&#10;&#9;the &lt;code&gt;EventTarget&lt;/code&gt; which the pointing device&#10;&#9;entered.&lt;/p&gt;&#10;     " readonly="true" owner_id="MouseEvent"/>
    </properties>
  </interface>
  <interface id="KeyboardEvent" name="KeyboardEvent" description=" &#10;    &lt;p&gt;&#10;      The &lt;code&gt;KeyboardEvent&lt;/code&gt; interface provides specific&#10;      contextual information associated with keyboard devices. Each&#10;      keyboard event references a key using an identifier. Keyboard&#10;      events are commonly directed at the element that has the&#10;      focus.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      The &lt;code&gt;KeyboardEvent&lt;/code&gt; interface provides convenient&#10;      attributes for some common modifiers keys:&#10;      &lt;code&gt;KeyboardEvent.ctrlKey&lt;/code&gt;,&#10;      &lt;code&gt;KeyboardEvent.shiftKey&lt;/code&gt;,&#10;      &lt;code&gt;KeyboardEvent.altKey&lt;/code&gt;,&#10;      &lt;code&gt;KeyboardEvent.metaKey&lt;/code&gt;. These attributes are&#10;      equivalent to use the method&#10;      &lt;code&gt;KeyboardEvent.getModifierState(keyIdentifierArg)&lt;/code&gt; with&#10;      &quot;Control&quot;, &quot;Shift&quot;, &quot;Alt&quot;, or &quot;Meta&quot; respectively.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      To create an instance of the &lt;code&gt;KeyboardEvent&lt;/code&gt; interface,&#10;      use the &lt;code&gt;DocumentEvent.createEvent(&quot;KeyboardEvent&quot;)&lt;/code&gt;&#10;      method call.&#10;    &lt;/p&gt;&#10;  " parent_id="UIEvent">
    <methods>
      <method id="getModifierState" name="getModifierState" return_type="boolean" owner_id="KeyboardEvent" description="&#10;      &lt;p&gt;&#10;&#9;This methods queries the state of a modifier using a key&#10;&#9;identifier. See also &lt;specref ref=&quot;Modifiers&quot;&gt;&lt;/specref&gt;.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;&#10;&#9;  &lt;code&gt;true&lt;/code&gt; if it is modifier key and the modifier is&#10;&#9;  activated, &lt;code&gt;false&lt;/code&gt; otherwise.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="keyIdentifierArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    A modifier key identifier. Common modifier keys are&#10;&#9;    &lt;code&gt;&quot;Alt&quot;&lt;/code&gt;, &lt;code&gt;&quot;AltGraph&quot;&lt;/code&gt;,&#10;&#9;    &lt;code&gt;&quot;CapsLock&quot;&lt;/code&gt;, &lt;code&gt;&quot;Control&quot;&lt;/code&gt;,&#10;&#9;    &lt;code&gt;&quot;Meta&quot;&lt;/code&gt;, &lt;code&gt;&quot;NumLock&quot;&lt;/code&gt;,&#10;&#9;    &lt;code&gt;&quot;Scroll&quot;&lt;/code&gt;, or &lt;code&gt;&quot;Shift&quot;&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;&#9;  &lt;note&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      If an application wishes to distinguish between right and&#10;&#9;      left modifiers, this information could be deduced using&#10;&#9;      keyboard events and&#10;&#9;      &lt;code&gt;KeyboardEvent.keyLocation&lt;/code&gt;.&#10;&#9;    &lt;/p&gt;&#10;&#9;  &lt;/note&gt;&#10;&#9;"/>
      </method>
      <method id="initKeyboardEvent" name="initKeyboardEvent" return_type="void" owner_id="KeyboardEvent" description=" &#10;      &lt;p&gt;&#10;&#9;The &lt;code&gt;initKeyboardEvent&lt;/code&gt; method is used to initialize&#10;&#9;the value of a &lt;code&gt;KeyboardEvent&lt;/code&gt; object and has the&#10;&#9;same behavior as &lt;code&gt;UIEvent.initUIEvent()&lt;/code&gt;. The value of&#10;&#9;&lt;code&gt;UIEvent.detail&lt;/code&gt; remains undefined.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;      ">
        <parameter id="" name="typeArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="canBubbleArg" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt; &#10;&#9;"/>
        <parameter id="" name="cancelableArg" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt; &#10;&#9;"/>
        <parameter id="" name="viewArg" type="views::AbstractView" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt; &#10;&#9;"/>
        <parameter id="" name="keyIdentifierArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;KeyboardEvent.keyIdentifier&lt;/code&gt;.&#10;&#9;  &lt;/p&gt; &#10;&#9;"/>
        <parameter id="" name="keyLocationArg" type="unsigned long" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;KeyboardEvent.keyLocation&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="modifiersList" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    A &lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2000/REC-xml-20001006#NT-S&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;white&#10;&#9;    space&lt;/xspecref&gt; separated list of modifier key identifiers&#10;&#9;    to be activated on this object.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="initKeyboardEventNS" name="initKeyboardEventNS" return_type="void" owner_id="KeyboardEvent" description=" &#10;      &lt;p&gt;&#10;&#9;The &lt;code&gt;initKeyboardEventNS&lt;/code&gt; method is used to initialize&#10;&#9;the value of a &lt;code&gt;KeyboardEvent&lt;/code&gt; object and has the&#10;&#9;same behavior as &lt;code&gt;UIEvent.initUIEventNS()&lt;/code&gt;. The value of&#10;&#9;&lt;code&gt;UIEvent.detail&lt;/code&gt; remains undefined.&#10;      &lt;/p&gt;&#9;&#10;    " return_description="&#10;      ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="typeArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="canBubbleArg" type="boolean" owner_id="" description="&lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="cancelableArg" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="viewArg" type="views::AbstractView" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;UIEvent.initUIEventNS()&lt;/code&gt; method for&#10;&#9;    a description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="keyIdentifierArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;KeyboardEvent.initKeyboardEvent()&lt;/code&gt;&#10;&#9;    method for a description of this parameter.&#10;&#9;  &lt;/p&gt; &#10;&#9;"/>
        <parameter id="" name="keyLocationArg" type="unsigned long" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;KeyboardEvent.initKeyboardEvent()&lt;/code&gt;&#10;&#9;    method for a description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="modifiersList" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    A &lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2000/REC-xml-20001006#NT-S&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;white&#10;&#9;    space&lt;/xspecref&gt; separated list of modifier key identifiers&#10;&#9;    to be activated on this object. As an example,&#10;&#9;    &lt;code&gt;&quot;Control Alt&quot;&lt;/code&gt; will activated the control and&#10;&#9;    alt modifiers.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
    </methods>
    <properties>
      <property name="keyIdentifier" id="keyIdentifier" type="DOMString" description=" &#10;      &lt;p&gt;&#10;&#9;&lt;code&gt;keyIdentifier&lt;/code&gt; holds the identifier of the key. The&#10;&#9;key identifiers are defined in Appendix A.2 &quot;&lt;specref ref=&quot;KeySet-Set&quot;&gt;&lt;/specref&gt;&quot;. Implementations that are unable to identify&#10;&#9;a key must use the key identifier &lt;code&gt;&quot;Unidentified&quot;&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="KeyboardEvent"/>
      <property name="keyLocation" id="keyLocation" type="unsigned long" description="&#10;      &lt;p&gt;&#10;&#9;The &lt;code&gt;keyLocation&lt;/code&gt; attribute contains an indication of&#10;&#9;the location of they key on the device, as described in &lt;specref ref=&quot;ID-KeyboardEvent-KeyLocationCode&quot;&gt;&lt;/specref&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="KeyboardEvent"/>
      <property name="ctrlKey" id="ctrlKey" type="boolean" description="&#10;      &lt;p&gt;&#10;&#9;&lt;code&gt;true&lt;/code&gt; if the control (Ctrl) key modifier is&#10;&#9;activated.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="KeyboardEvent"/>
      <property name="shiftKey" id="shiftKey" type="boolean" description="&#10;      &lt;p&gt;&#10;&#9;&lt;code&gt;true&lt;/code&gt; if the shift (Shift) key modifier is&#10;&#9;activated.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="KeyboardEvent"/>
      <property name="altKey" id="altKey" type="boolean" description="&#10;      &lt;p&gt;&#10;&#9;&lt;code&gt;true&lt;/code&gt; if the alternative (Alt) key modifier is&#10;&#9;activated.&#10;      &lt;/p&gt;&#10;      &lt;note&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  The Option key modifier on Macintosh systems must&#10;&#9;  be represented using this key modifier.&#10;&#9;&lt;/p&gt;&#10;      &lt;/note&gt;&#10;    " readonly="true" owner_id="KeyboardEvent"/>
      <property name="metaKey" id="metaKey" type="boolean" description="&#10;      &lt;p&gt;&#10;&#9;&lt;code&gt;true&lt;/code&gt; if the meta (Meta) key modifier is activated.&#10;      &lt;/p&gt;&#10;      &lt;note&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  The Command key modifier on Macintosh systems must&#10;&#9;  be represented using this key modifier.&#10;&#9;&lt;/p&gt;&#10;      &lt;/note&gt;&#10;    " readonly="true" owner_id="KeyboardEvent"/>
    </properties>
  </interface>
  <interface id="MutationEvent" name="MutationEvent" description="&#10;    &lt;p&gt;The &lt;code&gt;MutationEvent&lt;/code&gt; interface provides specific contextual &#10;      information associated with Mutation events.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      To create an instance of the &lt;code&gt;MutationEvent&lt;/code&gt; interface,&#10;      use the &lt;code&gt;DocumentEvent.createEvent(&quot;MutationEvent&quot;)&lt;/code&gt;&#10;      method call.&#10;    &lt;/p&gt;&#10;    &#10;  " parent_id="Event">
    <methods>
      <method id="initMutationEvent" name="initMutationEvent" return_type="void" owner_id="MutationEvent" description="&#10;      &lt;p&gt;&#10;&#9;The &lt;code&gt;initMutationEvent&lt;/code&gt; method is used to initialize&#10;&#9;the value of a &lt;code&gt;MutationEvent&lt;/code&gt; object and has the&#10;&#9;same behavior as &lt;code&gt;Event.initEvent()&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="typeArg" type="DOMString" owner_id="" description="&lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;Event.initEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="canBubbleArg" type="boolean" owner_id="" description="&lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;Event.initEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="cancelableArg" type="boolean" owner_id="" description="&lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;Event.initEvent()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="relatedNodeArg" type="Node" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;MutationEvent.relatedNode&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="prevValueArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;MutationEvent.prevValue&lt;/code&gt;. This value&#10;&#9;    may be null.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="newValueArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;MutationEvent.newValue&lt;/code&gt;. This value&#10;&#9;    may be null.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="attrNameArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;MutationEvent.attrname&lt;/code&gt;. This value&#10;&#9;    may be null.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="attrChangeArg" type="unsigned short" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;MutationEvent.attrChange&lt;/code&gt;. This value&#10;&#9;    may be null.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="initMutationEventNS" name="initMutationEventNS" return_type="void" owner_id="MutationEvent" description="&#10;      &lt;p&gt;&#10;&#9;The &lt;code&gt;initMutationEventNS&lt;/code&gt; method is used to&#10;&#9;initialize the value of a &lt;code&gt;MutationEvent&lt;/code&gt; object and&#10;&#9;has the same behavior as &lt;code&gt;Event.initEventNS()&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;Event.initEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="typeArg" type="DOMString" owner_id="" description="&lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;Event.initEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="canBubbleArg" type="boolean" owner_id="" description="&lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;Event.initEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;          "/>
        <parameter id="" name="cancelableArg" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;Event.initEventNS()&lt;/code&gt; method for a&#10;&#9;    description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="relatedNodeArg" type="Node" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;MutationEvent.initMutationEvent()&lt;/code&gt;&#10;&#9;    method for a description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="prevValueArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;MutationEvent.initMutationEvent()&lt;/code&gt;&#10;&#9;    method for a description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="newValueArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;MutationEvent.initMutationEvent()&lt;/code&gt;&#10;&#9;    method for a description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="attrNameArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;MutationEvent.initMutationEvent()&lt;/code&gt;&#10;&#9;    method for a description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="attrChangeArg" type="unsigned short" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;MutationEvent.initMutationEvent()&lt;/code&gt;&#10;&#9;    method for a description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
    </methods>
    <properties>
      <property name="relatedNode" id="relatedNode" type="Node" description="&#10;      &lt;p&gt;&#10;&#9;&lt;code&gt;relatedNode&lt;/code&gt; is used to identify a secondary node&#10;&#9;related to a mutation event.  For example, if a mutation event&#10;&#9;is dispatched to a node indicating that its parent has changed,&#10;&#9;the &lt;code&gt;relatedNode&lt;/code&gt; is the changed parent.  If an event&#10;&#9;is instead dispatched to a subtree indicating a node was changed&#10;&#9;within it, the &lt;code&gt;relatedNode&lt;/code&gt; is the changed node.  In&#10;&#9;the case of the &lt;code&gt;{&quot;http://www.w3.org/2001/xml-events&quot;,&#10;&#9;&quot;DOMAttrModified&quot;}&lt;/code&gt; event it indicates the&#10;&#9;&lt;code&gt;Attr&lt;/code&gt; node which was modified, added, or removed.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="MutationEvent"/>
      <property name="prevValue" id="prevValue" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;&lt;code&gt;prevValue&lt;/code&gt; indicates the previous value of the&#10;&#9;&lt;code&gt;Attr&lt;/code&gt; node in &lt;code&gt;{&quot;http://www.w3.org/2001/xml-events&quot;,&#10;&#9;&quot;DOMAttrModified&quot;}&lt;/code&gt; events, and of the&#10;&#9;&lt;code&gt;CharacterData&lt;/code&gt; node in &lt;code&gt;{&quot;http://www.w3.org/2001/xml-events&quot;,&#10;&#9;&quot;DOMCharacterDataModified&quot;}&lt;/code&gt; events.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="MutationEvent"/>
      <property name="newValue" id="newValue" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;&lt;code&gt;newValue&lt;/code&gt; indicates the new value of the&#10;&#9;&lt;code&gt;Attr&lt;/code&gt; node in &lt;code&gt;{&quot;http://www.w3.org/2001/xml-events&quot;,&#10;&#9;&quot;DOMAttrModified&quot;}&lt;/code&gt; events, and of the&#10;&#9;&lt;code&gt;CharacterData&lt;/code&gt; node in &lt;code&gt;{&quot;http://www.w3.org/2001/xml-events&quot;,&#10;&#9;&quot;DOMCharacterDataModified&quot;}&lt;/code&gt; events.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="MutationEvent"/>
      <property name="attrName" id="attrName" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;&lt;code&gt;attrName&lt;/code&gt; indicates the name of the changed&#10;&#9;&lt;code&gt;Attr&lt;/code&gt; node in a &lt;code&gt;{&quot;http://www.w3.org/2001/xml-events&quot;,&#10;&#9;&quot;DOMAttrModified&quot;}&lt;/code&gt; event.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="MutationEvent"/>
      <property name="attrChange" id="attrChange" type="unsigned short" description="&#10;      &lt;p&gt;&#10;&#9;&lt;code&gt;attrChange&lt;/code&gt; indicates the type of change which&#10;&#9;triggered the &lt;code&gt;{&quot;http://www.w3.org/2001/xml-events&quot;, &quot;DOMAttrModified&quot;}&lt;/code&gt;&#10;&#9;event.  The values can be &lt;code&gt;MODIFICATION&lt;/code&gt;,&#10;&#9;&lt;code&gt;ADDITION&lt;/code&gt;, or &lt;code&gt;REMOVAL&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="MutationEvent"/>
    </properties>
  </interface>
  <interface id="MutationNameEvent" name="MutationNameEvent" description="&#10;    &lt;p&gt;&#10;      The &lt;code&gt;MutationNameEvent&lt;/code&gt; interface provides specific&#10;      contextual information associated with Mutation name event types.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      To create an instance of the &lt;code&gt;MutationNameEvent&lt;/code&gt;&#10;      interface, use the&#10;      &lt;code&gt;Document.createEvent(&quot;MutationNameEvent&quot;)&lt;/code&gt; method&#10;      call.&#10;    &lt;/p&gt;&#10;    &#10;  " parent_id="MutationEvent">
    <methods>
      <method id="initMutationNameEvent" name="initMutationNameEvent" return_type="void" owner_id="MutationNameEvent" description="&#10;      &lt;p&gt;&#10;&#9;The &lt;code&gt;initMutationNameEvent&lt;/code&gt; method is used to&#10;&#9;initialize the value of a &lt;code&gt;MutationNameEvent&lt;/code&gt; object&#10;&#9;and has the same behavior as&#10;&#9;&lt;code&gt;MutationEvent.initMutationEvent()&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="typeArg" type="DOMString" owner_id="" description="&lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;MutationEvent.initMutationEvent()&lt;/code&gt;&#10;&#9;    method for a description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="canBubbleArg" type="boolean" owner_id="" description="&lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;MutationEvent.initMutationEvent()&lt;/code&gt;&#10;&#9;    method for a description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="cancelableArg" type="boolean" owner_id="" description="&lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;MutationEvent.initMutationEvent()&lt;/code&gt;&#10;&#9;    method for a description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="relatedNodeArg" type="Node" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;MutationEvent.initMutationEvent()&lt;/code&gt;&#10;&#9;    method for a description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="prevNamespaceURIArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies&#10;&#9;    &lt;code&gt;MutationNameEvent.prevNamespaceURI&lt;/code&gt;. This value&#10;&#9;    may be &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="prevNodeNameArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Specifies &lt;code&gt;MutationNameEvent.prevNodeName&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="initMutationNameEventNS" name="initMutationNameEventNS" return_type="void" owner_id="MutationNameEvent" description="&#10;      &lt;p&gt;&#10;&#9;The &lt;code&gt;initMutationNameEventNS&lt;/code&gt; method is used to&#10;&#9;initialize the value of a &lt;code&gt;MutationNameEvent&lt;/code&gt; object&#10;&#9;and has the same behavior as&#10;&#9;&lt;code&gt;MutationEvent.initMutationEventNS()&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " return_description="&lt;p&gt;&lt;!--empty paragraph--&gt;&lt;/p&gt;">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the&#10;&#9;    &lt;code&gt;MutationEvent.initMutationEventNS()&lt;/code&gt; method for&#10;&#9;    a description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="typeArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the&#10;&#9;    &lt;code&gt;MutationEvent.initMutationEventNS()&lt;/code&gt; method for&#10;&#9;    a description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="canBubbleArg" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the&#10;&#9;    &lt;code&gt;MutationEvent.initMutationEventNS()&lt;/code&gt; method for&#10;&#9;    a description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="cancelableArg" type="boolean" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the&#10;&#9;    &lt;code&gt;MutationEvent.initMutationEventNS()&lt;/code&gt; method for&#10;&#9;    a description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="relatedNodeArg" type="Node" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the&#10;&#9;    &lt;code&gt;MutationEvent.initMutationEventNS()&lt;/code&gt; method for&#10;&#9;    a description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="prevNamespaceURIArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;MutationEvent.initMutationEvent()&lt;/code&gt;&#10;&#9;    method for a description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="prevNodeNameArg" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    Refer to the &lt;code&gt;MutationEvent.initMutationEvent()&lt;/code&gt;&#10;&#9;    method for a description of this parameter.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
    </methods>
    <properties>
      <property name="prevNamespaceURI" id="prevNamespaceURI" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;The previous value of the &lt;code&gt;relatedNode&lt;/code&gt;'s&#10;&#9;&lt;code&gt;namespaceURI&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="MutationNameEvent"/>
      <property name="prevNodeName" id="prevNodeName" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;The previous value of the &lt;code&gt;relatedNode&lt;/code&gt;'s&#10;&#9;&lt;code&gt;nodeName&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="MutationNameEvent"/>
    </properties>
  </interface>
  <interface id="DOMImplementationLS" name="DOMImplementationLS" description="&#10;    &lt;p&gt;&#10;      &lt;code&gt;DOMImplementationLS&lt;/code&gt; contains the factory methods for&#10;      creating Load and Save objects.&#10;    &lt;/p&gt;&#10;    &#10;    &lt;p&gt;&#10;      The expectation is that an instance of the&#10;      &lt;code&gt;DOMImplementationLS&lt;/code&gt; interface can be obtained by&#10;      using binding-specific casting methods on an instance of the&#10;      &lt;code&gt;DOMImplementation&lt;/code&gt; interface or, if the&#10;      &lt;code&gt;Document&lt;/code&gt; supports the feature &lt;code&gt;&quot;Core&quot;&lt;/code&gt;&#10;      version &lt;code&gt;&quot;3.0&quot;&lt;/code&gt; defined in &lt;bibref role=&quot;informative&quot; ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt;, by using the method&#10;      &lt;code&gt;DOMImplementation.getFeature&lt;/code&gt; with parameter values&#10;      &lt;code&gt;&quot;LS&quot;&lt;/code&gt; (or &lt;code&gt;&quot;LS-Async&quot;&lt;/code&gt;) and&#10;      &lt;code&gt;&quot;3.0&quot;&lt;/code&gt; (respectively).&#10;    &lt;/p&gt;&#10;  ">
    <methods>
      <method id="createLSParser" name="createLSParser" return_type="LSParser" owner_id="DOMImplementationLS" description="&#10;      &lt;p&gt;Create a new &lt;code&gt;LSParser&lt;/code&gt;.  The newly constructed&#10;      parser may then be configured by means of its&#10;      &lt;code&gt;DOMConfiguration&lt;/code&gt; object, and used to parse documents by&#10;      means of its &lt;code&gt;parse&lt;/code&gt; method.  &lt;/p&gt;" return_description="&#10;&#9;&lt;p&gt;&#10;&#9;  The newly created &lt;code&gt;LSParser&lt;/code&gt; object. This&#10;&#9;  &lt;code&gt;LSParser&lt;/code&gt; is either synchronous or asynchronous&#10;&#9;  depending on the value of the &lt;code&gt;mode&lt;/code&gt; argument.&#10;&#9;&lt;/p&gt;&#10;&#9;&lt;note&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    By default, the newly created &lt;code&gt;LSParser&lt;/code&gt; does&#10;&#9;    not contain a &lt;code&gt;DOMErrorHandler&lt;/code&gt;, i.e. the value&#10;&#9;    of the &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;error-handler&lt;/xspecref&gt;&quot;&#10;&#9;    configuration parameter is &lt;code&gt;null&lt;/code&gt;. However,&#10;&#9;    implementations may provide a default error handler at&#10;&#9;    creation time. In that case, the initial value of the&#10;&#9;    &lt;code&gt;&quot;error-handler&quot;&lt;/code&gt; configuration parameter on the&#10;&#9;    new &lt;code&gt;LSParser&lt;/code&gt; object contains a reference to&#10;&#9;    the default error handler.&#10;&#9;  &lt;/p&gt;&#10;&#9;&lt;/note&gt;&#10;      ">
        <parameter id="" name="mode" type="unsigned short" owner_id="" description="&lt;p&gt; The &lt;code&gt;mode&lt;/code&gt; argument is either&#10;        &lt;code&gt;MODE_SYNCHRONOUS&lt;/code&gt; or &lt;code&gt;MODE_ASYNCHRONOUS&lt;/code&gt;,&#10;        if &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;MODE_SYNCHRONOUS&lt;/code&gt; then the&#10;        &lt;code&gt;LSParser&lt;/code&gt; that is created will operate in&#10;        synchronous mode, if it's &lt;code&gt;MODE_ASYNCHRONOUS&lt;/code&gt; then&#10;        the &lt;code&gt;LSParser&lt;/code&gt; that is created will operate in&#10;        asynchronous mode.  &lt;/p&gt;"/>
        <parameter id="" name="schemaType" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    An absolute URI representing the type of the &lt;termref def=&quot;dt-schema&quot;&gt;schema&lt;/termref&gt; language used during the&#10;&#9;    load of a &lt;code&gt;Document&lt;/code&gt; using the newly created&#10;&#9;    &lt;code&gt;LSParser&lt;/code&gt;. Note that no lexical checking is&#10;&#9;    done on the absolute URI. In order to create a&#10;&#9;    &lt;code&gt;LSParser&lt;/code&gt; for any kind of schema types&#10;&#9;    (i.e. the LSParser will be free to use any schema found),&#10;&#9;    use the value &lt;code&gt;null&lt;/code&gt;.&#10;&#9;  &lt;/p&gt;&#10;&#9;  &lt;note&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      For W3C XML Schema &lt;bibref ref=&quot;XMLSchema1&quot; role=&quot;informative&quot;&gt;&lt;/bibref&gt;, applications must use the value&#10;&#9;      &lt;code&gt;&quot;http://www.w3.org/2001/XMLSchema&quot;&lt;/code&gt;.  For XML&#10;&#9;      DTD &lt;bibref ref=&quot;XML&quot; role=&quot;informative&quot;&gt;&lt;/bibref&gt;, applications&#10;&#9;      must use the value&#10;&#9;      &lt;code&gt;&quot;http://www.w3.org/TR/REC-xml&quot;&lt;/code&gt;. Other Schema&#10;&#9;      languages are outside the scope of the W3C and therefore&#10;&#9;      should recommend an absolute URI in order to use this&#10;&#9;      method.&#10;&#9;    &lt;/p&gt;&#10;&#9;  &lt;/note&gt;&#9;&#9;    &#10;&#9;"/>
      </method>
      <method id="createLSSerializer" name="createLSSerializer" return_type="LSSerializer" owner_id="DOMImplementationLS" description="&#10;      &lt;p&gt;&#10;        Create a new &lt;code&gt;LSSerializer&lt;/code&gt; object.&#10;      &lt;/p&gt;&#10;    " return_description="&lt;p&gt;The newly created &lt;code&gt;LSSerializer&lt;/code&gt; object.&lt;/p&gt;&#10;&#9;&lt;note&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    By default, the newly created &lt;code&gt;LSSerializer&lt;/code&gt;&#10;&#9;    has no &lt;code&gt;DOMErrorHandler&lt;/code&gt;, i.e. the value of the&#10;&#9;    &lt;code&gt;&quot;error-handler&quot;&lt;/code&gt; configuration parameter is&#10;&#9;    &lt;code&gt;null&lt;/code&gt;. However, implementations may provide a&#10;&#9;    default error handler at creation time. In that case, the&#10;&#9;    initial value of the &lt;code&gt;&quot;error-handler&quot;&lt;/code&gt;&#10;&#9;    configuration parameter on the new&#10;&#9;    &lt;code&gt;LSSerializer&lt;/code&gt; object contains a reference to the&#10;&#9;    default error handler.&#10;&#9;  &lt;/p&gt;&#10;&#9;&lt;/note&gt;&#10;      "/>
      <method id="createLSInput" name="createLSInput" return_type="LSInput" owner_id="DOMImplementationLS" description="&#10;      &lt;p&gt;&#10;        Create a new empty input source object where&#10;        &lt;code&gt;LSInput.characterStream&lt;/code&gt;,&#10;        &lt;code&gt;LSInput.byteStream&lt;/code&gt;,&#10;        &lt;code&gt;LSInput.stringData&lt;/code&gt;&#10;        &lt;code&gt;LSInput.systemId&lt;/code&gt;,&#10;        &lt;code&gt;LSInput.publicId&lt;/code&gt;, &lt;code&gt;LSInput.baseURI&lt;/code&gt;,&#10;        and &lt;code&gt;LSInput.encoding&lt;/code&gt; are null, and&#10;        &lt;code&gt;LSInput.certifiedText&lt;/code&gt; is false.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;&#9;  The newly created input object.&#10;        &lt;/p&gt;&#10;      "/>
      <method id="createLSOutput" name="createLSOutput" return_type="LSOutput" owner_id="DOMImplementationLS" description="&#10;      &lt;p&gt;&#10;        Create a new empty output destination object where&#10;        &lt;code&gt;LSOutput.characterStream&lt;/code&gt;,&#10;        &lt;code&gt;LSOutput.byteStream&lt;/code&gt;,&#10;        &lt;code&gt;LSOutput.systemId&lt;/code&gt;,&#10;        &lt;code&gt;LSOutput.encoding&lt;/code&gt; are null.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;&#9;  The newly created output object.&#10;        &lt;/p&gt;&#10;      "/>
    </methods>
    <properties/>
  </interface>
  <interface id="LSParser" name="LSParser" description="&#10;    &lt;p&gt;&#10;      An interface to an object that is able to build, or augment, a&#10;      DOM tree from various input sources.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      &lt;code&gt;LSParser&lt;/code&gt; provides an API for parsing XML and&#10;      building the corresponding DOM document structure. A&#10;      &lt;code&gt;LSParser&lt;/code&gt; instance can be obtained by invoking the&#10;      &lt;code&gt;DOMImplementationLS.createLSParser()&lt;/code&gt; method.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      As specified in &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt;, when a document is&#10;      first made available via the LSParser:&#10;    &lt;/p&gt;&#10;    &lt;ulist&gt;&#10;      &lt;item&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  there will never be two adjacent nodes of type NODE_TEXT,&#10;&#9;  and there will never be empty text nodes.&#10;&#9;&lt;/p&gt;&#10;      &lt;/item&gt;&#10;      &lt;item&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  it is expected that the &lt;code&gt;value&lt;/code&gt; and&#10;&#9;  &lt;code&gt;nodeValue&lt;/code&gt; attributes of an &lt;code&gt;Attr&lt;/code&gt;&#10;&#9;  node initially return the &lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#AVNormalize&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;XML 1.0 normalized&#10;&#9;  value&lt;/xspecref&gt;. However, if the parameters &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-validate-if-schema&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;validate-if-schema&lt;/xspecref&gt;&quot;&#10;&#9;  and &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-datatype-normalization&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;datatype-normalization&lt;/xspecref&gt;&quot;&#10;&#9;  are set to &lt;code&gt;true&lt;/code&gt;, depending on the attribute&#10;&#9;  normalization used, the attribute values may differ from the&#10;&#9;  ones obtained by the XML 1.0 attribute&#10;&#9;  normalization. &lt;termdef id=&quot;infoset-attribute&quot; term=&quot;[attributes]&quot;&gt;If the parameters &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-datatype-normalization&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;datatype-normalization&lt;/xspecref&gt;&quot;&#10;&#9;  is set to &lt;code&gt;false&lt;/code&gt;, the XML 1.0 attribute&#10;&#9;  normalization is guaranteed to occur, and if the attributes&#10;&#9;  list does not contain namespace declarations, the&#10;&#9;  &lt;code&gt;attributes&lt;/code&gt; attribute on &lt;code&gt;Element&lt;/code&gt;&#10;&#9;  node represents the property&#10;&#9;  &lt;b&gt;[attributes]&lt;/b&gt; defined in &lt;bibref ref=&quot;InfoSet&quot;&gt;&lt;/bibref&gt;&lt;/termdef&gt;.&#10;&#9;&lt;/p&gt;&#10;      &lt;/item&gt;&#10;    &lt;/ulist&gt;&#10;    &#10;    &lt;p&gt;&#10;      Asynchronous &lt;code&gt;LSParser&lt;/code&gt; objects are expected to also&#10;      implement the &lt;code&gt;events::EventTarget&lt;/code&gt; interface so that&#10;      event listeners can be registered on asynchronous&#10;      &lt;code&gt;LSParser&lt;/code&gt; objects.&#10;    &lt;/p&gt;&#10;    &#10;    &lt;p&gt;&#10;      Events supported by asynchronous &lt;code&gt;LSParser&lt;/code&gt; objects are:&#10;    &lt;/p&gt;&#10;    &#10;    &lt;glist&gt;&#10;      &lt;gitem&gt;&#10;&#9;&lt;label id=&quot;event-load&quot;&gt;load&lt;/label&gt;&#10;&#9;&lt;def&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    The &lt;code&gt;LSParser&lt;/code&gt; finishes to load the&#10;&#9;    document. See also the definition of the&#10;&#9;    &lt;code&gt;LSLoadEvent&lt;/code&gt; interface.&#10;&#9;  &lt;/p&gt;&#10;&#9;&lt;/def&gt;&#10;      &lt;/gitem&gt;      &#10;      &lt;gitem&gt;&#10;&#9;&lt;label id=&quot;event-progress&quot;&gt;progress&lt;/label&gt;&#10;&#9;&lt;def&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    The &lt;code&gt;LSParser&lt;/code&gt; signals progress as data is&#10;&#9;    parsed.&#10;&#9;  &lt;/p&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    This specification does not attempt to define exactly when&#10;&#9;    progress events should be dispatched. That is intentionally&#10;&#9;    left as implementation-dependent. Here is one example of how&#10;&#9;    an application might dispatch progress events: Once the&#10;&#9;    parser starts receiving data, a progress event is dispatched&#10;&#9;    to indicate that the parsing starts. From there on, a&#10;&#9;    progress event is dispatched for every 4096 bytes of data&#10;&#9;    that is received and processed. This is only one example,&#10;&#9;    though, and implementations can choose to dispatch progress&#10;&#9;    events at any time while parsing, or not dispatch them at&#10;&#9;    all.&#10;&#9;  &lt;/p&gt;&#10;&#9;  &lt;p&gt;&#10;&#9;    See also the definition of the &lt;code&gt;LSProgressEvent&lt;/code&gt;&#10;&#9;    interface.&#10;&#9;  &lt;/p&gt;&#10;&#9;&lt;/def&gt;&#10;      &lt;/gitem&gt;&#10;    &lt;/glist&gt;&#10;    &lt;note&gt;&#10;      &lt;p&gt;&#10;&#9;All events defined in this specification use the namespace URI&#10;&#9;&lt;code&gt;&quot;http://www.w3.org/2002/DOMLS&quot;&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    &lt;/note&gt;&#10;&#10;    &lt;p&gt;&#10;      While parsing an input source, errors are reported to the&#10;      application through the error handler&#10;      (&lt;code&gt;LSParser.domConfig&lt;/code&gt;'s &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;error-handler&lt;/xspecref&gt;&quot;&#10;      parameter). This specification does in no way try to define all&#10;      possible errors that can occur while parsing XML, or any other&#10;      markup, but some common error cases are defined. The types&#10;      (&lt;code&gt;DOMError.type&lt;/code&gt;) of errors and warnings defined by&#10;      this specification are:&#10;&#10;      &lt;glist&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label&gt;&#10;&#9;    &lt;code&gt;&quot;check-character-normalization-failure&quot; [error]&lt;/code&gt;&#10;&#9;  &lt;/label&gt;&#10;          &lt;def&gt;&#10;            &lt;p&gt;&#10;              Raised if the parameter &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-check-character-normalization&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;check-character-normalization&lt;/xspecref&gt;&quot;&#10;              is set to true and a string is encountered that fails&#10;              normalization checking.&#10;            &lt;/p&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label&gt;&lt;code&gt;&quot;doctype-not-allowed&quot; [fatal]&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;            &lt;p&gt;&#10;              Raised if the configuration parameter &quot;&lt;termref def=&quot;parameter-disallow-doctype&quot;&gt;disallow-doctype&lt;/termref&gt;&quot;&#10;              is set to &lt;code&gt;true&lt;/code&gt; and a doctype is encountered.&#10;            &lt;/p&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label&gt;&lt;code&gt;&quot;no-input-specified&quot; [fatal]&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;            &lt;p&gt;&#10;              Raised when loading a document and no input is specified&#10;              in the &lt;code&gt;LSInput&lt;/code&gt; object.&#10;            &lt;/p&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label&gt;&lt;code&gt;&quot;pi-base-uri-not-preserved&quot; [warning]&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;            &lt;p&gt;&#10;              Raised if a processing instruction is encountered in a&#10;              location where the base URI of the processing&#10;              instruction can not be preserved.&#10;            &lt;/p&gt;&#10;            &lt;p&gt;&#10;              One example of a case where this warning will be raised is&#10;              if the configuration parameter &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-entities&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;entities&lt;/xspecref&gt;&quot;&#10;              is set to &lt;code&gt;false&lt;/code&gt; and the following XML file is&#10;              parsed:&#10;            &lt;/p&gt;&#10;            &lt;eg role=&quot;code&quot; xml:space=&quot;preserve&quot;&gt;&amp;lt;!DOCTYPE root [&#10;&amp;lt;!ENTITY e SYSTEM 'subdir/myentity.ent'&#10;]&amp;gt;&#10;&#10;&amp;lt;root&amp;gt;&#10;&amp;amp;e;&#10;&amp;lt;/root&amp;gt;&lt;/eg&gt;&#10;            &lt;p&gt;&#10;              And &lt;code&gt;subdir/myentity.ent&lt;/code&gt; contains:&#10;            &lt;/p&gt;&#10;            &lt;eg role=&quot;code&quot; xml:space=&quot;preserve&quot;&gt;&amp;lt;one&amp;gt;&#10;  &amp;lt;two/&amp;gt;&#10;&amp;lt;/one&amp;gt;&#10;&amp;lt;?pi 3.14159?&amp;gt;&#10;&amp;lt;more/&amp;gt;&lt;/eg&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label&gt;&lt;code&gt;&quot;unbound-prefix-in-entity&quot; [warning]&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;            &lt;p&gt;&#10;              An implementation dependent warning that may be raised&#10;              if the configuration parameter &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-namespaces&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;namespaces&lt;/xspecref&gt;&quot;&#10;              is set to &lt;code&gt;true&lt;/code&gt; and an unbound namespace&#10;              prefix is encountered in an entity's replacement&#10;              text. Raising this warning is not enforced since some&#10;              existing parsers may not recognize unbound namespace&#10;              prefixes in the replacement text of entities.&#10;            &lt;/p&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label&gt;&lt;code&gt;&quot;unknown-character-denormalization&quot; [fatal]&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;            &lt;p&gt;&#10;              Raised if the configuration parameter &quot;&lt;termref def=&quot;parameter-ignore-unknown-character-denormalizations&quot;&gt;ignore-unknown-character-denormalizations&lt;/termref&gt;&quot;&#10;              is set to &lt;code&gt;false&lt;/code&gt; and a character is&#10;              encountered for which the processor cannot determine the&#10;              normalization properties.&#10;            &lt;/p&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label&gt;&lt;code&gt;&quot;unsupported-encoding&quot; [fatal]&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;            &lt;p&gt;&#10;              Raised if an unsupported encoding is encountered.&#10;            &lt;/p&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label&gt;&lt;code&gt;&quot;unsupported-media-type&quot; [fatal]&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;            &lt;p&gt;&#10;              Raised if the configuration parameter &quot;&lt;termref def=&quot;parameter-supported-media-types-only&quot;&gt;supported-media-types-only&lt;/termref&gt;&quot;&#10;              is set to &lt;code&gt;true&lt;/code&gt; and an unsupported media type&#10;              is encountered.&#10;            &lt;/p&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;      &lt;/glist&gt;&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      In addition to raising the defined errors and warnings,&#10;      implementations are expected to raise implementation specific&#10;      errors and warnings for any other error and warning cases such&#10;      as IO errors (file not found, permission denied,...), XML&#10;      well-formedness errors, and so on.&#10;    &lt;/p&gt;&#10;  ">
    <methods>
      <method id="parse" name="parse" return_type="Document" owner_id="LSParser" description="&lt;p&gt;Parse an XML document from a resource identified by a&#10;        &lt;code&gt;LSInput&lt;/code&gt;.&lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;          If the &lt;code&gt;LSParser&lt;/code&gt; is a synchronous&#10;          &lt;code&gt;LSParser&lt;/code&gt;, the newly created and populated&#10;          &lt;code&gt;Document&lt;/code&gt; is returned. If the&#10;          &lt;code&gt;LSParser&lt;/code&gt; is asynchronous, &lt;code&gt;null&lt;/code&gt; is&#10;          returned since the document object may not yet be constructed&#10;          when this method returns.&#10;        &lt;/p&gt;&#10;      ">
        <parameter id="" name="input" type="LSInput" owner_id="" description="&#10;          &lt;p&gt;&#10;            The &lt;code&gt;LSInput&lt;/code&gt; from which the source of&#10;            the document is to be read.&#10;&#9;  &lt;/p&gt;&#10;        "/>
      </method>
      <method id="parseURI" name="parseURI" return_type="Document" owner_id="LSParser" description="&#10;      &lt;p&gt;&#10;&#9;Parse an XML document from a location identified by a&#10;&#9;URI reference &lt;bibref ref=&quot;URIRef&quot;&gt;&lt;/bibref&gt;. If the URI&#10;&#9;contains a fragment identifier (see section 4.1 in&#10;&#9;&lt;bibref ref=&quot;URIRef&quot;&gt;&lt;/bibref&gt;), the behavior is not defined by&#10;&#9;this specification, future versions of this&#10;&#9;specification may define the behavior.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;          If the &lt;code&gt;LSParser&lt;/code&gt; is a synchronous&#10;          &lt;code&gt;LSParser&lt;/code&gt;, the newly created and populated&#10;          &lt;code&gt;Document&lt;/code&gt; is returned, or &lt;code&gt;null&lt;/code&gt; if an&#10;          error occured. If the &lt;code&gt;LSParser&lt;/code&gt; is asynchronous,&#10;          &lt;code&gt;null&lt;/code&gt; is returned since the document object may&#10;          not yet be constructed when this method returns.&#10;        &lt;/p&gt;&#10;      ">
        <parameter id="" name="uri" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;The location of the XML document to be read.&lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="parseWithContext" name="parseWithContext" return_type="Node" owner_id="LSParser" description="&#10;      &lt;p&gt;&#10;        Parse an XML fragment from a resource identified by a&#10;        &lt;code&gt;LSInput&lt;/code&gt; and insert the content into an existing&#10;        document at the position specified with the&#10;        &lt;code&gt;context&lt;/code&gt; and &lt;code&gt;action&lt;/code&gt; arguments. When&#10;        parsing the input stream, the context node (or its parent,&#10;        depending on where the result will be inserted) is used for&#10;        resolving unbound namespace prefixes. The context node's&#10;        &lt;code&gt;ownerDocument&lt;/code&gt; node (or the node itself if the&#10;        node of type &lt;code&gt;DOCUMENT_NODE&lt;/code&gt;) is used to resolve&#10;        default attributes and entity references.&#10;      &lt;/p&gt;&#10;&#10;      &lt;p&gt;&#10;        As the new data is inserted into the document, at least one&#10;        mutation event is fired per new immediate child or sibling of&#10;        the context node.&#10;      &lt;/p&gt;&#10;&#10;      &lt;p&gt;&#10;        If the context node is a &lt;code&gt;Document&lt;/code&gt; node and the&#10;        action is &lt;code&gt;ACTION_REPLACE_CHILDREN&lt;/code&gt;, then the&#10;        document that is passed as the context node will be changed&#10;        such that its &lt;code&gt;xmlEncoding&lt;/code&gt;,&#10;        &lt;code&gt;documentURI&lt;/code&gt;, &lt;code&gt;xmlVersion&lt;/code&gt;,&#10;        &lt;code&gt;inputEncoding&lt;/code&gt;, &lt;code&gt;xmlStandalone&lt;/code&gt;, and all&#10;        other such attributes are set to what they would be set to if&#10;        the input source was parsed using&#10;        &lt;code&gt;LSParser.parse()&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;&#10;      &lt;p&gt;&#10;        This method is always synchronous, even if the&#10;        &lt;code&gt;LSParser&lt;/code&gt; is asynchronous&#10;        (&lt;code&gt;LSParser.async&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;).&#10;      &lt;/p&gt;&#10;&#10;      &lt;p&gt;&#10;        If an error occurs while parsing, the caller is notified through&#10;        the &lt;code&gt;ErrorHandler&lt;/code&gt; instance associated with the&#10;        &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;error-handler&lt;/xspecref&gt;&quot;&#10;        parameter of the &lt;code&gt;DOMConfiguration&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;&#10;      &lt;p&gt;&#10;        When calling &lt;code&gt;parseWithContext&lt;/code&gt;, the values of the&#10;        following configuration parameters will be ignored and their&#10;        default values will always be used instead: &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-validate&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;validate&lt;/xspecref&gt;&quot;,&#10;        &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-validate-if-schema&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;validate-if-schema&lt;/xspecref&gt;&quot;,&#10;        and &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-element-content-whitespace&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;element-content-whitespace&lt;/xspecref&gt;&quot;. Other&#10;        parameters will be treated normally, and the parser is&#10;        expected to call the &lt;code&gt;LSParserFilter&lt;/code&gt; just as if a&#10;        whole document was parsed.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;          Return the node that is the result of the parse&#10;          operation. If the result is more than one top-level node,&#10;          the first one is returned.&#10;        &lt;/p&gt;&#10;      ">
        <parameter id="" name="input" type="LSInput" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    The &lt;code&gt;LSInput&lt;/code&gt; from which the source document is&#10;&#9;    to be read. The source document must be an XML fragment,&#10;&#9;    i.e. anything except a complete XML document (except in the&#10;&#9;    case where the context node of type&#10;&#9;    &lt;code&gt;DOCUMENT_NODE&lt;/code&gt;, and the action is&#10;&#9;    &lt;code&gt;ACTION_REPLACE_CHILDREN&lt;/code&gt;), a DOCTYPE (internal&#10;&#9;    subset), entity declaration(s), notation declaration(s), or&#10;&#9;    XML or text declaration(s).&#10;&#9;  &lt;/p&gt;&#10;        "/>
        <parameter id="" name="contextArg" type="Node" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    The node that is used as the context for the data that is&#10;&#9;    being parsed. This node must be a &lt;code&gt;Document&lt;/code&gt;&#10;&#9;    node, a &lt;code&gt;DocumentFragment&lt;/code&gt; node, or a node of a&#10;&#9;    type that is allowed as a child of an &lt;code&gt;Element&lt;/code&gt;&#10;&#9;    node, e.g. it cannot be an &lt;code&gt;Attribute&lt;/code&gt; node.&#10;&#9;  &lt;/p&gt;&#10;        "/>
        <parameter id="" name="action" type="unsigned short" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;            This parameter describes which action should be taken&#10;&#9;    between the new set of nodes being inserted and the&#10;&#9;    existing children of the context node. The set of possible&#10;&#9;    actions is defined in &lt;code&gt;ACTION_TYPES&lt;/code&gt; above.&#10;          &lt;/p&gt;&#10;        "/>
      </method>
      <method id="abort" name="abort" return_type="void" owner_id="LSParser" description="&#10;      &lt;p&gt;&#10;        Abort the loading of the document that is currently being&#10;        loaded by the &lt;code&gt;LSParser&lt;/code&gt;. If the&#10;        &lt;code&gt;LSParser&lt;/code&gt; is currently not busy, a call to this&#10;        method does nothing.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;      "/>
    </methods>
    <properties>
      <property name="domConfig" id="domConfig" type="DOMConfiguration" description="&#10;      &lt;p&gt;&#10;&#9;The &lt;code&gt;DOMConfiguration&lt;/code&gt; object used when parsing an&#10;&#9;input source. This &lt;code&gt;DOMConfiguration&lt;/code&gt; is specific to&#10;&#9;the parse operation. No parameter values from this&#10;&#9;&lt;code&gt;DOMConfiguration&lt;/code&gt; object are passed automatically to&#10;&#9;the &lt;code&gt;DOMConfiguration&lt;/code&gt; object on the&#10;&#9;&lt;code&gt;Document&lt;/code&gt; that is created, or used, by the parse&#10;&#9;operation. The DOM application is responsible for passing any&#10;&#9;needed parameter values from this &lt;code&gt;DOMConfiguration&lt;/code&gt;&#10;&#9;object to the &lt;code&gt;DOMConfiguration&lt;/code&gt; object referenced by&#10;&#9;the &lt;code&gt;Document&lt;/code&gt; object.&#10;      &lt;/p&gt;&#10;      &lt;p&gt;&#10;&#9;In addition to the parameters recognized in on the &lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMConfiguration&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;DOMConfiguration&lt;/xspecref&gt;&#10;&#9;interface defined in &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt;, the&#10;&#9;&lt;code&gt;DOMConfiguration&lt;/code&gt; objects for &lt;code&gt;LSParser&lt;/code&gt;&#10;&#9;add or modify the following parameters:&#10;      &lt;/p&gt;&#10;      &lt;glist&gt;&#10;&#9;&lt;gitem&gt;&#10;&#9;  &lt;label id=&quot;parameter-charset-overrides-xml-encoding&quot;&gt;&lt;code&gt;&quot;charset-overrides-xml-encoding&quot;&lt;/code&gt;&lt;/label&gt;&#10;&#9;  &lt;def&gt;&#10;&#9;    &lt;glist&gt;&#10;&#9;      &lt;gitem&gt;&#10;&#9;&#9;&lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;&#9;&#9;&lt;def&gt;&#10;&#9;&#9;  &lt;p&gt;[&lt;emph&gt;optional&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;&#9;&#9;  &lt;p&gt;&#10;&#9;&#9;    If a higher level protocol such as HTTP &lt;bibref role=&quot;informative&quot; ref=&quot;RFC2616&quot;&gt;&lt;/bibref&gt; provides an&#10;&#9;&#9;    indication of the character encoding of the input&#10;&#9;&#9;    stream being processed, that will override any&#10;&#9;&#9;    encoding specified in the XML declaration or the&#10;&#9;&#9;    Text declaration (see also section 4.3.3, &quot;Character&#10;&#9;&#9;    Encoding in Entities&quot;, in &lt;bibref ref=&quot;XML&quot;&gt;&lt;/bibref&gt;). Explicitly setting an encoding in the&#10;&#9;&#9;    &lt;code&gt;LSInput&lt;/code&gt; overrides any encoding from&#10;&#9;&#9;    the protocol.&#10;&#9;&#9;  &lt;/p&gt;&#10;&#9;&#9;&lt;/def&gt;&#10;&#9;      &lt;/gitem&gt;&#10;&#9;      &lt;gitem&gt;&#10;&#9;&#9;&lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;&#9;&#9;&lt;def&gt;&#10;&#9;&#9;  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;]&lt;/p&gt;&#10;&#9;&#9;  &lt;p&gt;&#10;&#9;&#9;    The parser ignores any character set encoding&#10;&#9;&#9;    information from higher-level protocols.&#10;&#9;&#9;  &lt;/p&gt;&#10;&#9;&#9;&lt;/def&gt;&#10;&#9;      &lt;/gitem&gt;&#10;&#9;    &lt;/glist&gt;&#10;&#9;  &lt;/def&gt;&#10;&#9;&lt;/gitem&gt;&#10;&#9;&lt;gitem&gt;&#10;&#9;  &lt;label id=&quot;parameter-disallow-doctype&quot;&gt;&lt;code&gt;&quot;disallow-doctype&quot;&lt;/code&gt;&lt;/label&gt;&#10;&#9;  &lt;def&gt;&#10;&#9;    &lt;glist&gt;&#10;&#9;      &lt;gitem&gt;&#10;&#9;&#9;&lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;&#9;&#9;&lt;def&gt;&#10;&#9;&#9;  &lt;p&gt;[&lt;emph&gt;optional&lt;/emph&gt;]&lt;/p&gt;&#10;&#9;&#9;  &lt;p&gt;&#10;&#9;&#9;    Throw a fatal &lt;b&gt;&quot;doctype-not-allowed&quot;&lt;/b&gt; error&#10;&#9;&#9;    if a doctype node is found while parsing the&#10;&#9;&#9;    document. This is useful when dealing with&#10;&#9;&#9;    things like SOAP envelopes where doctype nodes are&#10;&#9;&#9;    not allowed.&#10;&#9;&#9;  &lt;/p&gt;&#10;&#9;&#9;&lt;/def&gt;&#10;&#9;      &lt;/gitem&gt;&#10;&#9;      &lt;gitem&gt;&#10;&#9;&#9;&lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;&#9;&#9;&lt;def&gt;&#10;&#9;&#9;  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;&#9;&#9;  &lt;p&gt;&#10;&#9;&#9;    Allow doctype nodes in the document.&#10;&#9;&#9;  &lt;/p&gt;&#10;&#9;&#9;&lt;/def&gt;&#10;&#9;      &lt;/gitem&gt;&#10;&#9;    &lt;/glist&gt;&#10;&#9;  &lt;/def&gt;&#10;&#9;&lt;/gitem&gt;&#10;&#9;&lt;gitem&gt;&#10;&#9;  &lt;label id=&quot;parameter-ignore-unknown-character-denormalizations&quot;&gt;&lt;code&gt;&quot;ignore-unknown-character-denormalizations&quot;&lt;/code&gt;&lt;/label&gt;&#10;&#9;  &lt;def&gt;&#10;&#9;    &lt;glist&gt;&#10;&#9;      &lt;gitem&gt;&#10;&#9;&#9;&lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;&#9;&#9;&lt;def&gt;&#10;&#9;&#9;  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;&#9;&#9;  &lt;p&gt;&#10;&#9;&#9;    If, while verifying full normalization when &lt;bibref ref=&quot;XML11&quot;&gt;&lt;/bibref&gt; is supported, a processor encounters&#10;&#9;&#9;    characters for which it cannot determine the&#10;&#9;&#9;    normalization properties, then the processor will&#10;&#9;&#9;    ignore any possible denormalizations caused by these&#10;&#9;&#9;    characters.&#10;&#9;&#9;  &lt;/p&gt;&#10;                  &lt;p&gt;&#10;                    This parameter is ignored for &lt;bibref ref=&quot;XML&quot;&gt;&lt;/bibref&gt;.&#10;                  &lt;/p&gt;&#10;&#9;&#9;&lt;/def&gt;&#10;&#9;      &lt;/gitem&gt;&#10;&#9;      &lt;gitem&gt;&#10;&#9;&#9;&lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;&#9;&#9;&lt;def&gt;&#10;&#9;&#9;  &lt;p&gt;[&lt;emph&gt;optional&lt;/emph&gt;]&lt;/p&gt;&#10;&#9;&#9;  &lt;p&gt;&#10;&#9;&#9;    Report an fatal&#10;&#9;&#9;    &lt;b&gt;&quot;unknown-character-denormalization&quot;&lt;/b&gt; error if&#10;&#9;&#9;    a character is encountered for which the processor&#10;&#9;&#9;    cannot determine the normalization properties.&#10;&#9;&#9;  &lt;/p&gt;&#10;&#9;&#9;&lt;/def&gt;&#10;&#9;      &lt;/gitem&gt;&#10;&#9;    &lt;/glist&gt;&#10;&#9;  &lt;/def&gt;&#10;&#9;&lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label id=&quot;parameter-infoset&quot;&gt;&lt;code&gt;&quot;infoset&quot;&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      See the definition of &lt;code&gt;DOMConfiguration&lt;/code&gt; for&#10;&#9;      a description of this parameter. Unlike in &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt;, this parameter will default to&#10;&#9;      &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;LSParser&lt;/code&gt;.&#10;&#9;    &lt;/p&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;&#9;&lt;gitem&gt;&#10;&#9;&lt;label id=&quot;parameter-namespaces&quot;&gt;&lt;code&gt;&quot;namespaces&quot;&lt;/code&gt;&lt;/label&gt;&#10;&#9;&lt;def&gt;&#10;&#9;  &lt;glist&gt;&#10;&#9;    &lt;gitem&gt;&#10;&#9;      &lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;&#9;      &lt;def&gt;&#10;&#9;&#9;&lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;&#9;&#9;&lt;p&gt;&#10;&#9;&#9;  Perform the namespace processing as defined in&#10;&#9;&#9;  &lt;bibref ref=&quot;Namespaces&quot;&gt;&lt;/bibref&gt; and &lt;bibref ref=&quot;Namespaces11&quot;&gt;&lt;/bibref&gt;.&#10;&#9;&#9;&lt;/p&gt;&#10;&#9;      &lt;/def&gt;&#10;&#9;    &lt;/gitem&gt;&#10;&#9;    &lt;gitem&gt;&#10;&#9;      &lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;&#9;      &lt;def&gt;&#10;&#9;&#9;&lt;p&gt;[&lt;emph&gt;optional&lt;/emph&gt;]&lt;/p&gt;&#10;&#9;&#9;&lt;p&gt;&#10;&#9;&#9;  Do not perform the namespace processing.&#10;&#9;&#9;&lt;/p&gt;&#10;&#9;      &lt;/def&gt;&#10;&#9;    &lt;/gitem&gt;&#10;&#9;  &lt;/glist&gt;&#10;&#9;&lt;/def&gt;&#10;      &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label id=&quot;parameter-resource-resolver&quot;&gt;&lt;code&gt;&quot;resource-resolver&quot;&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;&#9;    &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;]&lt;/p&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      A reference to a &lt;code&gt;LSResourceResolver&lt;/code&gt;&#10;&#9;      object, or null. If the value of this parameter is not&#10;&#9;      null when an external resource (such as an external XML&#10;&#9;      entity or an XML schema location) is encountered, the&#10;&#9;      implementation will request that the&#10;&#9;      &lt;code&gt;LSResourceResolver&lt;/code&gt; referenced in this&#10;&#9;      parameter resolves the resource.&#10;&#9;    &lt;/p&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;&#9;&lt;gitem&gt;&#10;&#9;  &lt;label id=&quot;parameter-supported-media-types-only&quot;&gt;&lt;code&gt;&quot;supported-media-types-only&quot;&lt;/code&gt;&lt;/label&gt;&#10;&#9;  &lt;def&gt;&#10;&#9;    &lt;glist&gt;&#10;&#9;      &lt;gitem&gt;&#10;&#9;&#9;&lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;&#9;&#9;&lt;def&gt;&#10;&#9;&#9;  &lt;p&gt;[&lt;emph&gt;optional&lt;/emph&gt;]&lt;/p&gt;&#10;&#9;&#9;  &lt;p&gt;&#10;                    Check that the media type of the parsed resource&#10;                    is a supported media type. If an unsupported media&#10;                    type is encountered, a fatal error of type&#10;                    &lt;b&gt;&quot;unsupported-media-type&quot;&lt;/b&gt; will be&#10;                    raised. The media types defined in &lt;bibref ref=&quot;RFC3023&quot;&gt;&lt;/bibref&gt; must always be accepted.&#10;&#9;&#9;  &lt;/p&gt;&#10;&#9;&#9;&lt;/def&gt;&#10;&#9;      &lt;/gitem&gt;&#10;&#9;      &lt;gitem&gt;&#10;&#9;&#9;&lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;&#9;&#9;&lt;def&gt;&#10;&#9;&#9;  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;&#9;&#9;  &lt;p&gt;&#10;&#9;&#9;    Accept any media type.&#10;&#9;&#9;  &lt;/p&gt;&#10;&#9;&#9;&lt;/def&gt;&#10;&#9;      &lt;/gitem&gt;&#10;&#9;    &lt;/glist&gt;&#10;&#9;  &lt;/def&gt;&#10;&#9;&lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label id=&quot;parameter-validate&quot;&gt;&lt;code&gt;&quot;validate&quot;&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      See the definition of &lt;code&gt;DOMConfiguration&lt;/code&gt; for a&#10;&#9;      description of this parameter. Unlike in &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt;, the processing of the internal subset is&#10;&#9;      always accomplished, even if this parameter is set to&#10;&#9;      &lt;code&gt;false&lt;/code&gt;.&#10;&#9;    &lt;/p&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label id=&quot;parameter-validate-if-schema&quot;&gt;&lt;code&gt;&quot;validate-if-schema&quot;&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      See the definition of &lt;code&gt;DOMConfiguration&lt;/code&gt; for a&#10;&#9;      description of this parameter. Unlike in &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt;, the processing of the internal subset is&#10;&#9;      always accomplished, even if this parameter is set to&#10;&#9;      &lt;code&gt;false&lt;/code&gt;.&#10;&#9;    &lt;/p&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label id=&quot;parameter-well-formed&quot;&gt;&lt;code&gt;&quot;well-formed&quot;&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      See the definition of &lt;code&gt;DOMConfiguration&lt;/code&gt; for a&#10;&#9;      description of this parameter. Unlike in &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt;, this parameter cannot be set to&#10;&#9;      &lt;code&gt;false&lt;/code&gt;.&#10;&#9;    &lt;/p&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;      &lt;/glist&gt;&#10;    " readonly="true" owner_id="LSParser"/>
      <property name="filter" id="filter" type="LSParserFilter" description="&#10;      &lt;p&gt;&#10;&#9;When a filter is provided, the implementation will call out to&#10;&#9;the filter as it is constructing the DOM tree structure. The&#10;&#9;filter can choose to remove elements from the document being&#10;&#9;constructed, or to terminate the parsing early.&#10;      &lt;/p&gt;&#10;      &lt;p&gt;&#10;&#9;The filter is invoked after the operations requested by the&#10;&#9;&lt;code&gt;DOMConfiguration&lt;/code&gt; parameters have been applied. For&#10;&#9;example, if &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-validate&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;validate&lt;/xspecref&gt;&quot;&#10;&#9;is set to &lt;code&gt;true&lt;/code&gt;, the validation is done before&#10;&#9;invoking the filter.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="LSParser"/>
      <property name="async" id="async" type="boolean" description="&#10;      &lt;p&gt;&#10;        &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;LSParser&lt;/code&gt; is asynchronous,&#10;        &lt;code&gt;false&lt;/code&gt; if it is synchronous.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="LSParser"/>
      <property name="busy" id="busy" type="boolean" description="&#10;      &lt;p&gt;&#10;        &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;LSParser&lt;/code&gt; is currently&#10;        busy loading a document, otherwise &lt;code&gt;false&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="LSParser"/>
    </properties>
  </interface>
  <interface id="LSInput" name="LSInput" description="&#10;    &lt;p&gt;&#10;      This interface represents an input source for data.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      This interface allows an application to encapsulate information&#10;      about an input source in a single object, which may include a&#10;      public identifier, a system identifier, a byte stream (possibly&#10;      with a specified encoding), a base URI, and/or a character&#10;      stream.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      The exact definitions of a byte stream and a character stream&#10;      are binding dependent.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      The application is expected to provide objects that implement&#10;      this interface whenever such objects are needed. The application&#10;      can either provide its own objects that implement this&#10;      interface, or it can use the generic factory method&#10;      &lt;code&gt;DOMImplementationLS.createLSInput()&lt;/code&gt; to create&#10;      objects that implement this interface.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      The &lt;code&gt;LSParser&lt;/code&gt; will use the &lt;code&gt;LSInput&lt;/code&gt;&#10;      object to determine how to read data. The &lt;code&gt;LSParser&lt;/code&gt;&#10;      will look at the different inputs specified in the&#10;      &lt;code&gt;LSInput&lt;/code&gt; in the following order to know which one&#10;      to read from, the first one that is not null and not an empty&#10;      string will be used:&#10;      &lt;olist&gt;&#10;        &lt;item&gt;&#10;          &lt;p&gt;&#10;            &lt;code&gt;LSInput.characterStream&lt;/code&gt;&#10;          &lt;/p&gt;&#10;        &lt;/item&gt;&#10;        &lt;item&gt;&#10;          &lt;p&gt;&#10;            &lt;code&gt;LSInput.byteStream&lt;/code&gt;&#10;          &lt;/p&gt;&#10;        &lt;/item&gt;&#10;        &lt;item&gt;&#10;          &lt;p&gt;&#10;            &lt;code&gt;LSInput.stringData&lt;/code&gt;&#10;          &lt;/p&gt;&#10;        &lt;/item&gt;&#10;        &lt;item&gt;&#10;          &lt;p&gt;&#10;            &lt;code&gt;LSInput.systemId&lt;/code&gt;&#10;          &lt;/p&gt;&#10;        &lt;/item&gt;&#10;        &lt;item&gt;&#10;          &lt;p&gt;&#10;            &lt;code&gt;LSInput.publicId&lt;/code&gt;&#10;          &lt;/p&gt;&#10;        &lt;/item&gt;&#10;      &lt;/olist&gt;&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      If all inputs are null, the &lt;code&gt;LSParser&lt;/code&gt; will report a&#10;      &lt;code&gt;DOMError&lt;/code&gt; with its &lt;code&gt;DOMError.type&lt;/code&gt; set to&#10;      &lt;code&gt;&quot;no-input-specified&quot;&lt;/code&gt; and its&#10;      &lt;code&gt;DOMError.severity&lt;/code&gt; set to&#10;      &lt;code&gt;DOMError.SEVERITY_FATAL_ERROR&lt;/code&gt;.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      &lt;code&gt;LSInput&lt;/code&gt; objects belong to the application. The DOM&#10;      implementation will never modify them (though it may make copies&#10;      and modify the copies, if necessary).&#10;    &lt;/p&gt;&#10;  ">
    <methods/>
    <properties>
      <property name="characterStream" id="characterStream" type="LSReader" description="&#10;      &lt;p&gt;&#10;        An attribute of a language and binding dependent type that&#10;        represents a stream of &lt;termref def=&quot;dt-16-bit-unit&quot;&gt;16-bit&#10;        units&lt;/termref&gt;. The application must encode the stream using&#10;        UTF-16 (defined in &lt;bibref ref=&quot;Unicode&quot;&gt;&lt;/bibref&gt; and in &lt;bibref ref=&quot;ISO10646&quot;&gt;&lt;/bibref&gt;). It is not a requirement to have an XML&#10;        declaration when using character streams. If an XML declaration&#10;        is present, the value of the encoding attribute will be ignored.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="LSInput"/>
      <property name="byteStream" id="byteStream" type="LSInputStream" description="&#10;      &lt;p&gt;&#10;        An attribute of a language and binding dependent type that&#10;        represents a stream of bytes.&#10;      &lt;/p&gt;&#10;&#10;      &lt;p&gt;&#10;        If the application knows the character encoding of the byte&#10;        stream, it should set the encoding attribute. Setting the&#10;        encoding in this way will override any encoding specified in&#10;        an XML declaration in the data.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="LSInput"/>
      <property name="stringData" id="stringData" type="DOMString" description="&#10;      &lt;p&gt;&#10;        String data to parse. If provided, this will always be treated&#10;        as a sequence of &lt;termref def=&quot;dt-16-bit-unit&quot;&gt;16-bit&#10;        units&lt;/termref&gt; (UTF-16 encoded characters). It is not a&#10;        requirement to have an XML declaration when using&#10;        &lt;code&gt;stringData&lt;/code&gt;. If an XML declaration is present, the&#10;        value of the encoding attribute will be ignored.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="LSInput"/>
      <property name="systemId" id="systemId" type="DOMString" description="&#10;      &lt;p&gt;&#10;        The system identifier, a URI reference &lt;bibref ref=&quot;URIRef&quot;&gt;&lt;/bibref&gt;,&#10;        for this input source. The system identifier is optional if&#10;        there is a byte stream, a character stream, or string data. It&#10;        is still useful to provide one, since the application will use&#10;        it to resolve any relative URIs and can include it in error&#10;        messages and warnings. (The LSParser will only attempt to fetch&#10;        the resource identified by the URI reference if there is no&#10;        other input available in the input source.)&#10;      &lt;/p&gt;&#10;&#10;      &lt;p&gt;&#10;        If the application knows the character encoding of the object&#10;        pointed to by the system identifier, it can set the encoding&#10;        using the &lt;code&gt;encoding&lt;/code&gt; attribute.&#10;      &lt;/p&gt;&#10;&#10;      &lt;p&gt;&#10;        If the specified system ID is a relative URI reference (see&#10;        section 5 in &lt;bibref ref=&quot;URIRef&quot;&gt;&lt;/bibref&gt;), the DOM implementation&#10;        will attempt to resolve the relative URI with the&#10;        &lt;code&gt;baseURI&lt;/code&gt; as the base, if that fails, the behavior is&#10;        implementation dependent.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="LSInput"/>
      <property name="publicId" id="publicId" type="DOMString" description="&#10;      &lt;p&gt;&#10;        The public identifier for this input source. This may be&#10;        mapped to an input source using an implementation dependent&#10;        mechanism (such as catalogues or other mappings). The public&#10;        identifier, if specified, may also be reported as part of the&#10;        location information when errors are reported.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="LSInput"/>
      <property name="baseURI" id="baseURI" type="DOMString" description="&#10;      &lt;p&gt;&#10;        The base URI to be used (see section 5.1.4 in &lt;bibref ref=&quot;URIRef&quot;&gt;&lt;/bibref&gt;) for resolving a relative &lt;code&gt;systemId&lt;/code&gt;&#10;        to an absolute URI.&#10;      &lt;/p&gt;&#10;      &lt;p&gt;&#10;        If, when used, the base URI is itself a relative URI, an empty&#10;        string, or null, the behavior is implementation dependent.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="LSInput"/>
      <property name="encoding" id="encoding" type="DOMString" description="&#10;      &lt;p&gt;&#10;        The character encoding, if known. The encoding must be a&#10;        string acceptable for an XML encoding declaration (&lt;bibref ref=&quot;XML&quot;&gt;&lt;/bibref&gt; section 4.3.3 &quot;Character Encoding in Entities&quot;).&#10;      &lt;/p&gt;&#10;&#10;      &lt;p&gt;&#10;        This attribute has no effect when the application provides a&#10;        character stream or string data. For other sources of input, an&#10;        encoding specified by means of this attribute will override&#10;        any encoding specified in the XML declaration or the Text&#10;        declaration, or an encoding obtained from a higher level&#10;        protocol, such as HTTP &lt;bibref role=&quot;informative&quot; ref=&quot;RFC2616&quot;&gt;&lt;/bibref&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="LSInput"/>
      <property name="certifiedText" id="certifiedText" type="boolean" description="&#10;      &lt;p&gt;&#10;        If set to true, assume that the input is certified (see&#10;        section 2.13 in &lt;bibref ref=&quot;XML11&quot;&gt;&lt;/bibref&gt;) when parsing &lt;bibref ref=&quot;XML11&quot;&gt;&lt;/bibref&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="LSInput"/>
    </properties>
  </interface>
  <interface id="LSResourceResolver" name="LSResourceResolver" description="&#10;    &lt;p&gt;&#10;      &lt;code&gt;LSResourceResolver&lt;/code&gt; provides a way for applications&#10;      to redirect references to external resources.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      Applications needing to implement custom handling for external&#10;      resources can implement this interface and register their&#10;      implementation by setting the &quot;resource-resolver&quot; parameter of&#10;      &lt;code&gt;DOMConfiguration&lt;/code&gt; objects attached to&#10;      &lt;code&gt;LSParser&lt;/code&gt; and &lt;code&gt;LSSerializer&lt;/code&gt;. It can also&#10;      be register on &lt;code&gt;DOMConfiguration&lt;/code&gt; objects attached to&#10;      &lt;code&gt;Document&lt;/code&gt; if the &quot;LS&quot; feature is supported.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      The &lt;code&gt;LSParser&lt;/code&gt; will then allow the application to&#10;      intercept any external entities, including the external DTD subset&#10;      and external parameter entities, before including them. The&#10;      top-level document entity is never passed to the&#10;      &lt;code&gt;resolveResource&lt;/code&gt; method.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      Many DOM applications will not need to implement this interface,&#10;      but it will be especially useful for applications that build XML&#10;      documents from databases or other specialized input sources, or&#10;      for applications that use URNs.&#10;    &lt;/p&gt;&#10;&#10;    &lt;note&gt;&#10;      &lt;p&gt;&#10;&#9;&lt;code&gt;LSResourceResolver&lt;/code&gt; is based on the SAX2 &lt;bibref ref=&quot;SAX&quot;&gt;&lt;/bibref&gt; &lt;code&gt;EntityResolver&lt;/code&gt; interface.&#10;      &lt;/p&gt;&#10;    &lt;/note&gt;&#10;  ">
    <methods>
      <method id="resolveResource" name="resolveResource" return_type="LSInput" owner_id="LSResourceResolver" description="&#10;      &lt;p&gt;&#10;        Allow the application to resolve external resources.&#10;      &lt;/p&gt;&#10;      &#10;      &lt;p&gt;&#10;        The &lt;code&gt;LSParser&lt;/code&gt; will call this method before opening&#10;        any external resource, including the external DTD subset,&#10;        external entities referenced within the DTD, and external&#10;        entities referenced within the document element (however, the&#10;        top-level document entity is not passed to this method). The&#10;        application may then request that the &lt;code&gt;LSParser&lt;/code&gt;&#10;        resolve the external resource itself, that it use an alternative&#10;        URI, or that it use an entirely different input source.&#10;      &lt;/p&gt;&#10;&#10;      &lt;p&gt;&#10;        Application writers can use this method to redirect external&#10;&#9;system identifiers to secure and/or local URI, to look up&#10;&#9;public identifiers in a catalogue, or to read an entity from a&#10;&#9;database or other input source (including, for example, a&#10;&#9;dialog box).&#10;      &lt;/p&gt;&#10;    " return_description="&#10;&#9;&lt;p&gt;&#10;          A &lt;code&gt;LSInput&lt;/code&gt; object describing the new input&#10;&#9;  source, or &lt;code&gt;null&lt;/code&gt; to request that the parser open&#10;&#9;  a regular URI connection to the resource.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="type" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;            The type of the resource being resolved. For XML &lt;bibref ref=&quot;XML&quot; role=&quot;informative&quot;&gt;&lt;/bibref&gt; resources (i.e. entities),&#10;&#9;    applications must use the value&#10;&#9;    &lt;code&gt;&quot;http://www.w3.org/TR/REC-xml&quot;&lt;/code&gt;. For XML&#10;&#9;    Schema &lt;bibref ref=&quot;XMLSchema1&quot; role=&quot;informative&quot;&gt;&lt;/bibref&gt;,&#10;&#9;    applications must use the value&#10;&#9;    &lt;code&gt;&quot;http://www.w3.org/2001/XMLSchema&quot;&lt;/code&gt;. Other&#10;&#9;    types of resources are outside the scope of this&#10;&#9;    specification and therefore should recommend an absolute&#10;&#9;    URI in order to use this method.&#10;          &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;            The namespace of the resource being resolved, e.g. the&#10;            target namespace of the XML Schema &lt;bibref ref=&quot;XMLSchema1&quot; role=&quot;informative&quot;&gt;&lt;/bibref&gt; when resolving XML Schema resources.&#10;          &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="publicId" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;            The public identifier of the external entity being&#10;&#9;    referenced, or &lt;code&gt;null&lt;/code&gt; if no public identifier&#10;&#9;    was supplied or if the resource is not an entity.&#10;          &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="systemId" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;            The system identifier, a URI reference &lt;bibref ref=&quot;URIRef&quot;&gt;&lt;/bibref&gt;, of the external resource being referenced,&#10;&#9;    or &lt;code&gt;null&lt;/code&gt; if no system identifier was supplied.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="baseURI" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;            The absolute base URI of the resource being parsed, or&#10;&#9;    &lt;code&gt;null&lt;/code&gt; if there is no base URI.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
    </methods>
    <properties/>
  </interface>
  <interface id="LSParserFilter" name="LSParserFilter" description="&#10;    &lt;p&gt;&#10;      &lt;code&gt;LSParserFilter&lt;/code&gt;s provide applications the ability to&#10;      examine nodes as they are being constructed while parsing.&#10;      As each node is examined, it may be modified or removed,&#10;      or the entire parse may be terminated early.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      At the time any of the filter methods are called by the parser,&#10;      the owner Document and DOMImplementation objects exist and are&#10;      accessible. The document element is never passed to the&#10;      &lt;code&gt;LSParserFilter&lt;/code&gt; methods, i.e. it is not possible to&#10;      filter out the document element. &lt;code&gt;Document&lt;/code&gt;,&#10;      &lt;code&gt;DocumentType&lt;/code&gt;, &lt;code&gt;Notation&lt;/code&gt;,&#10;      &lt;code&gt;Entity&lt;/code&gt;, and &lt;code&gt;Attr&lt;/code&gt; nodes are never passed&#10;      to the &lt;code&gt;acceptNode&lt;/code&gt; method on the filter. The child&#10;      nodes of an &lt;code&gt;EntityReference&lt;/code&gt; node are passed to the&#10;      filter if the parameter &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-entities&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;entities&lt;/xspecref&gt;&quot;&#10;      is set to &lt;code&gt;false&lt;/code&gt;. Note that, as described by the&#10;      parameter &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-entities&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;entities&lt;/xspecref&gt;&quot;,&#10;      unexpanded entity reference nodes are never discarded and are&#10;      always passed to the filter.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      All validity checking while parsing a document occurs on the&#10;      source document as it appears on the input stream, not on the&#10;      DOM document as it is built in memory.  With filters, the&#10;      document in memory may be a subset of the document on the&#10;      stream, and its validity may have been affected by the&#10;      filtering.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      All default attributes must be present on elements when the&#10;      elements are passed to the filter methods. All other default&#10;      content must be passed to the filter methods.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      DOM applications must not raise exceptions in a filter. The&#10;      effect of throwing exceptions from a filter is DOM implementation&#10;      dependent.&#10;    &lt;/p&gt;&#10;  ">
    <methods>
      <method id="startElement" name="startElement" return_type="unsigned short" owner_id="LSParserFilter" description="&#10;      &#10;      &lt;p&gt;&#10;        The parser will call this method after each&#10;&#9;&lt;code&gt;Element&lt;/code&gt; start tag has been scanned, but before&#10;&#9;the remainder of the &lt;code&gt;Element&lt;/code&gt; is processed.  The&#10;&#9;intent is to allow the element, including any children, to be&#10;&#9;efficiently skipped. Note that only element nodes are passed&#10;&#9;to the &lt;code&gt;startElement&lt;/code&gt; function.&#10;      &lt;/p&gt;&#10;&#10;      &lt;p&gt;The element node passed to &lt;code&gt;startElement&lt;/code&gt; for&#10;&#9;filtering will include all of the Element's attributes,&#10;&#9;but none of the children nodes.  The Element may not yet be&#10;&#9;in place in the document being constructed (it may not have&#10;&#9;a parent node.) &lt;/p&gt;&#10;      &#10;      &lt;p&gt;A &lt;code&gt;startElement&lt;/code&gt; filter function may access or change the&#10;&#9;attributes for the Element.  Changing Namespace declarations will&#10;&#9;have no effect on namespace resolution by the parser.&lt;/p&gt;&#10;      &#10;      &lt;p&gt;For efficiency, the Element node passed to the filter may not&#10;&#9;be the same one as is actually placed in the tree if the node&#10;&#9;is accepted.  And the actual node (node object identity) may&#10;&#9;be reused during the process of reading in and filtering a&#10;&#9;document.&lt;/p&gt;&#10;      &#10;    " return_description="&#9;&#10;&#9;&lt;ulist&gt;&#10;&#9;  &lt;item&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      &lt;code&gt;FILTER_ACCEPT&lt;/code&gt; if the &lt;code&gt;Element&lt;/code&gt;&#10;&#9;      should be included in the DOM document being built.&#10;&#9;    &lt;/p&gt;&#10;&#9;  &lt;/item&gt;&#10;&#9;  &lt;item&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      &lt;code&gt;FILTER_REJECT&lt;/code&gt; if the &lt;code&gt;Element&lt;/code&gt;&#10;&#9;      and all of its children should be rejected.&#10;&#9;    &lt;/p&gt;&#10;&#9;  &lt;/item&gt;&#10;&#9;  &lt;item&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      &lt;code&gt;FILTER_SKIP&lt;/code&gt; if the &lt;code&gt;Element&lt;/code&gt;&#10;&#9;      should be skipped. All of its children are inserted in&#10;&#9;      place of the skipped &lt;code&gt;Element&lt;/code&gt; node.&#10;&#9;    &lt;/p&gt;&#10;&#9;  &lt;/item&gt;&#10;&#9;  &lt;item&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      &lt;code&gt;FILTER_INTERRUPT&lt;/code&gt; if the filter wants to&#10;&#9;      stop the processing of the document. Interrupting the&#10;&#9;      processing of the document does no longer guarantee that&#10;&#9;      the resulting DOM tree is &lt;termref def=&quot;dt-well-formed&quot;&gt;XML well-formed&lt;/termref&gt;. The&#10;&#9;      &lt;code&gt;Element&lt;/code&gt; is rejected.&#10;&#9;    &lt;/p&gt;&#10;&#9;  &lt;/item&gt;&#10;&#9;&lt;/ulist&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  Returning any other values will result in unspecified&#10;&#9;  behavior.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="elementArg" type="Element" owner_id="" description="&lt;p&gt;The newly encountered element.  At the time&#10;&#9;    this method is called, the element is incomplete - it&#10;&#9;    will have its attributes, but no children.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="acceptNode" name="acceptNode" return_type="unsigned short" owner_id="LSParserFilter" description="&#10;      &lt;p&gt;This method will be called by the parser at the&#10;&#9;completion of the parsing of each node. The node and all&#10;&#9;of its descendants will exist and be complete. The parent&#10;&#9;node will also exist, although it may be incomplete,&#10;&#9;i.e. it may have additional children that have not yet&#10;&#9;been parsed. Attribute nodes are never passed to this&#10;&#9;function.&lt;/p&gt;&#10;      &#10;      &lt;p&gt;From within this method, the new node may be freely&#10;&#9;modified - children may be added or removed, text nodes&#10;&#9;modified, etc. The state of the rest of the document&#10;&#9;outside this node is not defined, and the affect of any&#10;&#9;attempt to navigate to, or to modify any other part of the&#10;&#9;document is undefined. &lt;/p&gt;&#10;      &#10;      &lt;p&gt;For validating parsers, the checks are made on the&#10;&#9;original document, before any modification by the filter.&#10;&#9;No validity checks are made on any document modifications&#10;&#9;made by the filter.&lt;/p&gt;&#10;      &#10;      &lt;p&gt;If this new node is rejected, the parser might reuse&#10;&#9;the new node and any of its descendants.&lt;/p&gt;&#10;      &#10;    " return_description="&#10;&#9;&lt;ulist&gt;&#10;&#9;  &lt;item&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      &lt;code&gt;FILTER_ACCEPT&lt;/code&gt; if this&#10;&#9;      &lt;code&gt;Node&lt;/code&gt; should be included in the DOM&#10;&#9;      document being built.&#10;&#9;    &lt;/p&gt;&#10;&#9;  &lt;/item&gt;&#10;&#9;  &lt;item&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      &lt;code&gt;FILTER_REJECT&lt;/code&gt; if the&#10;&#9;      &lt;code&gt;Node&lt;/code&gt; and all of its children should&#10;&#9;      be rejected.&#10;&#9;    &lt;/p&gt;&#10;&#9;  &lt;/item&gt;&#10;&#9;  &lt;item&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      &lt;code&gt;FILTER_SKIP&lt;/code&gt; if the &lt;code&gt;Node&lt;/code&gt;&#10;&#9;      should be skipped and the &lt;code&gt;Node&lt;/code&gt; should&#10;&#9;      be replaced by all the children of the&#10;&#9;      &lt;code&gt;Node&lt;/code&gt;.&#10;&#9;    &lt;/p&gt;&#10;&#9;  &lt;/item&gt;&#10;&#9;  &lt;item&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      &lt;code&gt;FILTER_INTERRUPT&lt;/code&gt; if the filter wants to&#10;&#9;      stop the processing of the document. Interrupting the&#10;&#9;      processing of the document does no longer guarantee that&#10;&#9;      the resulting DOM tree is &lt;termref def=&quot;dt-well-formed&quot;&gt;XML well-formed&lt;/termref&gt;. The&#10;&#9;      &lt;code&gt;Node&lt;/code&gt; is accepted and will be the last&#10;&#9;      completely parsed node.&#10;&#9;    &lt;/p&gt;&#10;&#9;  &lt;/item&gt;&#10;&#9;&lt;/ulist&gt;&#10;      ">
        <parameter id="" name="nodeArg" type="Node" owner_id="" description="&lt;p&gt;The newly constructed element.  At the time&#10;&#9;    this method is called, the element is complete - it&#10;&#9;    has all of its children (and their children,&#10;&#9;    recursively) and attributes, and is attached as a&#10;&#9;    child to its parent.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
      </method>
    </methods>
    <properties>
      <property name="whatToShow" id="whatToShow" type="unsigned long" description="&#10;      &lt;p&gt;&#10;&#9;Tells the &lt;code&gt;LSParser&lt;/code&gt; what types of nodes to show to&#10;&#9;the method &lt;code&gt;LSParserFilter.acceptNode&lt;/code&gt;. If a node is&#10;&#9;not shown to the filter using this attribute, it is&#10;&#9;automatically included in the DOM document being built. See&#10;&#9;&lt;code&gt;NodeFilter&lt;/code&gt; for definition of the constants. The&#10;&#9;constants &lt;code&gt;SHOW_ATTRIBUTE&lt;/code&gt;,&#10;&#9;&lt;code&gt;SHOW_DOCUMENT&lt;/code&gt;, &lt;code&gt;SHOW_DOCUMENT_TYPE&lt;/code&gt;,&#10;&#9;&lt;code&gt;SHOW_NOTATION&lt;/code&gt;, &lt;code&gt;SHOW_ENTITY&lt;/code&gt;, and&#10;&#9;&lt;code&gt;SHOW_DOCUMENT_FRAGMENT&lt;/code&gt; are meaningless here. Those&#10;&#9;nodes will never be passed to&#10;&#9;&lt;code&gt;LSParserFilter.acceptNode&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;&#10;      &lt;p&gt;&#10;        The constants used here are defined in &lt;bibref ref=&quot;DOM2Traversal-Range&quot;&gt;&lt;/bibref&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="LSParserFilter"/>
    </properties>
  </interface>
  <interface id="LSProgressEvent" name="LSProgressEvent" description="&#10;&#10;    &lt;p&gt;&#10;      This interface represents a progress event object that notifies&#10;      the application about progress as a document is parsed. It extends&#10;      the &lt;code&gt;Event&lt;/code&gt; interface defined in &lt;bibref ref=&quot;DOMEvents&quot; role=&quot;informative&quot;&gt;&lt;/bibref&gt;.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      The units used for the attributes &lt;code&gt;position&lt;/code&gt; and&#10;      &lt;code&gt;totalSize&lt;/code&gt; are not specified and can be implementation&#10;      and input dependent.&#10;    &lt;/p&gt;&#10;  " parent_id="events::Event">
    <methods/>
    <properties>
      <property name="input" id="input" type="LSInput" description="&#10;      &lt;p&gt;The input source that is being parsed.&lt;/p&gt;&#10;    " readonly="true" owner_id="LSProgressEvent"/>
      <property name="position" id="position" type="unsigned long" description="&#10;      &lt;p&gt;The current position in the input source, including all&#10;      external entities and other resources that have been read.&lt;/p&gt;&#10;    " readonly="true" owner_id="LSProgressEvent"/>
      <property name="totalSize" id="totalSize" type="unsigned long" description="&#10;      &lt;p&gt;The total size of the document including all external&#10;      resources, this number might change as a document is being&#10;      parsed if references to more external resources are seen. A value&#10;&#9;of &lt;code&gt;0&lt;/code&gt; is returned if the total size cannot be&#10;&#9;determined or estimated.&lt;/p&gt;&#10;    " readonly="true" owner_id="LSProgressEvent"/>
    </properties>
  </interface>
  <interface id="LSLoadEvent" name="LSLoadEvent" description="&#10;    &lt;p&gt;&#10;      This interface represents a load event object that signals&#10;      the completion of a document load.&#10;    &lt;/p&gt;    &#10;    &#10;  " parent_id="events::Event">
    <methods/>
    <properties>
      <property name="newDocument" id="newDocument" type="Document" description="&#10;      &lt;p&gt;The document that finished loading.&lt;/p&gt;&#10;    " readonly="true" owner_id="LSLoadEvent"/>
      <property name="input" id="input" type="LSInput" description="&#10;      &lt;p&gt;The input source that was parsed.&lt;/p&gt;&#10;    " readonly="true" owner_id="LSLoadEvent"/>
    </properties>
  </interface>
  <interface id="LSSerializer" name="LSSerializer" description="&#10;    &lt;p&gt;&#10;      A &lt;code&gt;LSSerializer&lt;/code&gt; provides an API for serializing&#10;      (writing) a DOM document out into XML. The XML data is written to&#10;      a string or an output stream. Any changes or fixups made during&#10;      the serialization affect only the serialized data. The&#10;      &lt;code&gt;Document&lt;/code&gt; object and its children are never altered by&#10;      the serialization operation.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      During serialization of XML data, namespace fixup is done as&#10;      defined in &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt;, Appendix B. &lt;bibref ref=&quot;DOM2Core&quot;&gt;&lt;/bibref&gt; allows empty strings as a real namespace&#10;      URI. If the &lt;code&gt;namespaceURI&lt;/code&gt; of a &lt;code&gt;Node&lt;/code&gt; is&#10;      empty string, the serialization will treat them as&#10;      &lt;code&gt;null&lt;/code&gt;, ignoring the prefix if any.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      &lt;code&gt;LSSerializer&lt;/code&gt; accepts any node type for&#10;      serialization.  For nodes of type &lt;code&gt;Document&lt;/code&gt; or&#10;      &lt;code&gt;Entity&lt;/code&gt;, well-formed XML will be created when&#10;      possible (well-formedness is guaranteed if the document or&#10;      entity comes from a parse operation and is unchanged since it&#10;      was created). The serialized output for these node types is&#10;      either as a XML document or an External XML Entity,&#10;      respectively, and is acceptable input for an XML parser. For all&#10;      other types of nodes the serialized form is implementation&#10;      dependent.&#10;    &lt;/p&gt;&#10;    &#10;    &lt;p&gt;Within a &lt;code&gt;Document&lt;/code&gt;, &lt;code&gt;DocumentFragment&lt;/code&gt;, or&#10;    &lt;code&gt;Entity&lt;/code&gt; being serialized, &lt;code&gt;Nodes&lt;/code&gt; are&#10;    processed as follows&lt;/p&gt;&#10;    &lt;ulist&gt;&#10;      &lt;item&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  &lt;code&gt;Document&lt;/code&gt; nodes are written, including the XML&#10;&#9;  declaration (unless the parameter &quot;&lt;termref def=&quot;parameter-xml-declaration&quot;&gt;xml-declaration&lt;/termref&gt;&quot;&#10;&#9;  is set to &lt;code&gt;false&lt;/code&gt;) and a DTD subset, if one exists&#10;&#9;  in the DOM. Writing a &lt;code&gt;Document&lt;/code&gt; node serializes&#10;&#9;  the entire document.&#10;&#9;&lt;/p&gt;&#10;      &lt;/item&gt;&#10;      &#10;      &lt;item&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  &lt;code&gt;Entity&lt;/code&gt; nodes, when written directly by&#10;&#9;  &lt;code&gt;LSSerializer.write&lt;/code&gt;, outputs the entity expansion&#10;&#9;  but no namespace fixup is done. The resulting output will be&#10;&#9;  valid as an external entity.&#10;&#9;&lt;/p&gt;&#10;      &lt;/item&gt;&#10;      &#10;      &lt;item&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  If the parameter &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-entities&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;entities&lt;/xspecref&gt;&quot;&#10;&#9;  is set to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;EntityReference&lt;/code&gt;&#10;&#9;  nodes are serialized as an entity reference of the form&#10;&#9;  &quot;&lt;code&gt;&amp;amp;entityName;&lt;/code&gt;&quot; in the output. Child nodes&#10;&#9;  (the expansion) of the entity reference are ignored. If the&#10;&#9;  parameter &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-entities&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;entities&lt;/xspecref&gt;&quot;&#10;&#9;  is set to &lt;code&gt;false&lt;/code&gt;, only the children of the entity&#10;&#9;  reference are serialized. &lt;code&gt;EntityReference&lt;/code&gt; nodes&#10;&#9;  with no children (no corresponding &lt;code&gt;Entity&lt;/code&gt; node or&#10;&#9;  the corresponding &lt;code&gt;Entity&lt;/code&gt; nodes have no children)&#10;&#9;  are always serialized.&#10;&#9;&lt;/p&gt;&#10;      &lt;/item&gt;&#10;      &#10;      &lt;item&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  &lt;code&gt;CDATAsections&lt;/code&gt; containing content characters that&#10;&#9;  cannot be represented in the specified output encoding are&#10;&#9;  handled according to the &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-split-cdata-sections&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;split-cdata-sections&lt;/xspecref&gt;&quot;&#10;&#9;  parameter.&#10;&#9;&lt;/p&gt;&#10;&#9;&#10;&#9;&lt;p&gt;&#10;&#9;  If the parameter is set to &lt;code&gt;true&lt;/code&gt;,&#10;&#9;  &lt;code&gt;CDATAsections&lt;/code&gt; are split, and the unrepresentable&#10;&#9;  characters are serialized as numeric character references in&#10;&#9;  ordinary content. The exact position and number of splits is&#10;&#9;  not specified.&#10;&#9;&lt;/p&gt;&#10;&#9;&#10;&#9;&lt;p&gt;&#10;&#9;  If the parameter is set to &lt;code&gt;false&lt;/code&gt;, unrepresentable&#10;&#9;  characters in a &lt;code&gt;CDATAsection&lt;/code&gt; are reported as&#10;&#9;  &lt;code&gt;&quot;wf-invalid-character&quot;&lt;/code&gt; errors if the parameter&#10;&#9;  &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-well-formed&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;well-formed&lt;/xspecref&gt;&quot;&#10;&#9;  is set to &lt;code&gt;true&lt;/code&gt;. The error is not recoverable -&#10;&#9;  there is no mechanism for supplying alternative characters and&#10;&#9;  continuing with the serialization.&#10;&#9;&lt;/p&gt;&#10;      &lt;/item&gt;&#10;      &#10;      &lt;item&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  &lt;code&gt;DocumentFragment&lt;/code&gt; nodes are serialized by&#10;&#9;  serializing the children of the document fragment in the order&#10;&#9;  they appear in the document fragment.&#10;&#9;&lt;/p&gt;&#10;      &lt;/item&gt;&#10;      &#10;      &lt;item&gt;&#10;&#9;&lt;p&gt;&#10;&#9;  All other node types (Element, Text, etc.) are serialized to&#10;&#9;  their corresponding XML source form.&#10;&#9;&lt;/p&gt;&#10;      &lt;/item&gt;      &#10;    &lt;/ulist&gt;&#10;    &#10;    &lt;note&gt;&#10;      &lt;p&gt;&#10;&#9;The serialization of a &lt;code&gt;Node&lt;/code&gt; does not always&#10;&#9;generate a &lt;termref def=&quot;dt-well-formed&quot;&gt;well-formed&lt;/termref&gt;&#10;&#9;XML document, i.e. a &lt;code&gt;LSParser&lt;/code&gt; might throw fatal&#10;&#9;errors when parsing the resulting serialization.&#10;      &lt;/p&gt;&#10;    &lt;/note&gt;&#10;    &#10;    &lt;p&gt;&#10;      Within the character data of a document (outside of markup), any&#10;      characters that cannot be represented directly are replaced with&#10;      character references.  Occurrences of '&amp;lt;' and '&amp;amp;' are&#10;      replaced by the predefined entities &amp;amp;lt; and &amp;amp;amp;. The&#10;      other predefined entities (&amp;amp;gt;, &amp;amp;apos;, and &amp;amp;quot;)&#10;      might not be used, except where needed (e.g. using &amp;amp;gt; in&#10;      cases such as ']]&amp;gt;'). Any characters that cannot be&#10;      represented directly in the output character encoding are&#10;      serialized as numeric character references (and since character&#10;      encoding standards commonly use hexadecimal representations of&#10;      characters, using the hexadecimal representation when&#10;      serializing character references is encouraged).&#10;    &lt;/p&gt;&#10;    &#10;    &lt;p&gt;&#10;      To allow attribute values to contain both single and double&#10;      quotes, the apostrophe or single-quote character (') may be&#10;      represented as &quot;&amp;amp;apos;&quot;, and the double-quote character (&quot;)&#10;      &lt;!-- silly comment to terminate the previous '&quot;' that makes my&#10;      editor freak out.--&gt; as &quot;&amp;amp;quot;&quot;.  New line characters and&#10;      other characters that cannot be represented directly in&#10;      attribute values in the output character encoding are serialized&#10;      as a numeric character reference.&#10;    &lt;/p&gt;&#10;    &#10;    &lt;p&gt;&#10;      Within markup, but outside of attributes, any occurrence of a&#10;      character that cannot be represented in the output character&#10;      encoding is reported as a &lt;code&gt;DOMError&lt;/code&gt; fatal error. An&#10;      example would be serializing the element &amp;lt;LaCa&amp;#241;ada/&amp;gt; with&#10;      &lt;code&gt;encoding=&quot;us-ascii&quot;&lt;/code&gt;. This will result with a&#10;      generation of a &lt;code&gt;DOMError&lt;/code&gt;&#10;      &quot;wf-invalid-character-in-node-name&quot; (as proposed in &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-well-formed&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;well-formed&lt;/xspecref&gt;&quot;).&#10;    &lt;/p&gt;&#10;    &#10;    &lt;p&gt;&#10;      When requested by setting the parameter &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-normalize-characters&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;normalize-characters&lt;/xspecref&gt;&quot;&#10;      on &lt;code&gt;LSSerializer&lt;/code&gt; to true, character normalization is&#10;      performed according to the definition of &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2004/REC-xml11-20040204/#dt-fullnorm&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;fully normalized&lt;/loc&gt; characters&#10;      included in appendix E of &lt;bibref ref=&quot;XML11&quot;&gt;&lt;/bibref&gt; on all data to be&#10;      serialized, both markup and character data. The character&#10;      normalization process affects only the data as it is being&#10;      written; it does not alter the DOM's view of the document after&#10;      serialization has completed.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      Implementations are required to support the encodings &quot;UTF-8&quot;,&#10;      &quot;UTF-16&quot;, &quot;UTF-16BE&quot;, and &quot;UTF-16LE&quot; to guarantee that data is&#10;      serializable in all encodings that are required to be supported by&#10;      all XML parsers. When the encoding is UTF-8, whether or not a byte&#10;      order mark is serialized, or if the output is big-endian or&#10;      little-endian, is implementation dependent. When the encoding is&#10;      UTF-16, whether or not the output is big-endian or little-endian&#10;      is implementation dependent, but a Byte Order Mark must be&#10;      generated for non-character outputs, such as&#10;      &lt;code&gt;LSOutput.byteStream&lt;/code&gt; or&#10;      &lt;code&gt;LSOutput.systemId&lt;/code&gt;. If the Byte Order Mark is not&#10;      generated, a &quot;byte-order-mark-needed&quot; warning is reported. When&#10;      the encoding is UTF-16LE or UTF-16BE, the output is big-endian&#10;      (UTF-16BE) or little-endian (UTF-16LE) and the Byte Order Mark is&#10;      not be generated. In all cases, the encoding declaration, if&#10;      generated, will correspond to the encoding used during the&#10;      serialization (e.g. &lt;code&gt;encoding=&quot;UTF-16&quot;&lt;/code&gt; will appear if&#10;      UTF-16 was requested).&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      Namespaces are fixed up during serialization, the serialization&#10;      process will verify that namespace declarations, namespace&#10;      prefixes and the namespace URI associated with elements and&#10;      attributes are consistent. If inconsistencies are found, the&#10;      serialized form of the document will be altered to remove&#10;      them. The method used for doing the namespace fixup while&#10;      serializing a document is the algorithm defined in Appendix B.1,&#10;      &quot;Namespace normalization&quot;, of &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt;.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      While serializing a document, the parameter &quot;&lt;termref def=&quot;parameter-discard-default-content&quot;&gt;discard-default-content&lt;/termref&gt;&quot;&#10;      controls whether or not non-specified data is serialized.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      While serializing, errors and warnings are reported to the&#10;      application through the error handler&#10;      (&lt;code&gt;LSSerializer.domConfig&lt;/code&gt;'s &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;error-handler&lt;/xspecref&gt;&quot;&#10;      parameter). This specification does in no way try to define all&#10;      possible errors and warnings that can occur while serializing a&#10;      DOM node, but some common error and warning cases are&#10;      defined. The types (&lt;code&gt;DOMError.type&lt;/code&gt;) of errors and&#10;      warnings defined by this specification are:&#10;&#10;      &lt;glist&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label&gt;&lt;code&gt;&quot;no-output-specified&quot; [fatal]&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;            &lt;p&gt;&#10;              Raised when writing to a &lt;code&gt;LSOutput&lt;/code&gt; if no&#10;              output is specified in the &lt;code&gt;LSOutput&lt;/code&gt;.&#10;            &lt;/p&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label&gt;&#10;            &lt;code&gt;&quot;unbound-prefix-in-entity-reference&quot; [fatal]&lt;/code&gt;&#10;&#9;  &lt;/label&gt;&#10;          &lt;def&gt;&#10;            &lt;p&gt;&#10;              Raised if the configuration parameter &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-namespaces&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;namespaces&lt;/xspecref&gt;&quot;&#10;              is set to &lt;code&gt;true&lt;/code&gt; and an entity whose&#10;              replacement text contains unbound namespace prefixes is&#10;              referenced in a location where there are no bindings for&#10;              the namespace prefixes.&#10;            &lt;/p&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label&gt;&lt;code&gt;&quot;unsupported-encoding&quot; [fatal]&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;            &lt;p&gt;&#10;              Raised if an unsupported encoding is encountered.&#10;            &lt;/p&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;      &lt;/glist&gt;&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      In addition to raising the defined errors and warnings,&#10;      implementations are expected to raise implementation specific&#10;      errors and warnings for any other error and warning cases such&#10;      as IO errors (file not found, permission denied,...) and so on.&#10;    &lt;/p&gt;&#10;&#10;&#10;  ">
    <methods>
      <method id="write" name="write" return_type="boolean" owner_id="LSSerializer" description="&#10;      &lt;p&gt;&#10;        Serialize the specified node as described above in the general&#10;        description of the &lt;code&gt;LSSerializer&lt;/code&gt; interface. The&#10;        output is written to the supplied &lt;code&gt;LSOutput&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;&#10;      &lt;p&gt;&#10;        When writing to a &lt;code&gt;LSOutput&lt;/code&gt;, the encoding is found&#10;        by looking at the encoding information that is reachable through&#10;        the &lt;code&gt;LSOutput&lt;/code&gt; and the item to be written (or its&#10;        owner document) in this order:&#10;      &lt;/p&gt;&#10;&#10;      &lt;olist&gt;&#10;        &lt;item&gt;&#10;          &lt;p&gt;&#10;            &lt;code&gt;LSOutput.encoding&lt;/code&gt;,&#10;          &lt;/p&gt;&#10;        &lt;/item&gt;&#10;        &lt;item&gt;&#10;          &lt;p&gt;&#10;            &lt;code&gt;Document.inputEncoding&lt;/code&gt;,&#10;          &lt;/p&gt;&#10;        &lt;/item&gt;&#10;        &lt;item&gt;&#10;          &lt;p&gt;&#10;            &lt;code&gt;Document.xmlEncoding&lt;/code&gt;.&#10;          &lt;/p&gt;&#10;        &lt;/item&gt;&#10;      &lt;/olist&gt;&#10;&#10;      &lt;p&gt;&#10;        If no encoding is reachable through the above properties, a&#10;        default encoding of &quot;UTF-8&quot; will be used. If the specified&#10;        encoding is not supported an &quot;unsupported-encoding&quot; fatal error&#10;        is raised.&#10;      &lt;/p&gt;&#10;&#10;      &lt;p&gt;&#10;        If no output is specified in the &lt;code&gt;LSOutput&lt;/code&gt;, a&#10;        &quot;no-output-specified&quot; fatal error is raised.&#10;      &lt;/p&gt;&#10;&#10;      &lt;p&gt;&#10;        The implementation is responsible of associating the&#10;        appropriate media type with the serialized data.&#10;      &lt;/p&gt;&#10;&#10;      &lt;p&gt;&#10;        When writing to a HTTP URI, a HTTP PUT is performed. When&#10;        writing to other types of URIs, the mechanism for writing the&#10;        data to the URI is implementation dependent.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;&#9;  Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;node&lt;/code&gt; was&#10;&#9;  successfully serialized. Return &lt;code&gt;false&lt;/code&gt; in case  the&#10;&#9;  normal processing stopped but the implementation kept&#10;&#9;  serializing the document; the result of the serialization&#10;&#9;  being implementation dependent then.&#10;        &lt;/p&gt;&#10;      ">
        <parameter id="" name="nodeArg" type="Node" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The node to serialize.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="destination" type="LSOutput" owner_id="" description="&#10;&#9;  &lt;p&gt;The destination for the serialized DOM.&lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="writeToURI" name="writeToURI" return_type="boolean" owner_id="LSSerializer" description="&#10;      &lt;p&gt;&#10;        A convenience method that acts as if&#10;        &lt;code&gt;LSSerializer.write&lt;/code&gt; was called with a&#10;        &lt;code&gt;LSOutput&lt;/code&gt; with no encoding specified and&#10;        &lt;code&gt;LSOutput.systemId&lt;/code&gt; set to the &lt;code&gt;uri&lt;/code&gt;&#10;        argument.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;&#9;  Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;node&lt;/code&gt; was&#10;&#9;  successfully serialized. Return &lt;code&gt;false&lt;/code&gt; in case  the&#10;&#9;  normal processing stopped but the implementation kept&#10;&#9;  serializing the document; the result of the serialization&#10;&#9;  being implementation dependent then.&#10;        &lt;/p&gt;&#10;      ">
        <parameter id="" name="nodeArg" type="Node" owner_id="" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The node to serialize.&#10;&#9;  &lt;/p&gt;&#10;&#9;"/>
        <parameter id="" name="uri" type="DOMString" owner_id="" description="&#10;&#9;  &lt;p&gt;The URI to write to.&lt;/p&gt;&#10;&#9;"/>
      </method>
      <method id="writeToString" name="writeToString" return_type="DOMString" owner_id="LSSerializer" description="&#10;      &lt;p&gt;&#10;        Serialize the specified node as described above in the general&#10;        description of the &lt;code&gt;LSSerializer&lt;/code&gt; interface. The&#10;        output is written to a &lt;code&gt;DOMString&lt;/code&gt; that is returned&#10;        to the caller. The encoding used is the encoding of the&#10;        &lt;code&gt;DOMString&lt;/code&gt; type, i.e. UTF-16. Note that no Byte&#10;        Order Mark is generated in a &lt;code&gt;DOMString&lt;/code&gt; object.&#10;      &lt;/p&gt;&#10;    " return_description="&#10;        &lt;p&gt;&#10;&#9;  Returns the serialized data.&#10;&#9;&lt;/p&gt;&#10;      ">
        <parameter id="" name="nodeArg" type="Node" owner_id="" description="&#10;          &lt;p&gt;&#10;&#9;    The node to serialize.&#10;&#9;  &lt;/p&gt;&#10;        "/>
      </method>
    </methods>
    <properties>
      <property name="domConfig" id="domConfig" type="DOMConfiguration" description="&#10;      &lt;p&gt;&#10;        The &lt;code&gt;DOMConfiguration&lt;/code&gt; object used by the&#10;        &lt;code&gt;LSSerializer&lt;/code&gt; when serializing a DOM node.&#10;      &lt;/p&gt;&#10;      &lt;p&gt;&#10;&#9;In addition to the parameters recognized by the &lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMConfiguration&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;DOMConfiguration&lt;/xspecref&gt;&#10;&#9;interface defined in &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt;, the&#10;&#9;&lt;code&gt;DOMConfiguration&lt;/code&gt; objects for&#10;&#9;&lt;code&gt;LSSerializer&lt;/code&gt; adds, or modifies, the following&#10;&#9;parameters:&#10;      &lt;/p&gt;&#10;      &lt;glist&gt;&#10;&#9;&lt;gitem&gt;&#10;&#9;  &lt;label id=&quot;parameter-canonical-form&quot;&gt;&lt;code&gt;&quot;canonical-form&quot;&lt;/code&gt;&lt;/label&gt;&#10;&#9;  &lt;def&gt;&#10;&#9;    &lt;glist&gt;&#10;&#9;      &lt;gitem&gt;&#10;&#9;&#9;&lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;&#9;&#9;&lt;def&gt;&#10;&#9;&#9;  &lt;p&gt;[&lt;emph&gt;optional&lt;/emph&gt;]&lt;/p&gt;&#10;&#9;&#9;  &lt;p&gt;&#10;&#9;&#9;    Writes the document according to the rules specified&#10;&#9;&#9;    in &lt;bibref role=&quot;informative&quot; ref=&quot;c14n&quot;&gt;&lt;/bibref&gt;. In&#10;&#9;&#9;    addition to the behavior described in &quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-canonical-form&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;canonical-form&lt;/xspecref&gt;&quot;&#10;&#9;&#9;    &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt;, setting this parameter to&#10;&#9;&#9;    &lt;code&gt;true&lt;/code&gt; will set the parameters &quot;&lt;termref def=&quot;parameter-format-pretty-print&quot;&gt;format-pretty-print&lt;/termref&gt;&quot;,&#10;&#9;&#9;    &quot;&lt;termref def=&quot;parameter-discard-default-content&quot;&gt;discard-default-content&lt;/termref&gt;&quot;,&#10;&#9;&#9;    and &quot;&lt;termref def=&quot;parameter-xml-declaration&quot;&gt;xml-declaration&lt;/termref&gt;&quot;,&#10;&#9;&#9;    to &lt;code&gt;false&lt;/code&gt;. Setting one of those&#10;&#9;&#9;    parameters to &lt;code&gt;true&lt;/code&gt; will set this&#10;&#9;&#9;    parameter to &lt;code&gt;false&lt;/code&gt;. Serializing an XML&#10;&#9;&#9;    1.1 document when &quot;canonical-form&quot; is&#10;&#9;&#9;    &lt;code&gt;true&lt;/code&gt; will generate a fatal error.&#10;&#9;&#9;  &lt;/p&gt;&#10;&#9;&#9;&lt;/def&gt;&#10;&#9;      &lt;/gitem&gt;&#10;&#9;      &lt;gitem&gt;&#10;&#9;&#9;&lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;&#9;&#9;&lt;def&gt;&#10;&#9;&#9;  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;&#9;&#9;  &lt;p&gt;&#10;&#9;&#9;    Do not canonicalize the output.&#10;&#9;&#9;  &lt;/p&gt;&#10;&#9;&#9;&lt;/def&gt;&#10;&#9;      &lt;/gitem&gt;&#10;&#9;    &lt;/glist&gt;&#10;&#9;  &lt;/def&gt;&#10;&#9;&lt;/gitem&gt;&#10;        &lt;gitem&gt;&#10;          &lt;label id=&quot;parameter-discard-default-content&quot;&gt;&lt;code&gt;&quot;discard-default-content&quot;&lt;/code&gt;&lt;/label&gt;&#10;          &lt;def&gt;&#10;            &lt;glist&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;                  &lt;p&gt;&#10;                    Use the &lt;code&gt;Attr.specified&lt;/code&gt; attribute to&#10;                    decide what attributes should be discarded. Note&#10;                    that some implementations might use whatever&#10;                    information available to the implementation&#10;                    (i.e. XML schema, DTD, the&#10;                    &lt;code&gt;Attr.specified&lt;/code&gt; attribute, and so on) to&#10;                    determine what attributes and content to discard if&#10;                    this parameter is set to &lt;code&gt;true&lt;/code&gt;.&#10;                  &lt;/p&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;              &lt;gitem&gt;&#10;                &lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;                &lt;def&gt;&#10;                  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;]&lt;/p&gt;&#10;                  &lt;p&gt;Keep all attributes and all content.&lt;/p&gt;&#10;                &lt;/def&gt;&#10;              &lt;/gitem&gt;&#10;            &lt;/glist&gt;&#10;          &lt;/def&gt;&#10;        &lt;/gitem&gt;&#10;&#9;&lt;gitem&gt;&#10;&#9;  &lt;label id=&quot;parameter-format-pretty-print&quot;&gt;&lt;code&gt;&quot;format-pretty-print&quot;&lt;/code&gt;&lt;/label&gt;&#10;&#9;  &lt;def&gt;&#10;&#9;    &lt;glist&gt;&#10;&#9;      &lt;gitem&gt;&#10;&#9;&#9;&lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;&#9;&#9;&lt;def&gt;&#10;&#9;&#9;  &lt;p&gt;[&lt;emph&gt;optional&lt;/emph&gt;]&lt;/p&gt;&#10;&#9;&#9;  &lt;p&gt;&#10;&#9;&#9;    Formatting the output by adding whitespace to&#10;&#9;&#9;    produce a pretty-printed, indented, human-readable&#10;&#9;&#9;    form. The exact form of the transformations is not&#10;&#9;&#9;    specified by this specification. Pretty-printing&#10;&#9;&#9;    changes the content of the document and may affect&#10;&#9;&#9;    the validity of the document, validating&#10;&#9;&#9;    implementations should preserve validity.&#10;&#9;&#9;  &lt;/p&gt;&#10;&#9;&#9;&lt;/def&gt;&#10;&#9;      &lt;/gitem&gt;&#10;&#9;      &lt;gitem&gt;&#10;&#9;&#9;&lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;&#9;&#9;&lt;def&gt;&#10;&#9;&#9;  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;&#9;&#9;  &lt;p&gt;&#10;&#9;&#9;    Don't pretty-print the result.&#10;&#9;&#9;  &lt;/p&gt;&#10;&#9;&#9;&lt;/def&gt;&#10;&#9;      &lt;/gitem&gt;&#10;&#9;    &lt;/glist&gt;&#10;&#9;  &lt;/def&gt;&#10;&#9;&lt;/gitem&gt;&#10;&#9;&lt;gitem&gt;&#10;&#9;  &lt;label id=&quot;parameter-ignore-unknown-character-denormalizations-lsserializer&quot;&gt;&#10;            &lt;code&gt;&quot;ignore-unknown-character-denormalizations&quot;&lt;/code&gt;&#10;          &lt;/label&gt;&#10;&#9;  &lt;def&gt;&#10;&#9;    &lt;glist&gt;&#10;&#9;      &lt;gitem&gt;&#10;&#9;&#9;&lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;&#9;&#9;&lt;def&gt;&#10;&#9;&#9;  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;&#9;&#9;  &lt;p&gt;&#10;&#9;&#9;    If, while verifying full normalization when&#10;&#9;&#9;    &lt;bibref ref=&quot;XML11&quot;&gt;&lt;/bibref&gt; is supported, a character is&#10;&#9;&#9;    encountered for which the normalization properties&#10;&#9;&#9;    cannot be determined, then raise a&#10;&#9;&#9;    &lt;code&gt;&quot;unknown-character-denormalization&quot;&lt;/code&gt;&#10;&#9;&#9;    warning (instead of raising an error, if this&#10;&#9;&#9;    parameter is not set) and ignore any possible&#10;&#9;&#9;    denormalizations caused by these characters.&#10;&#9;&#9;  &lt;/p&gt;&#10;&#9;&#9;&lt;/def&gt;&#10;&#9;      &lt;/gitem&gt;&#10;&#9;      &lt;gitem&gt;&#10;&#9;&#9;&lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;&#9;&#9;&lt;def&gt;&#10;&#9;&#9;  &lt;p&gt;[&lt;emph&gt;optional&lt;/emph&gt;]&lt;/p&gt;&#10;&#9;&#9;  &lt;p&gt;&#10;&#9;&#9;    Report a fatal error if a character is encountered&#10;&#9;&#9;    for which the processor cannot determine the&#10;&#9;&#9;    normalization properties.&#10;&#9;&#9;  &lt;/p&gt;&#10;&#9;&#9;&lt;/def&gt;&#10;&#9;      &lt;/gitem&gt;&#10;&#9;    &lt;/glist&gt;&#10;&#9;  &lt;/def&gt;&#10;&#9;&lt;/gitem&gt;      &#10;&#9;&lt;gitem&gt;&#10;&#9;  &lt;label id=&quot;parameter-normalize-characters&quot;&gt;&lt;code&gt;&quot;normalize-characters&quot;&lt;/code&gt;&lt;/label&gt;&#10;&#9;  &lt;def&gt;&#10;&#9;    &lt;p&gt;&#10;&#9;      This parameter is equivalent to the one defined by&#10;&#9;      &lt;code&gt;DOMConfiguration&lt;/code&gt; in &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt;. Unlike in the Core, the default value for&#10;&#9;      this parameter is &lt;code&gt;true&lt;/code&gt;. While DOM&#10;&#9;      implementations are not required to support &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/2004/REC-xml11-20040204/#dt-fullnorm&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;fully normalizing&lt;/loc&gt;&#10;&#9;      the characters in the document according to appendix E of&#10;&#9;      &lt;bibref ref=&quot;XML11&quot;&gt;&lt;/bibref&gt;, this parameter must be activated by&#10;&#9;      default if supported.&#10;&#9;    &lt;/p&gt;&#10;&#9;  &lt;/def&gt;&#10;&#9;&lt;/gitem&gt;&#10;&#9;&lt;gitem&gt;&#10;&#9;  &lt;label id=&quot;parameter-xml-declaration&quot;&gt;&lt;code&gt;&quot;xml-declaration&quot;&lt;/code&gt;&lt;/label&gt;&#10;&#9;  &lt;def&gt;&#10;&#9;    &lt;glist&gt;&#10;&#9;      &lt;gitem&gt;&#10;&#9;&#9;&lt;label&gt;&lt;code&gt;true&lt;/code&gt;&lt;/label&gt;&#10;&#9;&#9;&lt;def&gt;&#10;&#9;&#9;  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;] (&lt;emph&gt;default&lt;/emph&gt;)&lt;/p&gt;&#10;&#9;&#9;  &lt;p&gt;&#10;&#9;&#9;    If a &lt;code&gt;Document&lt;/code&gt;, &lt;code&gt;Element&lt;/code&gt;,&#10;&#9;&#9;    or &lt;code&gt;Entity&lt;/code&gt; node is serialized, the XML&#10;&#9;&#9;    declaration, or text declaration, should be&#10;&#9;&#9;    included. The version&#10;&#9;&#9;    (&lt;code&gt;Document.xmlVersion&lt;/code&gt; if the document&#10;&#9;&#9;    is a Level 3 document and the version is non-null,&#10;&#9;&#9;    otherwise use the value &quot;1.0&quot;), and the output&#10;&#9;&#9;    encoding (see &lt;code&gt;LSSerializer.write&lt;/code&gt; for&#10;&#9;&#9;    details on how to find the output encoding) are&#10;&#9;&#9;    specified in the serialized XML declaration.&#10;&#9;&#9;  &lt;/p&gt;&#10;&#9;&#9;&lt;/def&gt;&#10;&#9;      &lt;/gitem&gt;&#10;&#9;      &lt;gitem&gt;&#10;&#9;&#9;&lt;label&gt;&lt;code&gt;false&lt;/code&gt;&lt;/label&gt;&#10;&#9;&#9;&lt;def&gt;&#10;&#9;&#9;  &lt;p&gt;[&lt;emph&gt;required&lt;/emph&gt;]&lt;/p&gt;&#10;&#9;&#9;  &lt;p&gt;&#10;&#9;&#9;    Do not serialize the XML and text&#10;&#9;&#9;    declarations. Report a&#10;&#9;&#9;    &lt;code&gt;&quot;xml-declaration-needed&quot;&lt;/code&gt; warning if&#10;&#9;&#9;    this will cause problems (i.e. the serialized data&#10;&#9;&#9;    is of an XML version other than &lt;bibref ref=&quot;XML&quot;&gt;&lt;/bibref&gt;,&#10;&#9;&#9;    or an encoding would be needed to be able to&#10;&#9;&#9;    re-parse the serialized data).&#10;&#9;&#9;  &lt;/p&gt;&#10;&#9;&#9;&lt;/def&gt;&#10;&#9;      &lt;/gitem&gt;&#10;&#9;    &lt;/glist&gt;&#10;&#9;  &lt;/def&gt;&#10;&#9;&lt;/gitem&gt;&#10;      &lt;/glist&gt;&#10;    " readonly="true" owner_id="LSSerializer"/>
      <property name="newLine" id="newLine" type="DOMString" description="&#10;      &lt;p&gt;&#10;&#9;The end-of-line sequence of characters to be used in the XML&#10;&#9;being written out. Any string is supported, but XML treats only&#10;&#9;a certain set of characters sequence as end-of-line (See section&#10;&#9;2.11, &quot;End-of-Line Handling&quot; in &lt;bibref ref=&quot;XML&quot;&gt;&lt;/bibref&gt;, if the&#10;&#9;serialized content is XML 1.0 or section 2.11, &quot;End-of-Line&#10;&#9;Handling&quot; in &lt;bibref ref=&quot;XML11&quot;&gt;&lt;/bibref&gt;, if the serialized content is&#10;&#9;XML 1.1). Using&#10;&#9;other character sequences than the recommended ones can result&#10;&#9;in a document that is either not serializable or not&#10;&#9;well-formed).&#10;      &lt;/p&gt;&#10;&#10;      &lt;p&gt;&#10;&#9;On retrieval, the default value of this attribute is the&#10;&#9;implementation specific default end-of-line sequence. DOM&#10;&#9;implementations should choose the default to match the usual&#10;&#9;convention for text files in the environment being used.&#10;&#9;Implementations must choose a default sequence that matches one&#10;&#9;of those allowed by XML 1.0 or XML 1.1, depending on the&#10;&#9;serialized content. Setting this attribute to &lt;code&gt;null&lt;/code&gt;&#10;&#9;will reset its value to the default value.&#10;      &lt;/p&gt;&#10;      &lt;p&gt;&#10;&#9;&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="LSSerializer"/>
      <property name="filter" id="filter" type="LSSerializerFilter" description="&#10;      &lt;p&gt;&#10;&#9;When the application provides a filter, the serializer will call&#10;&#9;out to the filter before serializing each Node. The filter&#10;&#9;implementation can choose to remove the node from the stream or&#10;&#9;to terminate the serialization early.&#10;      &lt;/p&gt;&#10;      &lt;p&gt;&#10;&#9;The filter is invoked after the operations requested by the&#10;&#9;&lt;code&gt;DOMConfiguration&lt;/code&gt; parameters have been applied. For&#10;&#9;example, CDATA sections won't be passed to the filter if&#10;&#9;&quot;&lt;xspecref xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-cdata-sections&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;new&quot; xlink:actuate=&quot;onRequest&quot;&gt;cdata-sections&lt;/xspecref&gt;&quot;&#10;&#9;is set to &lt;code&gt;false&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="LSSerializer"/>
    </properties>
  </interface>
  <interface id="LSOutput" name="LSOutput" description="&#10;    &lt;p&gt;&#10;      This interface represents an output destination for data.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      This interface allows an application to encapsulate information&#10;      about an output destination in a single object, which may&#10;      include a URI, a byte stream (possibly with a specified&#10;      encoding), a base URI, and/or a character stream.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      The exact definitions of a byte stream and a character stream&#10;      are binding dependent.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      The application is expected to provide objects that implement&#10;      this interface whenever such objects are needed. The application&#10;      can either provide its own objects that implement this&#10;      interface, or it can use the generic factory method&#10;      &lt;code&gt;DOMImplementationLS.createLSOutput()&lt;/code&gt; to create&#10;      objects that implement this interface.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      The &lt;code&gt;LSSerializer&lt;/code&gt; will use the&#10;      &lt;code&gt;LSOutput&lt;/code&gt; object to determine where to serialize&#10;      the output to. The &lt;code&gt;LSSerializer&lt;/code&gt; will look at the&#10;      different outputs specified in the &lt;code&gt;LSOutput&lt;/code&gt; in the&#10;      following order to know which one to output to, the first one&#10;      that is not null and not an empty string will be used:&#10;&#10;      &lt;olist&gt;&#10;        &lt;item&gt;&#10;          &lt;p&gt;&#10;            &lt;code&gt;LSOutput.characterStream&lt;/code&gt;&#10;          &lt;/p&gt;&#10;        &lt;/item&gt;&#10;        &lt;item&gt;&#10;          &lt;p&gt;&#10;            &lt;code&gt;LSOutput.byteStream&lt;/code&gt;&#10;          &lt;/p&gt;&#10;        &lt;/item&gt;&#10;        &lt;item&gt;&#10;          &lt;p&gt;&#10;            &lt;code&gt;LSOutput.systemId&lt;/code&gt;&#10;          &lt;/p&gt;&#10;        &lt;/item&gt;&#10;      &lt;/olist&gt;&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;      &lt;code&gt;LSOutput&lt;/code&gt; objects belong to the application. The&#10;      DOM implementation will never modify them (though it may make&#10;      copies and modify the copies, if necessary).&#10;    &lt;/p&gt;&#10;  ">
    <methods/>
    <properties>
      <property name="characterStream" id="characterStream" type="LSWriter" description="&#10;      &lt;p&gt;&#10;        An attribute of a language and binding dependent type that&#10;        represents a writable stream to which &lt;termref def=&quot;dt-16-bit-unit&quot;&gt;16-bit units&lt;/termref&gt; can be output.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="LSOutput"/>
      <property name="byteStream" id="byteStream" type="LSOutputStream" description="&#10;      &lt;p&gt;&#10;        An attribute of a language and binding dependent type that&#10;        represents a writable stream of bytes.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="LSOutput"/>
      <property name="systemId" id="systemId" type="DOMString" description="&#10;      &lt;p&gt;&#10;        The system identifier, a URI reference &lt;bibref ref=&quot;URIRef&quot;&gt;&lt;/bibref&gt;,&#10;        for this output destination.&#10;      &lt;/p&gt;&#10;&#10;      &lt;p&gt;&#10;        If the system ID is a relative URI reference (see section 5 in&#10;        &lt;bibref ref=&quot;URIRef&quot;&gt;&lt;/bibref&gt;), the behavior is implementation&#10;        dependent.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="LSOutput"/>
      <property name="encoding" id="encoding" type="DOMString" description="&#10;      &lt;p&gt;&#10;        The character encoding to use for the output. The encoding&#10;        must be a string acceptable for an XML encoding declaration&#10;        (&lt;bibref ref=&quot;XML&quot;&gt;&lt;/bibref&gt; section 4.3.3 &quot;Character Encoding in&#10;        Entities&quot;), it is recommended that character encodings&#10;        registered (as charsets) with the Internet Assigned Numbers&#10;        Authority &lt;bibref ref=&quot;IANA-CHARSETS&quot;&gt;&lt;/bibref&gt; should be referred to&#10;        using their registered names.&#10;      &lt;/p&gt;&#10;    " readonly="false" owner_id="LSOutput"/>
    </properties>
  </interface>
  <interface id="LSSerializerFilter" name="LSSerializerFilter" description="&#10;    &lt;p&gt;&#10;      &lt;code&gt;LSSerializerFilter&lt;/code&gt;s provide applications the&#10;      ability to examine nodes as they are being serialized and decide&#10;      what nodes should be serialized or not. The&#10;      &lt;code&gt;LSSerializerFilter&lt;/code&gt; interface is based on the&#10;      &lt;code&gt;NodeFilter&lt;/code&gt; interface defined in &lt;bibref ref=&quot;DOM2Traversal-Range&quot;&gt;&lt;/bibref&gt;.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      &lt;code&gt;Document&lt;/code&gt;, &lt;code&gt;DocumentType&lt;/code&gt;,&#10;      &lt;code&gt;DocumentFragment&lt;/code&gt;, &lt;code&gt;Notation&lt;/code&gt;,&#10;      &lt;code&gt;Entity&lt;/code&gt;, and children of &lt;code&gt;Attr&lt;/code&gt; nodes are&#10;      not passed to the filter. The child nodes of an&#10;      &lt;code&gt;EntityReference&lt;/code&gt; node are only passed to the filter if&#10;      the &lt;code&gt;EntityReference&lt;/code&gt; node is skipped by the method&#10;      &lt;code&gt;LSParserFilter.acceptNode()&lt;/code&gt;.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      When serializing an &lt;code&gt;Element&lt;/code&gt;, the element is passed&#10;      to the filter before any of its attributes are passed to the&#10;      filter. Namespace declaration attributes, and default attributes&#10;      (except in the case when &quot;&lt;termref def=&quot;parameter-discard-default-content&quot;&gt;discard-default-content&lt;/termref&gt;&quot;&#10;      is set to &lt;code&gt;false&lt;/code&gt;), are never passed to the filter.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      The result of any attempt to modify a node passed to a&#10;      &lt;code&gt;LSSerializerFilter&lt;/code&gt; is implementation dependent.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      DOM applications must not raise exceptions in a filter. The&#10;      effect of throwing exceptions from a filter is DOM implementation&#10;      dependent.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;      For efficiency, a node passed to the filter may not be the same as&#10;      the one that is actually in the tree. And the actual node (node&#10;      object identity) may be reused during the process of filtering and&#10;      serializing a document.&#10;    &lt;/p&gt;&#10;  " parent_id="traversal::NodeFilter">
    <methods/>
    <properties>
      <property name="whatToShow" id="whatToShow" type="unsigned long" description="&#10;      &lt;p&gt;&#10;        Tells the &lt;code&gt;LSSerializer&lt;/code&gt; what types of nodes to show&#10;        to the filter. If a node is not shown to the filter using this&#10;        attribute, it is automatically serialized. See&#10;        &lt;code&gt;NodeFilter&lt;/code&gt; for definition of the constants. The&#10;        constants &lt;code&gt;SHOW_DOCUMENT&lt;/code&gt;,&#10;        &lt;code&gt;SHOW_DOCUMENT_TYPE&lt;/code&gt;,&#10;        &lt;code&gt;SHOW_DOCUMENT_FRAGMENT&lt;/code&gt;, &lt;code&gt;SHOW_NOTATION&lt;/code&gt;,&#10;        and &lt;code&gt;SHOW_ENTITY&lt;/code&gt; are meaningless here, such nodes&#10;        will never be passed to a &lt;code&gt;LSSerializerFilter&lt;/code&gt;.&#10;      &lt;/p&gt;&#10;      &lt;p&gt;&#10;&#9;Unlike &lt;bibref ref=&quot;DOM2Traversal-Range&quot;&gt;&lt;/bibref&gt;, the&#10;&#9;&lt;code&gt;SHOW_ATTRIBUTE&lt;/code&gt; constant indicates that the&#10;&#9;&lt;code&gt;Attr&lt;/code&gt; nodes are shown and passed to the filter.&#10;      &lt;/p&gt;&#10;      &lt;p&gt;&#10;        The constants used here are defined in &lt;bibref ref=&quot;DOM2Traversal-Range&quot;&gt;&lt;/bibref&gt;.&#10;      &lt;/p&gt;&#10;    " readonly="true" owner_id="LSSerializerFilter"/>
    </properties>
  </interface>
  <interface id="DocumentEditVAL" name="DocumentEditVAL" description=" &#10;&#9;  &lt;p&gt;This interface extends the &lt;code&gt;NodeEditVAL&lt;/code&gt; interface with additional methods for document editing.  An object implementing this interface must also implement the &lt;code&gt;Document&lt;/code&gt; interface.&lt;/p&gt;&#10;&#9;  &#10;&#9;" parent_id="NodeEditVAL">
    <methods>
      <method id="getDefinedElements" name="getDefinedElements" return_type="NameList" owner_id="DocumentEditVAL" description=" &#10;&#9;    &lt;p&gt;&#10;               Returns list of all element information item names of &#10;               &lt;termref def=&quot;dt-global-declaration&quot;&gt;global declaration&lt;/termref&gt;,&#10;               belonging to the specified namespace.&#10;            &lt;/p&gt;&#10;&#9;  " return_description=" &#10;&#9;      &lt;p&gt;List of all element information item names belonging to the&#10;&#9;&#9; specified namespace or &lt;code&gt;null&lt;/code&gt; if no schema is &#10;                 available.  &#10;              &lt;/p&gt;&#10;&#9;    ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;&lt;code&gt;namespaceURI&lt;/code&gt; of namespace.  For DTDs,&#10;&#9;&#9;   this is &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &#10;&#9;      "/>
      </method>
      <method id="validateDocument" name="validateDocument" return_type="unsigned short" owner_id="DocumentEditVAL" description="&#10;            &lt;p&gt;Validates the document against the schema, e.g., a DTD or an&#10;               W3C XML schema or another.  Any attempt to modify any part of the &#10;&#9;       document while validating results in implementation-dependent &#10;               behavior.  In addition, the validation operation itself cannot&#10;&#9;       modify the document, e.g., for default attributes.&#10;               This method makes use of the error handler, as&#10;               described in the &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt; &#10;&#9;       &lt;code&gt;DOMConfiguration&lt;/code&gt; interface, with all errors&#10;               being &lt;code&gt;SEVERITY_ERROR&lt;/code&gt; as defined in the &#10;               &lt;code&gt;DOMError&lt;/code&gt; interface.&#10;&#10;            &lt;/p&gt;&#10;          " return_description="&#10;               &lt;p&gt;&#10;                  A &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationState&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation state&lt;/loc&gt; constant.&#10;               &lt;/p&gt;&#10;            "/>
    </methods>
    <properties>
      <property name="continuousValidityChecking" id="continuousValidityChecking" type="boolean" description=" &#10;&#9;    &lt;p&gt;An attribute specifying whether the validity of the document&#10;&#9;      is continuously enforced.  When the attribute is set to &#10;              &lt;code&gt;true&lt;/code&gt;, the implementation may raise certain &#10;              exceptions, depending on the situation (see the following).  &#10;              This attribute is &lt;code&gt;false&lt;/code&gt; by default.&#10;            &lt;/p&gt; &#10;          " readonly="false" owner_id="DocumentEditVAL"/>
      <property name="domConfig" id="domConfig" type="DOMConfiguration" description="&#10;            &lt;p&gt;&#10;&#9;      This allows the setting of the error handler, as described in the&#10;              &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt; &lt;code&gt;DOMConfiguration&lt;/code&gt; interface.&#10;&#9;      An object implementing this &lt;code&gt;DocumentEditVAL&lt;/code&gt; interface&#10;              and the &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt; &#10;&#9;      &lt;code&gt;Document&lt;/code&gt; interface, which also has a &lt;code&gt;domConfig&lt;/code&gt; attribute, needs to only implement this attribute once.&#10;            &lt;/p&gt;&#10;&#9;  " readonly="true" owner_id="DocumentEditVAL"/>
    </properties>
  </interface>
  <interface id="NodeEditVAL" name="NodeEditVAL" description=" &#10;&#9;  &lt;p&gt;This interface is similar to the &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt; &lt;code&gt;Node&lt;/code&gt; interface, with methods for guided document editing.&lt;/p&gt; &#10;&#9;">
    <methods>
      <method id="canInsertBefore" name="canInsertBefore" return_type="unsigned short" owner_id="NodeEditVAL" description=" &#10;&#9;    &lt;p&gt;Determines whether the &lt;code&gt;Node.insertBefore&lt;/code&gt; operation &#10;&#9;      would make this document not compliant with the &lt;code&gt;VAL_INCOMPLETE&lt;/code&gt;&#10;&#9;      validity type. &lt;/p&gt; &#10;&#9;  " return_description="&#10;               &lt;p&gt;&#10;                  A &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationState&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation state&lt;/loc&gt; constant.&#10;               &lt;/p&gt;&#10;            ">
        <parameter id="" name="newChild" type="Node" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;&lt;code&gt;Node&lt;/code&gt; to be inserted.&lt;/p&gt; &#10;&#9;      "/>
        <parameter id="" name="refChild" type="Node" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;Reference &lt;code&gt;Node&lt;/code&gt;.&lt;/p&gt; &#10;&#9;      "/>
      </method>
      <method id="canRemoveChild" name="canRemoveChild" return_type="unsigned short" owner_id="NodeEditVAL" description=" &#10;&#9;    &lt;p&gt;&#10;&#9;    Determines whether the &lt;code&gt;Node.removeChild&lt;/code&gt; operation &#10;&#9;      would make this document not compliant with the &lt;code&gt;VAL_INCOMPLETE&lt;/code&gt;&#10;&#9;      validity type. &lt;/p&gt; &#10;&#9;  " return_description="&#10;               &lt;p&gt;&#10;                  A &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationState&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation state&lt;/loc&gt; constant.&#10;               &lt;/p&gt;&#10;            ">
        <parameter id="" name="oldChild" type="Node" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;&lt;code&gt;Node&lt;/code&gt; to be removed.&lt;/p&gt; &#10;&#9;      "/>
      </method>
      <method id="canReplaceChild" name="canReplaceChild" return_type="unsigned short" owner_id="NodeEditVAL" description=" &#10;&#9;    &lt;p&gt;&#10;&#9;    Determines whether the &lt;code&gt;Node.replaceChild&lt;/code&gt; operation &#10;&#9;      would make this document not compliant with the &lt;code&gt;VAL_INCOMPLETE&lt;/code&gt; &#10;&#9;      validity type. &lt;/p&gt; &#10;&#9;  " return_description="&#10;               &lt;p&gt;&#10;                  A &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationState&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation state&lt;/loc&gt; constant.&#10;               &lt;/p&gt;&#10;            ">
        <parameter id="" name="newChild" type="Node" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;New &lt;code&gt;Node&lt;/code&gt;.&lt;/p&gt; &#10;&#9;      "/>
        <parameter id="" name="oldChild" type="Node" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;&lt;code&gt;Node&lt;/code&gt; to be replaced.&lt;/p&gt; &#10;&#9;      "/>
      </method>
      <method id="canAppendChild" name="canAppendChild" return_type="unsigned short" owner_id="NodeEditVAL" description=" &#10;&#9;    &lt;p&gt;&#10;&#9;    Determines whether the &lt;code&gt;Node.appendChild&lt;/code&gt; operation &#10;&#9;      would make this document not compliant with the &lt;code&gt;VAL_INCOMPLETE&lt;/code&gt; &#10;&#9;      validity type. &lt;/p&gt; &#10;&#9;  " return_description="&#10;               &lt;p&gt;&#10;                  A &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationState&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation state&lt;/loc&gt; constant.&#10;               &lt;/p&gt;&#10;            ">
        <parameter id="" name="newChild" type="Node" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;&lt;code&gt;Node&lt;/code&gt; to be appended.&lt;/p&gt; &#10;&#9;      "/>
      </method>
      <method id="nodeValidity" name="nodeValidity" return_type="unsigned short" owner_id="NodeEditVAL" description=" &#10;&#9;    &lt;p&gt;Determines if the node is valid relative to the &#10;            &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationType&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation type&lt;/loc&gt;&#10;            specified in &lt;code&gt;valType&lt;/code&gt;. This operation &#10;            doesn't normalize before checking if it is valid.&#10;&#9;    To do so, one would need to explicitly call a normalize&#10;&#9;    method.  The difference between this method and the &#10;&#9;    &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#VAL-Interfaces-DocumentEditVAL-validateDocument&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;DocumentEditVAL.validateDocument&lt;/loc&gt; method &#10;            is that the latter method only checks to &#10;            determine whether the entire document is valid.&#10;            &lt;/p&gt; &#10;&#9;  " return_description="&#10;               &lt;p&gt;&#10;                  A &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationState&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation state&lt;/loc&gt; constant.&#10;               &lt;/p&gt;&#10;            ">
        <parameter id="" name="valType" type="unsigned short" owner_id="" description="&#10;&#9;&#9;&lt;p&gt;Flag to indicate the &#10;                   &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationType&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation type&lt;/loc&gt;&#10;                   checking to be done.&#10;&#9;&#9;&lt;/p&gt;&#10;&#9;      "/>
      </method>
    </methods>
    <properties>
      <property name="defaultValue" id="defaultValue" type="DOMString" description=" &#10;&#9;    &lt;p&gt;&#10;              The default value specified in an attribute or an element declaration or &lt;code&gt;null&lt;/code&gt; if unspecified.  If the schema is a W3C XML schema,&#10;              this is the canonical lexical representation of the default value.&#10;            &lt;/p&gt;&#10;&#9;  " readonly="true" owner_id="NodeEditVAL"/>
      <property name="enumeratedValues" id="enumeratedValues" type="DOMStringList" description=" &#10;&#9;    &lt;p&gt;&#10;                A &lt;code&gt;DOMStringList&lt;/code&gt;, as &#10;&#9;        described in &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt;, &#10;                of distinct values for an attribute &#10;                or an element declaration or &lt;code&gt;null&lt;/code&gt;&#10;&#9;&#9;if unspecified.  If the schema is a W3C XML schema, this is a &#10;&#9;&#9;list of strings which are lexical representations corresponding&#10;                to the values in the [value] property of the enumeration &#10;&#9;&#9;component for the type of the attribute or element.  It is&#10;&#9;&#9;recommended that the canonical lexical representations of the&#10;&#9;&#9;values be used.&#10;            &lt;/p&gt;&#10;&#9;  " readonly="true" owner_id="NodeEditVAL"/>
    </properties>
  </interface>
  <interface id="ElementEditVAL" name="ElementEditVAL" description=" &#10;&#9;  &lt;p&gt;This interface extends the &lt;code&gt;NodeEditVAL&lt;/code&gt; interface &#10;             with additional methods for guided document editing. An&#10;&#9;     object implementing this interface must also implement the&#10;             &lt;code&gt;Element&lt;/code&gt; interface.&#10;          &lt;/p&gt; &#10;&#10;          &lt;p id=&quot;Level-3-VAL-Wildcards&quot;&gt;&#10;             This interface also has attributes that are a&#10;             &lt;code&gt;NameList&lt;/code&gt; of elements or attributes which can&#10;             appear in the specified context.  Some schema languages,&#10;             i.e., &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/xmlschema-1/#Wildcards&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;W3C XML&#10;             schema&lt;/loc&gt;, define wildcards which provide for validation&#10;             of attribute and element information items dependent on&#10;             their namespace names but independent of their local names.&#10;          &lt;/p&gt;&#10;  &#10;          &lt;p&gt;To expose wildcards, the &lt;code&gt;NameList&lt;/code&gt; returns the values &#10;             that represent the&#10;             &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;http://www.w3.org/TR/xmlschema-1/#namespace_constraint&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;&#10;             namespace constraint&lt;/loc&gt;:&#10;          &lt;/p&gt;&#10; &#10;         &lt;ulist&gt;&#10;         &lt;item&gt;&lt;p&gt;&#10;             &lt;code&gt;{namespaceURI, name}&lt;/code&gt;&#10;             is &lt;code&gt;{null, ##any}&lt;/code&gt; if &lt;emph&gt;any&lt;/emph&gt;;&#10;         &lt;/p&gt;&lt;/item&gt;&#10;&#10;         &lt;item&gt;&lt;p&gt;&#10;             &lt;code&gt;{namespaceURI, name}&lt;/code&gt; &#10;             is &lt;code&gt;{namespace_a, ##other}&lt;/code&gt; if &#10;             &lt;emph&gt;not and a namespace name (namespace_a)&lt;/emph&gt;;&#10;         &lt;/p&gt;&lt;/item&gt;&#10;  &#10;         &lt;item&gt;&lt;p&gt;&#10;             &lt;code&gt;{namespaceURI, name}&lt;/code&gt; &#10;             is &lt;code&gt;{null, ##other}&lt;/code&gt; if&#10;             &lt;emph&gt;not and absent&lt;/emph&gt;;&#10;         &lt;/p&gt;&lt;/item&gt;&#10;&#10;         &lt;item&gt;&lt;p&gt;&#10;             Pairs of &lt;code&gt;{namespaceURI, name}&lt;/code&gt; with values&#10;             &lt;code&gt;{a_namespaceURI | null, null}&lt;/code&gt; if &#10;             &lt;emph&gt;a set whose members are either namespace&#10;             names or absent&lt;/emph&gt;.&#10;         &lt;/p&gt;&lt;/item&gt;&#10;         &lt;/ulist&gt;&#10;&#10;       " parent_id="NodeEditVAL">
    <methods>
      <method id="canSetTextContent" name="canSetTextContent" return_type="unsigned short" owner_id="ElementEditVAL" description=" &#10;&#9;    &lt;p&gt;&#10;&#9;      Determines if the text content of this node and its descendants&#10;              can be set to the string passed in.&#10;            &lt;/p&gt; &#10;&#9;  " return_description="&#10;               &lt;p&gt;&#10;                  A &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationState&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation state&lt;/loc&gt; constant.&#10;               &lt;/p&gt;&#10;            ">
        <parameter id="" name="possibleTextContent" type="DOMString" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;Possible text content string.&lt;/p&gt; &#10;&#9;      "/>
      </method>
      <method id="canSetAttribute" name="canSetAttribute" return_type="unsigned short" owner_id="ElementEditVAL" description=" &#10;&#9;    &lt;p&gt;Determines if the value for specified attribute can be set.&lt;/p&gt; &#10;&#9;  " return_description="&#10;               &lt;p&gt;&#10;                  A &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationState&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation state&lt;/loc&gt; constant.&#10;               &lt;/p&gt;&#10;            ">
        <parameter id="" name="attrname" type="DOMString" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;Name of attribute.&lt;/p&gt; &#10;&#9;      "/>
        <parameter id="" name="attrval" type="DOMString" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;Value to be assigned to the attribute.&lt;/p&gt; &#10;&#9;      "/>
      </method>
      <method id="canSetAttributeNode" name="canSetAttributeNode" return_type="unsigned short" owner_id="ElementEditVAL" description=" &#10;&#9;    &lt;p&gt;Determines if an attribute node can be added. &lt;/p&gt;&#10;&#9;  " return_description="&#10;               &lt;p&gt;&#10;                  A &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationState&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation state&lt;/loc&gt; constant.&#10;               &lt;/p&gt;&#10;            ">
        <parameter id="" name="attrNode" type="Attr" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;&lt;code&gt;Node&lt;/code&gt; in which the attribute can possibly be set.&lt;/p&gt; &#10;&#9;      "/>
      </method>
      <method id="canSetAttributeNS" name="canSetAttributeNS" return_type="unsigned short" owner_id="ElementEditVAL" description=" &#10;&#9;    &lt;p&gt;Determines if the attribute with given namespace and qualified name&#10;&#9;      can be created if not already present in the attribute list of the element. If&#10;&#9;      the attribute with the same qualified name and namespaceURI is already present in the&#10;&#9;      element's attribute list, it tests whether the value of the attribute and its prefix can be set to &#10;&#9;      the new value. &lt;/p&gt; &#10;&#9;  " return_description="&#10;               &lt;p&gt;&#10;                  A &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationState&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation state&lt;/loc&gt; constant.&#10;               &lt;/p&gt;&#10;            ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;&lt;code&gt;namespaceURI&lt;/code&gt; of namespace.&lt;/p&gt; &#10;&#9;      "/>
        <parameter id="" name="qualifiedName" type="DOMString" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;Qualified name of attribute.&lt;/p&gt; &#10;&#9;      "/>
        <parameter id="" name="value" type="DOMString" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;Value to be assigned to the attribute.&lt;/p&gt; &#10;&#9;      "/>
      </method>
      <method id="canRemoveAttribute" name="canRemoveAttribute" return_type="unsigned short" owner_id="ElementEditVAL" description=" &#10;&#9;    &lt;p&gt;Verifies if an attribute by the given name can be removed.&lt;/p&gt; &#10;&#9;  " return_description="&#10;               &lt;p&gt;&#10;                  A &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationState&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation state&lt;/loc&gt; constant.&#10;               &lt;/p&gt;&#10;            ">
        <parameter id="" name="attrname" type="DOMString" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;Name of attribute.&lt;/p&gt; &#10;&#9;      "/>
      </method>
      <method id="canRemoveAttributeNS" name="canRemoveAttributeNS" return_type="unsigned short" owner_id="ElementEditVAL" description=" &#10;&#9;    &lt;p&gt;Verifies if an attribute by the given local name and namespace can be&#10;&#9;      removed.&lt;/p&gt; &#10;&#9;  " return_description="&#10;               &lt;p&gt;&#10;                  A &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationState&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation state&lt;/loc&gt; constant.&#10;               &lt;/p&gt;&#10;            ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;The namespace URI of the attribute to remove.&lt;/p&gt; &#10;&#9;      "/>
        <parameter id="" name="localName" type="DOMString" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;Local name of the attribute to be removed.&lt;/p&gt; &#10;&#9;      "/>
      </method>
      <method id="canRemoveAttributeNode" name="canRemoveAttributeNode" return_type="unsigned short" owner_id="ElementEditVAL" description=" &#10;&#9;    &lt;p&gt;Determines if an attribute node can be removed.&lt;/p&gt; &#10;&#9;  " return_description="&#10;               &lt;p&gt;&#10;                  A &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationState&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation state&lt;/loc&gt; constant.&#10;               &lt;/p&gt;&#10;            ">
        <parameter id="" name="attrNode" type="Node" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;The &lt;code&gt;Attr&lt;/code&gt; node to remove from the attribute list.&lt;/p&gt; &#10;&#9;      "/>
      </method>
      <method id="isElementDefined" name="isElementDefined" return_type="unsigned short" owner_id="ElementEditVAL" description=" &#10;&#9;    &lt;p&gt;Determines if &lt;code&gt;name&lt;/code&gt; is defined in the schema.&#10;               This only applies to &lt;termref def=&quot;dt-global-declaration&quot;&gt;global declarations&lt;/termref&gt;.  This method is for non-namespace aware schemas.&#10;            &lt;/p&gt;&#10;&#9;  " return_description="&#10;               &lt;p&gt;&#10;                  A &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationState&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation state&lt;/loc&gt; constant.&#10;               &lt;/p&gt;&#10;            ">
        <parameter id="" name="name" type="DOMString" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;Name of element.&lt;/p&gt; &#10;&#9;      "/>
      </method>
      <method id="isElementDefinedNS" name="isElementDefinedNS" return_type="unsigned short" owner_id="ElementEditVAL" description=" &#10;&#9;    &lt;p&gt;Determines if &lt;code&gt;name&lt;/code&gt; in this namespace is defined in the&#10;&#9;      current context.  Thus not only does this apply to &lt;termref def=&quot;dt-global-declaration&quot;&gt;global declarations&lt;/termref&gt;.&#10;              but depending on the content, this may also apply to local &#10;              definitions.  This method is for namespace aware schemas.&#10;            &lt;/p&gt; &#10;&#9;  " return_description="&#10;               &lt;p&gt;&#10;                  A &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationState&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation state&lt;/loc&gt; constant.&#10;               &lt;/p&gt;&#10;            ">
        <parameter id="" name="namespaceURI" type="DOMString" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;&lt;code&gt;namespaceURI&lt;/code&gt; of namespace.&lt;/p&gt; &#10;&#9;      "/>
        <parameter id="" name="name" type="DOMString" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;Name of element.&lt;/p&gt; &#10;&#9;      "/>
      </method>
    </methods>
    <properties>
      <property name="allowedChildren" id="allowedChildren" type="NameList" description="&#10;            &lt;p&gt;A &lt;code&gt;NameList&lt;/code&gt;, as described in &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt;,&#10;           of all possible element information items or&#10;           &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#VAL-Interfaces-ElementEditVAL&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;wildcards&lt;/loc&gt;&#10;           that can appear as children of this element, or &lt;code&gt;null&lt;/code&gt;&#10;           if this element has no context or schema.&#10;           Duplicate pairs of {namespaceURI, name} are eliminated.             &#10;            &lt;/p&gt;&#10;&#10;&#9;  " readonly="true" owner_id="ElementEditVAL"/>
      <property name="allowedFirstChildren" id="allowedFirstChildren" type="NameList" description="&#10;            &lt;p&gt;A &lt;code&gt;NameList&lt;/code&gt;, as described in &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt;,&#10;           of all possible element information items or&#10;           &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#VAL-Interfaces-ElementEditVAL&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;wildcards&lt;/loc&gt;&#10;           that can appear as a first child of this element, or &lt;code&gt;null&lt;/code&gt;&#10;           if this element has no context or schema.&#10;           Duplicate pairs of {namespaceURI, name} are eliminated.&#10;            &lt;/p&gt;&#10;&#9;  " readonly="true" owner_id="ElementEditVAL"/>
      <property name="allowedParents" id="allowedParents" type="NameList" description=" &#10;            &lt;p&gt;A &lt;code&gt;NameList&lt;/code&gt;, as described in &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt;,&#10;           of all possible element information items&#10;           that can appear as a parent this element, or &lt;code&gt;null&lt;/code&gt;&#10;           if this element has no context or schema.&#10;            &lt;/p&gt;&#10;&#9;  " readonly="true" owner_id="ElementEditVAL"/>
      <property name="allowedNextSiblings" id="allowedNextSiblings" type="NameList" description=" &#10;            &lt;p&gt;A &lt;code&gt;NameList&lt;/code&gt;, as described in &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt;,&#10;           of all element information items&#10;           or &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#VAL-Interfaces-ElementEditVAL&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;wildcards&lt;/loc&gt;&#10;           that can be inserted as a next sibling of this element, or &lt;code&gt;null&lt;/code&gt;&#10;           if this element has no context or schema.&#10;           Duplicate pairs of {namespaceURI, name} are eliminated.             &#10;            &lt;/p&gt;&#10;&#9;  " readonly="true" owner_id="ElementEditVAL"/>
      <property name="allowedPreviousSiblings" id="allowedPreviousSiblings" type="NameList" description=" &#10;            &lt;p&gt;A &lt;code&gt;NameList&lt;/code&gt;, as described in &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt;,&#10;           of all element information items&#10;           or &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#VAL-Interfaces-ElementEditVAL&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;wildcards&lt;/loc&gt;&#10;           that can be inserted as a previous sibling of this element, or &lt;code&gt;null&lt;/code&gt;&#10;           if this element has no context or schema.&#10;            &lt;/p&gt;&#10;&#9;  " readonly="true" owner_id="ElementEditVAL"/>
      <property name="allowedAttributes" id="allowedAttributes" type="NameList" description=" &#10;            &lt;p&gt;A &lt;code&gt;NameList&lt;/code&gt;, as described in &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt;,&#10;           of all possible attribute information items&#10;           or &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#VAL-Interfaces-ElementEditVAL&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;wildcards&lt;/loc&gt;&#10;           that can appear as attributes of this element, or &lt;code&gt;null&lt;/code&gt;&#10;           if this element has no context or schema.&#10;           Duplicate pairs of {namespaceURI, name} are eliminated.             &#10;            &lt;/p&gt;&#10;&#9;  " readonly="true" owner_id="ElementEditVAL"/>
      <property name="requiredAttributes" id="requiredAttributes" type="NameList" description=" &#10;            &lt;p&gt;A &lt;code&gt;NameList&lt;/code&gt;, as described in &lt;bibref ref=&quot;DOMCore&quot;&gt;&lt;/bibref&gt;,&#10;           of required attribute information items&#10;           that must appear on this element, or &lt;code&gt;null&lt;/code&gt;&#10;           if this element has no context or schema.&#10;            &lt;/p&gt;&#10;&#9;  " readonly="true" owner_id="ElementEditVAL"/>
      <property name="contentType" id="contentType" type="unsigned short" description=" &#10;            &lt;p&gt;The content type of an element as defined &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#ElementEditVAL-ContentTypeVAL&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;above&lt;/loc&gt;.                                               &#10;            &lt;/p&gt; &#10;&#9;  " readonly="true" owner_id="ElementEditVAL"/>
    </properties>
  </interface>
  <interface id="CharacterDataEditVAL" name="CharacterDataEditVAL" description=" &#10;&#9;  &lt;p&gt;This interface extends the &lt;code&gt;NodeEditVAL&lt;/code&gt; interface with additional methods for document editing. An object&#10;&#9;    implementing this interface must also implement &lt;code&gt;CharacterData&lt;/code&gt; interface.&#10;&#9;    When validating &lt;code&gt;CharacterData&lt;/code&gt; nodes, the &#10;            &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-nodeValidity&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;NodeEditVAL.nodeValidity&lt;/loc&gt;&#10;            operation must find the nearest parent node in order to do this; if&#10;            no parent node is found, &#10;            &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#VAL-Interfaces-NodeEditVAL-VAL_UNKNOWN&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;VAL_UNKNOWN &#10;            &lt;/loc&gt; is returned.  In addition, when &#10;            &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#VAL-Interfaces-NodeEditVAL-VAL_INCOMPLETE&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;VAL_INCOMPLETE&#10;&#9;    &lt;/loc&gt; is passed in as an argument to the &lt;code&gt;NodeEditVAL.nodeValidity&lt;/code&gt; &#10;            operation to operate on such nodes, the operation considers all the text and not just some of it.&#10;          &lt;/p&gt; &#10;&#9;" parent_id="NodeEditVAL">
    <methods>
      <method id="isWhitespaceOnly" name="isWhitespaceOnly" return_type="unsigned short" owner_id="CharacterDataEditVAL" description=" &#10;            &lt;p&gt;Determines if character data is only whitespace.&lt;/p&gt;&#10;&#9;  " return_description="&#10;               &lt;p&gt;&#10;                  A &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationState&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation state&lt;/loc&gt; constant.&#10;               &lt;/p&gt;&#10;            "/>
      <method id="canSetData" name="canSetData" return_type="unsigned short" owner_id="CharacterDataEditVAL" description=" &#10;&#9;    &lt;p&gt;Determines if character data can be set.&lt;/p&gt; &#10;&#9;  " return_description="&#10;               &lt;p&gt;&#10;                  A &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationState&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation state&lt;/loc&gt; constant.&#10;               &lt;/p&gt;&#10;            ">
        <parameter id="" name="arg" type="DOMString" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;Argument to be set.&lt;/p&gt; &#10;&#9;      "/>
      </method>
      <method id="canAppendData" name="canAppendData" return_type="unsigned short" owner_id="CharacterDataEditVAL" description=" &#10;&#9;    &lt;p&gt;Determines if character data can be appended.&lt;/p&gt; &#10;&#9;  " return_description="&#10;               &lt;p&gt;&#10;                  A &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationState&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation state&lt;/loc&gt; constant.&#10;               &lt;/p&gt;&#10;            ">
        <parameter id="" name="arg" type="DOMString" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;Data to be appended.&lt;/p&gt; &#10;&#9;      "/>
      </method>
      <method id="canReplaceData" name="canReplaceData" return_type="unsigned short" owner_id="CharacterDataEditVAL" description=" &#10;&#9;    &lt;p&gt;Determines if character data can be replaced.&lt;/p&gt; &#10;&#9;  " return_description="&#10;               &lt;p&gt;&#10;                  A &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationState&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation state&lt;/loc&gt; constant.&#10;               &lt;/p&gt;&#10;            ">
        <parameter id="" name="offset" type="unsigned long" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;Offset.&lt;/p&gt; &#10;&#9;      "/>
        <parameter id="" name="count" type="unsigned long" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;Replacement.&lt;/p&gt; &#10;&#9;      "/>
        <parameter id="" name="arg" type="DOMString" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;Argument to be set.&lt;/p&gt; &#10;&#9;      "/>
      </method>
      <method id="canInsertData" name="canInsertData" return_type="unsigned short" owner_id="CharacterDataEditVAL" description=" &#10;&#9;    &lt;p&gt;Determines if character data can be inserted.&lt;/p&gt; &#10;&#9;  " return_description="&#10;               &lt;p&gt;&#10;                  A &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationState&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation state&lt;/loc&gt; constant.&#10;               &lt;/p&gt;&#10;            ">
        <parameter id="" name="offset" type="unsigned long" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;Offset.&lt;/p&gt; &#10;&#9;      "/>
        <parameter id="" name="arg" type="DOMString" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;Argument to be set.&lt;/p&gt; &#10;&#9;      "/>
      </method>
      <method id="canDeleteData" name="canDeleteData" return_type="unsigned short" owner_id="CharacterDataEditVAL" description=" &#10;&#9;    &lt;p&gt;Determines if character data can be deleted.&lt;/p&gt; &#10;&#9;  " return_description="&#10;               &lt;p&gt;&#10;                  A &lt;loc xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; href=&quot;#NodeEditVAL-validationState&quot; xlink:type=&quot;simple&quot; xlink:show=&quot;replace&quot; xlink:actuate=&quot;onRequest&quot;&gt;validation state&lt;/loc&gt; constant.&#10;               &lt;/p&gt;&#10;            ">
        <parameter id="" name="offset" type="unsigned long" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;Offset.&lt;/p&gt; &#10;&#9;      "/>
        <parameter id="" name="count" type="unsigned long" owner_id="" description=" &#10;&#9;&#9;&lt;p&gt;Number of 16-bit units to delete.&lt;/p&gt; &#10;&#9;      "/>
      </method>
    </methods>
    <properties/>
  </interface>
  <interface id="XPathEvaluator" name="XPathEvaluator" description="&#10;&#9;  &lt;p&gt;&#10;&#9;    The evaluation of XPath expressions is provided by&#10;            &lt;code&gt;XPathEvaluator&lt;/code&gt;.  In a DOM&#10;            implementation which supports the XPath 3.0 feature, as described&#10;            above, the &lt;code&gt;XPathEvaluator&lt;/code&gt; interface will be implemented &#10;            on the same object which implements the &lt;code&gt;Document&lt;/code&gt; &#10;            interface permitting it to be obtained by the usual binding-specific&#10;            method such as casting or by using the DOM Level 3 getInterface method.  &#10;            In this case the implementation obtained from the Document supports the &#10;            XPath DOM module and is compatible with the XPath 1.0 specification. &lt;/p&gt;&#10;          &lt;p&gt;Evaluation of expressions with specialized extension functions or &#10;            variables may not work in all implementations and is, therefore, not &#10;            portable.  &lt;code&gt;XPathEvaluator&lt;/code&gt; implementations may be available &#10;            from other sources that could provide specific support for specialized &#10;            extension functions or variables as would be defined by other &#10;            specifications.&#10;          &lt;/p&gt;&#10;        ">
    <methods>
      <method id="createExpression" name="createExpression" return_type="XPathExpression" owner_id="XPathEvaluator" description="&#10;&#9;    &lt;p&gt;Creates a parsed XPath expression with resolved namespaces.&#10;&#9;    This is useful when an expression will be reused in an application&#10;&#9;    since it makes it possible to compile the expression string into a&#10;&#9;    more efficient internal form and preresolve all &lt;termref def=&quot;dt-namespaceprefix&quot;&gt;namespace prefixes&lt;/termref&gt; which occur&#10;&#9;    within the expression.&lt;/p&gt;&#10;&#9;  " return_description="&#10;&#9;      &lt;p&gt;The compiled form of the XPath expression.&lt;/p&gt;&#10;&#9;    ">
        <parameter id="" name="expression" type="DOMString" owner_id="" description="&#10;&#9;&#9;&lt;p&gt;The XPath expression string to be parsed.&lt;/p&gt;&#10;&#9;      "/>
        <parameter id="" name="resolver" type="XPathNSResolver" owner_id="" description="&#10;                &lt;p&gt;The &lt;code&gt;resolver&lt;/code&gt; permits translation of all &#10;                prefixes, including the &lt;code&gt;xml&lt;/code&gt; namespace prefix,&#10;                within the XPath expression into appropriate &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URIs&lt;/termref&gt;.  If this is&#10;&#9;&#9;specified as &lt;code&gt;null&lt;/code&gt;, any &lt;termref def=&quot;dt-namespaceprefix&quot;&gt;namespace prefix&lt;/termref&gt; within the&#10;&#9;&#9;expression will result in &lt;code&gt;DOMException&lt;/code&gt; being&#10;&#9;&#9;thrown with the code &lt;code&gt;NAMESPACE_ERR&lt;/code&gt;.&lt;/p&gt;&#10;&#9;      "/>
      </method>
      <method id="createNSResolver" name="createNSResolver" return_type="XPathNSResolver" owner_id="XPathEvaluator" description="&#10;&#9;    &lt;p&gt;Adapts any DOM node to resolve namespaces so that an XPath&#10;            expression can be easily evaluated relative to the context of&#10;            the node where it appeared within the document. This adapter&#10;            works like the DOM Level 3 method &lt;code&gt;lookupNamespaceURI&lt;/code&gt;&#10;            on nodes in resolving the namespaceURI from a given prefix &#10;            using the current information available in the node's &#10;            hierarchy at the time lookupNamespaceURI is called. also &#10;            correctly resolving the implicit xml prefix.&lt;/p&gt;&#10;&#9;  " return_description="&#10;&#9;      &lt;p&gt;&lt;code&gt;XPathNSResolver&lt;/code&gt; which resolves namespaces with respect to&#10;&#9;      the definitions in scope for a specified node.&lt;/p&gt;&#10;&#9;    ">
        <parameter id="" name="nodeResolver" type="Node" owner_id="" description="&#10;&#9;        &lt;p&gt;The node to be used as a context for namespace resolution.&lt;/p&gt;&#10;&#9;      "/>
      </method>
      <method id="evaluate" name="evaluate" return_type="DOMObject" owner_id="XPathEvaluator" description="&#10;&#9;    &lt;p&gt;Evaluates an XPath expression string and returns a result of the&#10;&#9;    specified type if possible.&lt;/p&gt;&#10;&#9;  " return_description="&#10;&#9;      &lt;p&gt;The result of the evaluation of the XPath expression.&lt;/p&gt;&#10;              &lt;p&gt;For XPath 1.0 results, this object will be of type &#10;                  &lt;code&gt;XPathResult&lt;/code&gt;.&lt;/p&gt;&#10;&#9;    ">
        <parameter id="" name="expression" type="DOMString" owner_id="" description="&#10;&#9;&#9;&lt;p&gt;The XPath expression string to be parsed and evaluated.&lt;/p&gt;&#10;&#9;      "/>
        <parameter id="" name="contextNode" type="Node" owner_id="" description="&#10;&#9;      &lt;p&gt;The &lt;code&gt;context&lt;/code&gt; is context node for the evaluation &#10;&#9;       of this XPath expression.  If the XPathEvaluator was obtained&#10;              by casting the &lt;code&gt;Document&lt;/code&gt; then this must be owned by&#10;              the same document and must be a &lt;code&gt;Document&lt;/code&gt;, &#10;              &lt;code&gt;Element&lt;/code&gt;, &lt;code&gt;Attribute&lt;/code&gt;, &lt;code&gt;Text&lt;/code&gt;, &#10;              &lt;code&gt;CDATASection&lt;/code&gt;, &lt;code&gt;Comment&lt;/code&gt;,&#10;              &lt;code&gt;ProcessingInstruction&lt;/code&gt;, or &lt;code&gt;XPathNamespace&lt;/code&gt;&#10;              node.  If the context node is a &lt;code&gt;Text&lt;/code&gt; or a&#10;              &lt;code&gt;CDATASection&lt;/code&gt;, then the context is interpreted as the&#10;              whole logical text node as seen by XPath, unless the node is&#10;              empty in which case it may not serve as the XPath context.&lt;/p&gt;&#10;&#9;      "/>
        <parameter id="" name="resolver" type="XPathNSResolver" owner_id="" description="&#10;                &lt;p&gt;The &lt;code&gt;resolver&lt;/code&gt; permits translation of all &#10;                prefixes, including the &lt;code&gt;xml&lt;/code&gt; namespace prefix,&#10;                within the XPath expression into appropriate &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URIs&lt;/termref&gt;.  If this is&#10;&#9;&#9;specified as &lt;code&gt;null&lt;/code&gt;, any &lt;termref def=&quot;dt-namespaceprefix&quot;&gt;namespace prefix&lt;/termref&gt; within the&#10;&#9;&#9;expression will result in &lt;code&gt;DOMException&lt;/code&gt; being&#10;&#9;&#9;thrown with the code &lt;code&gt;NAMESPACE_ERR&lt;/code&gt;.&lt;/p&gt;&#10;&#9;      "/>
        <parameter id="" name="type" type="unsigned short" owner_id="" description="&#10;&#9;        &lt;p&gt;If a specific &lt;code&gt;type&lt;/code&gt; is specified, then the&#10;                result will be returned as the corresponding type.&lt;/p&gt;&#10;                &lt;p&gt;For XPath 1.0 results, this must be one of the codes of the&#10;                &lt;code&gt;XPathResult&lt;/code&gt; interface.&lt;/p&gt;&#10;&#9;      "/>
        <parameter id="" name="result" type="DOMObject" owner_id="" description="&#10;                &lt;p&gt;The &lt;code&gt;result&lt;/code&gt; specifies a specific result object &#10;&#9;&#9;which may be reused and returned by this method.  If this is specified&#10;                as &lt;code&gt;null&lt;/code&gt;or the implementation does not reuse the specified &#10;                result, a new result object will be constructed and returned.&lt;/p&gt;&#10;                &lt;p&gt;For XPath 1.0 results, this object will be of type &#10;                  &lt;code&gt;XPathResult&lt;/code&gt;.&lt;/p&gt;&#10;&#9;      "/>
      </method>
    </methods>
    <properties/>
  </interface>
  <interface id="XPathExpression" name="XPathExpression" description="&#10;          &lt;p&gt;The &lt;code&gt;XPathExpression&lt;/code&gt; interface represents a parsed &#10;          and resolved XPath expression.&lt;/p&gt;&#10;        ">
    <methods>
      <method id="evaluate" name="evaluate" return_type="DOMObject" owner_id="XPathExpression" description="&#10;&#9;    &lt;p&gt;Evaluates this XPath expression and returns a result.&lt;/p&gt;&#10;&#9;  " return_description="&#10;&#9;      &lt;p&gt;The result of the evaluation of the XPath expression.&lt;/p&gt;&#10;              &lt;p&gt;For XPath 1.0 results, this object will be of type &#10;                &lt;code&gt;XPathResult&lt;/code&gt;.&lt;/p&gt;&#10;&#9;    ">
        <parameter id="" name="contextNode" type="Node" owner_id="" description="&#10;&#9;      &lt;p&gt;The &lt;code&gt;context&lt;/code&gt; is context node for the evaluation &#10;&#9;       of this XPath expression.&lt;/p&gt;&#10;              &lt;p&gt;If the XPathEvaluator was obtained&#10;              by casting the &lt;code&gt;Document&lt;/code&gt; then this must be owned by&#10;              the same document and must be a &lt;code&gt;Document&lt;/code&gt;, &#10;              &lt;code&gt;Element&lt;/code&gt;, &lt;code&gt;Attribute&lt;/code&gt;, &lt;code&gt;Text&lt;/code&gt;, &#10;              &lt;code&gt;CDATASection&lt;/code&gt;, &lt;code&gt;Comment&lt;/code&gt;,&#10;              &lt;code&gt;ProcessingInstruction&lt;/code&gt;, or &lt;code&gt;XPathNamespace&lt;/code&gt;&#10;              node.&lt;/p&gt;&#10;              &lt;p&gt;If the context node is a &lt;code&gt;Text&lt;/code&gt; or a&#10;              &lt;code&gt;CDATASection&lt;/code&gt;, then the context is interpreted as the&#10;              whole logical text node as seen by XPath, unless the node is&#10;              empty in which case it may not serve as the XPath context.&lt;/p&gt;&#10;&#9;      "/>
        <parameter id="" name="type" type="unsigned short" owner_id="" description="&#10;               &lt;p&gt;If a specific &lt;code&gt;type&lt;/code&gt; is specified, then the&#10;               result will be coerced to return the specified type relying&#10;                 on XPath conversions and fail if the desired coercion is not &#10;                 possible.  This must be one of the type codes of&#10;               &lt;code&gt;XPathResult&lt;/code&gt;.&lt;/p&gt;&#10;             "/>
        <parameter id="" name="result" type="DOMObject" owner_id="" description="&#10;                &lt;p&gt;The &lt;code&gt;result&lt;/code&gt; specifies a specific result object &#10;&#9;&#9;which may be reused and returned by this method.  If this is specified&#10;                as &lt;code&gt;null&lt;/code&gt;or the implementation does not reuse the specified &#10;                result, a new result object will be constructed and returned.&lt;/p&gt;&#10;                &lt;p&gt;For XPath 1.0 results, this object will be of type &#10;                  &lt;code&gt;XPathResult&lt;/code&gt;.&lt;/p&gt;&#10;&#9;      "/>
      </method>
    </methods>
    <properties/>
  </interface>
  <interface id="XPathNSResolver" name="XPathNSResolver" description="&#10;&#9;  &lt;p&gt;The &lt;code&gt;XPathNSResolver&lt;/code&gt; interface permit&#10;&#9;  &lt;code&gt;prefix&lt;/code&gt; strings in the expression to be properly bound to&#10;&#9;  &lt;code&gt;namespaceURI&lt;/code&gt; strings.  &lt;code&gt;XPathEvaluator&lt;/code&gt; can&#10;&#9;  construct an implementation of &lt;code&gt;XPathNSResolver&lt;/code&gt; from a &#10;&#9;  node, or the interface may be implemented by any application.&lt;/p&gt;&#10;&#9;">
    <methods>
      <method id="lookupNamespaceURI" name="lookupNamespaceURI" return_type="DOMString" owner_id="XPathNSResolver" description="&#10;&#9;    &lt;p&gt;Look up the &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace&#10;&#9;    URI&lt;/termref&gt; associated to the given &lt;termref def=&quot;dt-namespaceprefix&quot;&gt;namespace prefix&lt;/termref&gt;.  The&#10;            XPath evaluator must never call this with a &lt;code&gt;null&lt;/code&gt; or&#10;            empty argument, because the result of doing this is undefined.&lt;/p&gt;&#10;&#9;  " return_description="&#10;&#9;      &lt;p&gt;Returns the associated &lt;termref def=&quot;dt-namespaceURI&quot;&gt;namespace URI&lt;/termref&gt; or&#10;&#9;      &lt;code&gt;null&lt;/code&gt; if none is found.&lt;/p&gt;&#10;&#9;    ">
        <parameter id="" name="prefix" type="DOMString" owner_id="" description="&#10;&#9;&#9;&lt;p&gt;The prefix to look for.&lt;/p&gt;&#10;&#9;      "/>
      </method>
    </methods>
    <properties/>
  </interface>
  <interface id="XPathResult" name="XPathResult" description="&#10;&#9;  &lt;p&gt;The &lt;code&gt;XPathResult&lt;/code&gt; interface represents the result&#10;          of the evaluation of an XPath 1.0 expression within the context &#10;          of a particular node.  Since&#10;&#9;  evaluation of an XPath expression can result in various result&#10;&#9;  types, this object makes it possible to discover and manipulate&#10;&#9;  the type and value of the result.&lt;/p&gt;&#10;        ">
    <methods>
      <method id="iterateNext" name="iterateNext" return_type="Node" owner_id="XPathResult" description="&#10;&#9;    &lt;p&gt;Iterates and returns the next node from the node set&#10;&#9;    or &lt;code&gt;null&lt;/code&gt;if there are no more nodes.&lt;/p&gt;&#10;&#9;  " return_description="&#10;&#9;      &lt;p&gt;Returns the next node.&lt;/p&gt;&#10;&#9;    "/>
      <method id="snapshotItem" name="snapshotItem" return_type="Node" owner_id="XPathResult" description="&#10;&#9;    &lt;p&gt;Returns the &lt;code&gt;index&lt;/code&gt;th item in the snapshot collection. &#10;&#9;    If &lt;code&gt;index&lt;/code&gt; is greater than or equal to the number of nodes&#10;&#9;    in the list, this method returns &lt;code&gt;null&lt;/code&gt;.  Unlike the&#10;            iterator result, the snapshot does not become invalid, but may&#10;            not correspond to the current document if it is mutated.&lt;/p&gt;&#10;&#9;  " return_description="&#10;&#9;      &lt;p&gt;The node at the &lt;code&gt;index&lt;/code&gt;th position in the&#10;&#9;      &lt;code&gt;NodeList&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if that is not a&#10;&#9;      valid index.&lt;/p&gt;&#10;&#9;    ">
        <parameter id="" name="index" type="unsigned long" owner_id="" description="&#10;&#9;&#9;&lt;p&gt;Index into the snapshot collection.&lt;/p&gt;&#10;&#9;      "/>
      </method>
    </methods>
    <properties>
      <property name="resultType" id="resultType" type="unsigned short" description="&#10;            &lt;p&gt;A code representing the type of this result, as defined&#10;            by the type constants.&lt;/p&gt;&#10;          " readonly="true" owner_id="XPathResult"/>
      <property name="numberValue" id="numberValue" type="double" description="&#10;            &lt;p&gt;The value of this number result.  If the native double type of the DOM binding does &#10;            not directly support the exact IEEE 754 result of the XPath expression, then it is up to&#10;            the definition of the binding to specify how the XPath number is converted to the&#10;            native binding number.&lt;/p&gt;&#10;          " readonly="true" owner_id="XPathResult"/>
      <property name="stringValue" id="stringValue" type="DOMString" description="&#10;&#9;    &lt;p&gt;The value of this string result.&lt;/p&gt;&#10;          " readonly="true" owner_id="XPathResult"/>
      <property name="booleanValue" id="booleanValue" type="boolean" description="&#10;&#9;    &lt;p&gt;The value of this boolean result.&lt;/p&gt;&#10;          " readonly="true" owner_id="XPathResult"/>
      <property name="singleNodeValue" id="singleNodeValue" type="Node" description="&#10;&#9;    &lt;p&gt;The value of this single node result, which may be &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#10;          " readonly="true" owner_id="XPathResult"/>
      <property name="invalidIteratorState" id="invalidIteratorState" type="boolean" description="&#10;&#9;    &lt;p&gt;Signifies that the iterator has become invalid.  &#10;&#9;    True if &lt;code&gt;resultType&lt;/code&gt; is&#10;&#9;    &lt;code&gt;UNORDERED_NODE_ITERATOR_TYPE&lt;/code&gt; or&#10;&#9;    &lt;code&gt;ORDERED_NODE_ITERATOR_TYPE&lt;/code&gt; and the&#10;&#9;    document has been modified since this result was&#10;&#9;    returned.&lt;/p&gt;&#10;&#9;  " readonly="true" owner_id="XPathResult"/>
      <property name="snapshotLength" id="snapshotLength" type="unsigned long" description="&#10;&#9;  &lt;p&gt;The number of nodes in the result snapshot.  Valid values&#10;&#9;    for snapshotItem indices are &lt;code&gt;0&lt;/code&gt; to &#10;            &lt;code&gt;snapshotLength-1&lt;/code&gt; inclusive.&lt;/p&gt;&#10;&#9;  " readonly="true" owner_id="XPathResult"/>
    </properties>
  </interface>
  <interface id="XPathNamespace" name="XPathNamespace" description="&#10;&#9;  &lt;p&gt;The &lt;code&gt;XPathNamespace&lt;/code&gt; interface is returned by &#10;          &lt;code&gt;XPathResult&lt;/code&gt; interfaces to represent &#10;          the XPath namespace node type that DOM lacks.&#10;          There is no public constructor for this node type.  Attempts to &#10;          place it into a hierarchy or a NamedNodeMap result in a &#10;          &lt;code&gt;DOMException&lt;/code&gt; with the code &#10;          &lt;code&gt;HIERARCHY_REQUEST_ERR&lt;/code&gt;.  This node is &#10;&#9;    &lt;termref def=&quot;dt-readonly-node&quot;&gt;read only&lt;/termref&gt;, so methods or setting of attributes that would mutate &#10;          the node result in a DOMException with the code &#10;          &lt;code&gt;NO_MODIFICATION_ALLOWED_ERR&lt;/code&gt;.&lt;/p&gt;&#10;          &lt;p&gt;The core specification describes attributes of the&#10;          &lt;code&gt;Node&lt;/code&gt; interface that are different for different&#10;          node types but does not describe &lt;code&gt;XPATH_NAMESPACE_NODE&lt;/code&gt;, &#10;          so here is a description of those attributes for this node type.&#10;          All attributes of &lt;code&gt;Node&lt;/code&gt; not described in this section &#10;          have a &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; value.&lt;/p&gt;&#10;          &lt;p&gt;&lt;code&gt;ownerDocument&lt;/code&gt; matches the &lt;code&gt;ownerDocument&lt;/code&gt; of the &#10;&#9;  &lt;code&gt;ownerElement&lt;/code&gt; even if the element is later adopted.&lt;/p&gt;&#10;          &lt;p&gt;&lt;code&gt;nodeName&lt;/code&gt; is always the string &quot;&lt;code&gt;#namespace&lt;/code&gt;&quot;.&lt;/p&gt;&#10;          &lt;p&gt;&lt;code&gt;prefix&lt;/code&gt; is the prefix of the namespace&#10;&#9;  represented by the node.&lt;/p&gt;&#10;          &lt;p&gt;&lt;code&gt;localName&lt;/code&gt; is the same as &lt;code&gt;prefix&lt;/code&gt;.&lt;/p&gt;&#10;          &lt;p&gt;&lt;code&gt;nodeType&lt;/code&gt; is equal to &lt;code&gt;XPATH_NAMESPACE_NODE&lt;/code&gt;.&lt;/p&gt;&#10;          &lt;p&gt;&lt;code&gt;namespaceURI&lt;/code&gt; is the namespace URI of the namespace&#10;&#9;  represented by the node.&lt;/p&gt;&#10;          &lt;p&gt;&lt;code&gt;nodeValue&lt;/code&gt; is the same as &lt;code&gt;namespaceURI&lt;/code&gt;.&lt;/p&gt;&#10;          &lt;p&gt;&lt;code&gt;adoptNode&lt;/code&gt;, &lt;code&gt;cloneNode&lt;/code&gt;, and &#10;          &lt;code&gt;importNode&lt;/code&gt; fail on this node type by raising a&#10;          &lt;code&gt;DOMException&lt;/code&gt; with the code &lt;code&gt;NOT_SUPPORTED_ERR&lt;/code&gt;.&lt;/p&gt;&#10;&#9;  &lt;note&gt;&#10;&#9;    &lt;p&gt;In future versions of the XPath specification, the definition of a &#10;          namespace node may be changed incomatibly, in which case incompatible &#10;          changes to field values may be required to implement versions beyond&#10;          XPath 1.0.&lt;/p&gt;&#10;&#9;  &lt;/note&gt;&#10;&#9;" parent_id="Node">
    <methods/>
    <properties>
      <property name="ownerElement" id="ownerElement" type="Element" description="&#10;&#9;    &lt;p&gt;The &lt;code&gt;Element&lt;/code&gt; on which the namespace was in scope&#10;&#9;    when it was requested.  This does not change on a returned&#10;&#9;      namespace node&#10;&#9;    even if the document changes such that the namespace goes out of&#10;&#9;    scope on that &lt;termref def=&quot;dt-element&quot;&gt;element&lt;/termref&gt; and this&#10;              node is no longer found there by XPath.&lt;/p&gt;&#10;&#9;  " readonly="true" owner_id="XPathNamespace"/>
    </properties>
  </interface>
</interfaces>
