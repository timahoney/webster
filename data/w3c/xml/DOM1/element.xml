<?xml version="1.0" encoding="UTF-8"?>
<!-- $Date: 1998/09/08 07:59:23 $ $Revision: 1.21 $ -->
<!--[ Element object description ]-->
<interface name="Element" inherits="Node" id="ID-745549614">
  <descr><p>By far the vast majority of objects (apart from text)
      that authors encounter when traversing a document
      are <code>Element</code> nodes.  
      Assume the following XML document:
<eg role="code">
&lt;elementExample id=&quot;demo&quot;&gt;
  &lt;subelement1/&gt;
  &lt;subelement2&gt;&lt;subsubelement/&gt;&lt;/subelement2&gt;
&lt;/elementExample&gt;  
</eg>
    </p>
    <p>When represented using DOM, the top node is an <code>Element</code> node
      for &quot;elementExample&quot;, which contains two child <code>Element</code>
      nodes, one for &quot;subelement1&quot; and one
      for &quot;subelement2&quot;. &quot;subelement1&quot; contains no
      child nodes.</p>

    <p>Elements may have attributes associated with them; since the
    <code>Element</code> interface inherits from <code>Node</code>, the generic
    <code>Node</code> interface method <code>getAttributes</code> may be used
    to retrieve the set of all attributes for an element.  There are methods on
    the <code>Element</code> interface to retrieve either an <code>Attr</code>
    object by name or an attribute value by name. In XML, where an attribute
    value may contain entity references, an <code>Attr</code> object should be
    retrieved to examine the possibly fairly complex sub-tree representing the
    attribute value. On the other hand, in HTML, where all attributes have
    simple string values, methods to directly access an attribute value can
    safely be used as a convenience.</p>
    </descr>


  <attribute type="DOMString" name="tagName" readonly="yes" id="ID-104682815">
    <descr><p>The name of the element. For example, in:  
<eg role="code">
&lt;elementExample id=&quot;demo&quot;&gt; 
        ... 
&lt;/elementExample&gt; ,
</eg>
     <code>tagName</code> has the value
     <code>&quot;elementExample&quot;</code>. Note that this is
     case-preserving in XML, as are all of the operations of the DOM.
     The HTML DOM returns the <code>tagName</code> of an HTML element
     in the canonical uppercase form, regardless of the case in the 
     source HTML document. </p>
    </descr>
  </attribute>

  <method name="getAttribute" id="ID-666EE0F9">
    <descr><p>Retrieves an attribute value by name.</p></descr>
    <parameters>
      <param name="name" type="DOMString" attr="in">
	<descr><p>The name of the attribute to retrieve.</p></descr>
      </param>
    </parameters>
    <returns type="DOMString">
      <descr><p>The <code>Attr</code> value as a string, or the empty 
	string if that attribute does not have a specified or default value.</p></descr>
    </returns>
    <raises>
      <!-- No exceptions -->
    </raises>
  </method>
  <method name="setAttribute" id="ID-F68F082">
    <descr><p>Adds a new attribute. If an attribute with that name is already
      present in the element, its value is changed to be that of the value
      parameter. This value is a simple string, it is not parsed as it is being
      set. So any markup (such as syntax to be recognized as an entity
      reference) is treated as literal text, and needs to be appropriately
      escaped by the implementation when it is written out. In order to assign
      an attribute value that contains entity references, the user must create
      an <code>Attr</code> node plus any <code>Text</code> and
      <code>EntityReference</code> nodes, build the appropriate subtree, and
      use <code>setAttributeNode</code> to assign it as the value of an
      attribute.</p>
    </descr>
    <parameters>
      <param name="name" type="DOMString" attr="in">
	<descr><p>The name of the attribute to create or alter.</p></descr>
      </param>
      <param name="value" type="DOMString" attr="in">
	<descr><p>Value to set in string form.</p></descr>
      </param>
    </parameters>
    <returns type="void">
        <descr><p></p></descr>      
    </returns>
    <raises>
      <exception name="DOMException">
        <descr><p>INVALID_CHARACTER_ERR: Raised if the specified name contains
	an invalid character.</p>
	<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</p>
	</descr>
      </exception>
    </raises>
  </method>
  <method name="removeAttribute" id="ID-6D6AC0F9">
    <descr><p>Removes an attribute by name. If the removed attribute
	has a default value it is immediately replaced.</p> 
    </descr>
    <parameters>
      <param name="name" type="DOMString" attr="in">
	<descr><p>The name of the attribute to remove.</p></descr>
      </param>
    </parameters>
    <returns type="void">
        <descr><p></p></descr>
    </returns>
    <raises>
      <exception name="DOMException">
        <descr><p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is
	readonly.</p>
	</descr>
      </exception>
    </raises>
  </method>
  <method name="getAttributeNode" id="ID-217A91B8">
    <descr><p>Retrieves an <code>Attr</code> node by name.</p></descr>
    <parameters>
      <param name="name" type="DOMString" attr="in">
	<descr><p>The name of the attribute to retrieve.</p></descr>
      </param>
    </parameters>
    <returns type="Attr">
      <descr><p>The <code>Attr</code> node with the specified attribute
	  name or <code>null</code> if there is no such attribute.</p></descr> 
    </returns>
    <raises>
      <!-- No exceptions -->
    </raises>
  </method>
  <method name="setAttributeNode" id="ID-887236154">
    <descr><p>Adds a new attribute. If an attribute with that
	name is already present in the element, it is replaced
	by the new one.</p>
    </descr>
    <parameters>
      <param name="newAttr" type="Attr" attr="in">
	<descr><p>The <code>Attr</code> node to add to the attribute
	    list.</p></descr>
      </param>
    </parameters>
    <returns type="Attr">
         <descr><p>If the <code>newAttr</code> attribute replaces
	an existing attribute with the same name, the 
	previously existing <code>Attr</code> node is returned, otherwise
	<code>null</code> is returned.</p></descr>
    </returns>
    <raises>
      <exception name="DOMException">
        <descr><p>WRONG_DOCUMENT_ERR: Raised if <code>newAttr</code> was
	created from a different document than the one that created the
	element.</p>
        <p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</p>
	<p>INUSE_ATTRIBUTE_ERR: Raised if <code>newAttr</code> is already
	an attribute of another <code>Element</code> object. The
	DOM user must explicitly clone <code>Attr</code>
	nodes to re-use them in other elements.</p></descr>
      </exception>
    </raises>
  </method>
  <method name="removeAttributeNode" id="ID-D589198">
    <descr><p>Removes the specified attribute.</p>
    </descr>
    <parameters>
      <param name="oldAttr" type="Attr" attr="in">
	<descr><p>The <code>Attr</code> node to remove from the attribute
	list. If the removed <code>Attr</code> has a default value it is
	immediately replaced.</p></descr>
      </param>
    </parameters>
    <returns type="Attr">
      <descr><p>The <code>Attr</code> node that was removed.</p></descr>
    </returns>
    <raises>
      <exception name="DOMException">
        <descr><p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is
	readonly.</p>
        <p>NOT_FOUND_ERR: Raised if <code>oldAttr</code> is not an attribute of
	the element.</p>
	</descr>
      </exception>
    </raises>
  </method>
  <method name="getElementsByTagName" id="ID-1938918D">
    <descr><p>Returns a <code>NodeList</code> of all descendant elements with a
	given tag name, in the order in which they would be encountered in a
	preorder traversal of the <code>Element</code> tree.</p></descr>
    <parameters>
      <param name="name" type="DOMString" attr="in">
	<descr><p>The name of the tag to match on. The special value "*"
	    matches all tags.</p></descr>
      </param>
    </parameters>
    <returns type="NodeList">
      <descr><p>A list of matching <code>Element</code> nodes.</p></descr>
    </returns>
    <raises>
      <!-- No exceptions -->
    </raises>
  </method>
  <method name="normalize" id="ID-162CF083">
    <descr><p>Puts all <code>Text</code> nodes in the full depth of the
        sub-tree underneath this <code>Element</code> into a "normal" form
	where only markup (e.g., tags, comments, processing instructions, CDATA
	sections, and entity references) separates <code>Text</code> nodes,
	i.e., there are no adjacent <code>Text</code> nodes.  This can be used
	to ensure that the DOM view of a document is the same as if it were
	saved and re-loaded, and is useful when operations (such as XPointer
	lookups) that depend on a particular document tree structure are to be
	used.</p></descr>
    <parameters>
      <!-- No parameters -->
    </parameters>
    <returns type="void">
          <descr><p></p></descr>
    </returns>
    <raises>
      <!-- No exceptions -->
    </raises>
  </method>
</interface>
      
