<?xml version="1.0" encoding="UTF-8"?>
<!--[ DocumentFragment object description ]-->    
<!-- $Date: 1998/09/23 14:21:54 $ $Revision: 1.22 $ -->
<interface name="DocumentFragment" inherits="Node" id="ID-B63ED1A3">
  <descr><p><code>DocumentFragment</code> is a "lightweight" or
      "minimal" <code>Document</code> object. It is very common to want to be able to
      extract a portion of a document's tree or to create a new fragment of
      a document. Imagine implementing a user command like cut or
      rearranging a document by moving fragments around. It is
      desirable to have an object which can hold such fragments and it
      is quite natural to use a Node for this purpose. While it is
      true that a <code>Document</code> object could fulfil this role, 
      a <code>Document</code> object can potentially be a heavyweight 
      object, depending on the underlying implementation. What is really
      needed for this is a very lightweight object. 
      <code>DocumentFragment</code> is such an object.</p>
    <p>Furthermore, various operations -- such as inserting nodes as
      children of another <code>Node</code> -- may take
      <code>DocumentFragment</code> objects as arguments;  this
      results in all the child nodes of the <code>DocumentFragment</code> 
      being moved to the child list of this node.</p>
    <p>The children of a <code>DocumentFragment</code> node are zero
      or more nodes representing the tops of any sub-trees defining
      the structure of the document. <code>DocumentFragment</code> nodes do not
      need to be well-formed XML documents (although they do need to
      follow the rules imposed upon well-formed XML parsed entities,
      which can have multiple top nodes). 
      For example, a <code>DocumentFragment</code> might have only one child and
      that child node could be a <code>Text</code> node. Such a structure model 
      represents neither an HTML document nor a well-formed XML document. 
      </p>
    <p>When a <code>DocumentFragment</code> is inserted into a 
      <code>Document</code> (or indeed any other <code>Node</code> that may take children)
      the children of the <code>DocumentFragment</code> and not the <code>DocumentFragment</code> 
      itself are inserted into the <code>Node</code>. This makes the <code>DocumentFragment</code>
      very useful when the user wishes to create nodes that are siblings;
      the <code>DocumentFragment</code> acts as the parent of these nodes so that the
      user can use the standard methods from the <code>Node</code> 
      interface, such as <code>insertBefore()</code> and 
      <code>appendChild()</code>. 

      </p>
  </descr> 
</interface>

<!--[ Document object description ]-->    
<interface name="Document" inherits="Node" id="i-Document">
  <descr><p>The <code>Document</code> interface represents the entire
      HTML or XML document. Conceptually, it is the root of the
      document tree, and provides the  primary access to the
      document's data.</p>
    <p>Since elements, text nodes, comments, processing instructions,
      etc. cannot exist outside the context of a
      <code>Document</code>, the <code>Document</code> interface also
      contains the factory methods needed to create these objects. 
      The <code>Node</code> objects created have a <code>ownerDocument</code>
      attribute which associates them with the <code>Document</code> within whose 
      context they were created.</p>
  </descr>
  <attribute readonly="yes" name="doctype" type="DocumentType" id="ID-B63ED1A31">
    <descr><p>The Document Type Declaration (see <code>DocumentType</code>)
	associated with 
	this document. For HTML documents as well as XML documents without a
	document type declaration this returns <code>null</code>. The DOM Level
        1 does not support editing the Document Type Declaration, therefore
	<code>docType</code> cannot be altered in any way.</p>
    </descr> 
  </attribute>
  <attribute readonly="yes" name="implementation" type="DOMImplementation" id="ID-1B793EBA">
    <descr><p>The <code>DOMImplementation</code> object that handles this
	document. A DOM application may use objects from multiple 
        implementations.</p>
    </descr> 
  </attribute>
  
  <attribute readonly="yes" name="documentElement" type="Element" id="ID-87CD092">
    <descr><p>This is a convenience attribute that allows direct
	access to the child node that is the root element of  the
	document. For HTML documents, this is the element with
	the tagName "HTML".</p></descr> 
  </attribute>
  <!-- ********** -->
  <method name="createElement" id="ID-2141741547">
    <descr><p>Creates an element of the type specified. Note that the
	instance returned implements the <xtermref
	  href="ID-745549614">Element</xtermref> interface, so
	attributes can be specified directly  on the returned
	object.</p>
    </descr>
    <parameters>
      <param name="tagName" type="DOMString" attr="in">
	<descr><p>The name of the element type to
	    instantiate. For XML, this is case-sensitive. For HTML, the 
            <code>tagName</code> parameter may be provided in any case, 
            but it must be mapped to the canonical uppercase form by 
            the DOM implementation.
        </p></descr>
      </param>
    </parameters>
    <returns type="Element">
      <descr><p>A new <code>Element</code> object.</p></descr>
    </returns>
    <raises>
      <exception name="DOMException">
        <descr><p>INVALID_CHARACTER_ERR: Raised if the specified name contains
	an invalid character.</p></descr>
      </exception>
    </raises>
  </method>
  
  <!-- ********** -->
  <method name="createDocumentFragment" id="ID-35CB04B5">
    <descr><p>Creates an empty <code>DocumentFragment</code> object.
      </p></descr>
    <parameters>
      <!-- No parameters -->
    </parameters>
    <returns type="DocumentFragment">
      <descr><p>A new <code>DocumentFragment</code>.</p></descr>
    </returns>
    <raises>
      <!-- Throws no exceptions -->
    </raises>
  </method>

  <!-- ********** -->
  <method name="createTextNode" id="ID-1975348127">
    <descr><p>Creates a <code>Text</code> node given the specified
	string.</p></descr> 
    <parameters>
      <param name="data" type="DOMString" attr="in">
	<descr><p>The data for the node.</p></descr>
      </param>
    </parameters>
    <returns type="Text">
      <descr><p>The new <code>Text</code> object.</p></descr>
    </returns>
    <raises>
      <!-- Throws no exceptions -->
    </raises>
  </method>
  <!-- ********** -->
  <method name="createComment" id="ID-1334481328">
    <descr><p>Creates a <code>Comment</code> node given the specified
	string.</p></descr> 
    <parameters>
      <param name="data" type="DOMString" attr="in">
	<descr><p>The data for the node.</p></descr>
      </param>
    </parameters>
    <returns type="Comment">
      <descr><p>The new <code>Comment</code> object.</p></descr>
    </returns>
    <raises>
      <!-- Throws no exceptions -->
    </raises>
  </method>
  <!-- ********** -->
  <method name="createCDATASection" id="ID-D26C0AF8">
    <descr><p>Creates a <code>CDATASection</code> node whose value  is
	the specified string.</p></descr> 
    <parameters>
      <param name="data" type="DOMString" attr="in">
	<descr><p>The data for the <code>CDATASection</code> contents.</p></descr>
      </param>
    </parameters>
    <returns type="CDATASection">
      <descr><p>The new <code>CDATASection</code> object.</p></descr>
    </returns>
    <raises>
      <exception name="DOMException">
        <descr><p>NOT_SUPPORTED_ERR: Raised if this document is an HTML
	document.</p></descr>
      </exception>
    </raises>
  </method>
  <!-- ********** -->
  <method name="createProcessingInstruction" id="ID-135944439">
    <descr><p>Creates a <code>ProcessingInstruction</code> node given
	the specified name and data strings.</p></descr> 
    <parameters>
      <param name="target" type="DOMString" attr="in">
	<descr><p>The target part of the processing instruction.</p></descr>
      </param>
      <param name="data" type="DOMString" attr="in">
	<descr><p>The data for the node.</p></descr>
      </param>
    </parameters>
    <returns type="ProcessingInstruction">
      <descr><p>The new <code>ProcessingInstruction</code> object.</p></descr>
    </returns>
    <raises>
      <exception name="DOMException">
        <descr><p>INVALID_CHARACTER_ERR: Raised if an invalid character is specified.</p>
	<p>NOT_SUPPORTED_ERR: Raised if this document is an HTML document.</p></descr>
      </exception>
    </raises>
  </method>
  <!-- ********** -->
  <method name="createAttribute" id="ID-1084891198">
    <descr><p>Creates an <code>Attr</code> of the given name.
	Note that the <code>Attr</code> instance
	can then be set on an <code>Element</code> using the
	<code>setAttribute</code> method. </p>
    </descr>
    <parameters>
      <param name="name" type="DOMString" attr="in">
	<descr><p>The name of the attribute.</p></descr>
      </param>
    </parameters>
    <returns type="Attr">
      <descr><p>A new <code>Attr</code> object.</p></descr>
    </returns>
    <raises>
      <exception name="DOMException">
        <descr><p>INVALID_CHARACTER_ERR: Raised if the specified name contains
	an invalid character.</p></descr>
      </exception>
    </raises>
  </method>


  <method name="createEntityReference" id="ID-392B75AE">
    <descr><p>Creates an EntityReference object.</p></descr>
    <parameters>
      <param name="name" type="DOMString" attr="in">
	<descr><p>The name of the entity to reference. </p>
        </descr>
      </param>
    </parameters>
    <returns type="EntityReference">
      <descr><p>The new <code>EntityReference</code> object.</p></descr>
    </returns>
    <raises>
      <exception name="DOMException">
	<descr><p>INVALID_CHARACTER_ERR: Raised if the specified name contains
	an invalid character.</p>
	<p>NOT_SUPPORTED_ERR: Raised if this document is an HTML document. </p></descr>
      </exception>
    </raises>
  </method>

  <!-- ********** -->
  <method name="getElementsByTagName" id="ID-A6C9094">
    <descr><p>Returns a <code>NodeList</code> of all the <code>Element</code>s
	with a given tag name in the order in which they would be encountered
        in a preorder traversal of the <code>Document</code> tree.
      </p></descr>
    <parameters>
      <param name="tagname" type="DOMString" attr="in">
	<descr><p>The name of the tag to match on. The special value "*"
	    matches all tags.</p></descr>
      </param>
    </parameters>
    <returns type="NodeList">
      <descr><p>A new <code>NodeList</code> object containing
	  all the matched <code>Element</code>s.</p></descr>
    </returns>
    <raises>
      <!-- Throws no exceptions -->
    </raises>
  </method>
</interface>

