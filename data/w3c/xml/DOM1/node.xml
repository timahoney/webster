<?xml version="1.0" encoding="UTF-8"?>
<!-- $Date: 1998/10/01 10:15:17 $ $Revision: 1.29 $ -->
<!--[ Node object description ]-->
<interface name="Node" id="ID-1950641247">
  <descr><p>The <code>Node</code> interface is the primary datatype for the
      entire Document Object Model. It represents a single node in the
      document tree. While all objects implementing the
      <code>Node</code> interface expose methods for dealing with
      children, not all objects implementing the <code>Node</code>
      interface may have children. For example, <code>Text</code>
      nodes may not have children, and adding children to such nodes
      results in a <code>DOMException</code> being raised. 
      </p>
      <p>The attributes <code>nodeName</code>, <code>nodeValue</code> 
        and <code>attributes</code> are 
	included as a mechanism to get at node information without 
	casting down to the specific derived interface. In cases where 
	there is no obvious mapping of these attributes for a specific
	<code>nodeType</code> (e.g., <code>nodeValue</code> for an Element 
        or <code>attributes</code> 
	for a Comment), this returns <code>null</code>. Note that the 
	specialized interfaces may contain
	additional and more convenient mechanisms to get and set the relevant
	information.</p> 
</descr>
  <group id="ID-1841493061" name="NodeType">
    <descr><p>An integer indicating which type of node this is.</p></descr>
    <constant name="ELEMENT_NODE" type="unsigned short" value="1">
      <descr><p>The node is a <code>Element</code>.</p></descr>
    </constant>
    <constant name="ATTRIBUTE_NODE" type="unsigned short" value="2">
      <descr><p>The node is an <code>Attr</code>.</p></descr>
    </constant>
    <constant name="TEXT_NODE" type="unsigned short" value="3">
      <descr><p>The node is a <code>Text</code> node.</p></descr>
    </constant>
    <constant name="CDATA_SECTION_NODE" type="unsigned short" value="4">
      <descr><p>The node is a <code>CDATASection</code>.</p></descr>
    </constant>
    <constant name="ENTITY_REFERENCE_NODE" type="unsigned short" value="5">
      <descr><p>The node is an <code>EntityReference</code>.</p></descr>
    </constant>
    <constant name="ENTITY_NODE" type="unsigned short" value="6">
      <descr><p>The node is an <code>Entity</code>.</p></descr>
    </constant>
    <constant name="PROCESSING_INSTRUCTION_NODE" type="unsigned short" value="7">
      <descr><p>The node is a <code>ProcessingInstruction</code>.</p></descr>
    </constant>
    <constant name="COMMENT_NODE" type="unsigned short" value="8">
      <descr><p>The node is a <code>Comment</code>.</p></descr>
    </constant>
    <constant name="DOCUMENT_NODE" type="unsigned short" value="9">
      <descr><p>The node is a <code>Document</code>.</p></descr>
    </constant>
    <constant name="DOCUMENT_TYPE_NODE" type="unsigned short" value="10">
      <descr><p>The node is a <code>DocumentType</code>.</p></descr>
    </constant>
    <constant name="DOCUMENT_FRAGMENT_NODE" type="unsigned short" value="11">
      <descr><p>The node is a <code>DocumentFragment</code>.</p></descr>
    </constant>
    <constant name="NOTATION_NODE" type="unsigned short" value="12">
      <descr><p>The node is a <code>Notation</code>.</p></descr>
    </constant>
  </group>
  <p>The values of <code>nodeName</code>, <code>nodeValue</code>,
    and <code>attributes</code> vary according to the node type as follows:
    <table  border="1">
      <tbody>
	<tr>
	  <td></td>
	  <td>nodeName</td>
	  <td>nodeValue</td>
	  <td>attributes</td>
	</tr>
	<tr>
	  <td>Element</td>
	  <td>tagName</td>
	  <td>null</td>
	  <td>NamedNodeMap</td>
	</tr>
	<tr>
	  <td>Attr</td>
	  <td>name of attribute</td>
	  <td>value of attribute</td>
	  <td>null</td>
	</tr>
	<tr>
	  <td>Text</td>
	  <td>#text</td>
	  <td>content of the text node</td>
	  <td>null</td>
	</tr>
	<tr>
	  <td>CDATASection</td>
	  <td>#cdata-section</td>
	  <td>content of the CDATA Section</td>
	  <td>null</td>
	</tr>
	<tr>
	  <td>EntityReference</td>
	  <td>name of entity referenced</td>
	  <td>null</td>
	  <td>null</td>
        </tr>
	<tr>
	  <td>Entity</td>
	  <td>entity name</td>
	  <td>null</td>
	  <td>null</td>
	</tr>
	<tr>
	  <td>ProcessingInstruction</td>
	  <td>target</td>
	  <td>entire content excluding the target</td>
	  <td>null</td>
	</tr>
	<tr>
	  <td>Comment</td>
	  <td>#comment</td>
	  <td>content of the comment</td>
	  <td>null</td>
	</tr>
	<tr>
	  <td>Document</td>
	  <td>#document</td>
	  <td>null</td>
	  <td>null</td>
	</tr>
	<tr>
	  <td>DocumentType</td>
	  <td>document type name</td>
	  <td>null</td>
	  <td>null</td>
	</tr>
	<tr>
	  <td>DocumentFragment</td>
	  <td>#document-fragment</td>
	  <td>null</td>
	  <td>null</td>
	</tr>
	<tr>
	  <td>Notation</td>
	  <td>notation name</td>
	  <td>null</td>
	  <td>null</td>
	</tr>
      </tbody>
    </table>
  </p>
  <attribute type="DOMString" readonly="yes" name="nodeName" id="ID-F68D095">
    <descr>
      <p>The name of this node, depending on its type; see the table above.
      </p>
    </descr>
  </attribute>
  <attribute type="DOMString" name="nodeValue" id="ID-F68D080">
   <descr>
    <p>The value of this node, depending on its type; see the table above.</p>
   </descr>
    <setraises>
      <exception name="DOMException">
	<descr><p>NO_MODIFICATION_ALLOWED_ERR: Raised when the node is
	    readonly.</p></descr>
      </exception>
    </setraises>
    <getraises>
      <exception name="DOMException">
	<descr><p>DOMSTRING_SIZE_ERR: Raised when it would return more
	    characters than fit in a <code>DOMString</code> variable on the
	    implementation platform.</p></descr>
      </exception>
    </getraises>
  </attribute>
  <attribute type="unsigned short" name="nodeType" readonly="yes" id="ID-111237558">
    <descr><p>A code representing the type of the underlying object, as defined
	above.</p></descr> 
  </attribute>
  <attribute type="Node" readonly="yes" name="parentNode" id="ID-1060184317">
    <descr><p>The parent of this node. All nodes,
	except <code>Document</code>, <code>DocumentFragment</code>, and
        <code>Attr</code> may have a parent. However, if a
	node has just been created and not yet added to the tree, or if it has
        been removed from the tree, this is <code>null</code>.</p>
    </descr>
  </attribute>
  <attribute type="NodeList" readonly="yes" name="childNodes" id="ID-1451460987">
    <descr><p>A <code>NodeList</code> that contains all
	children of this node. If there are no children, this is a
	<code>NodeList</code> containing no nodes. The content of the
	returned <code>NodeList</code> is &quot;live&quot; in the
	sense that, for instance, changes to the children of the node object
	that it	was created from are immediately reflected in the nodes
	returned by the <code>NodeList</code> accessors; it is not a
	static snapshot of the content of the node. This is true for every
	<code>NodeList</code>, including the ones returned by the
	<code>getElementsByTagName</code> method.</p>
    </descr>
  </attribute>
<attribute readonly="yes" type="Node" name="firstChild" id="ID-169727388">
    <descr><p>The first child of this node. If there is no such
	node, this returns <code>null</code>.</p></descr>
  </attribute>
  <attribute readonly="yes" type="Node" name="lastChild" id="ID-61AD09FB">
    <descr><p>The last child of this node. If there is no such
	node, this returns <code>null</code>.</p></descr>
  </attribute>
  <attribute readonly="yes" type="Node" name="previousSibling" id="ID-640FB3C8">
    <descr><p>The node immediately preceding this node. If there is no
        such node, this returns <code>null</code>.</p></descr>
  </attribute>
  <attribute readonly="yes" type="Node" name="nextSibling" id="ID-6AC54C2F">
    <descr><p>The node immediately following this node. If there is no
        such node, this returns <code>null</code>.</p></descr>
  </attribute>
  <attribute readonly ="yes" type="NamedNodeMap" name="attributes" id="ID-84CF096">
    <descr><p>A <code>NamedNodeMap</code> containing the
	attributes of this node (if it is an <code>Element</code>) or
	<code>null</code> otherwise. </p></descr>
  </attribute>
  <attribute readonly ="yes" type="Document" name="ownerDocument" id="node-ownerDoc">
    <descr><p>The <code>Document</code> object associated with this node. This
	is also the <code>Document</code> object used to create new nodes. When
	this node is a <code>Document</code> this is <code>null</code>.</p></descr>
  </attribute>
  <method name="insertBefore" id="ID-952280727">
    <descr><p>Inserts the node <code>newChild</code> before the
	existing child node <code>refChild</code>. If
	<code>refChild</code> is <code>null</code>, insert
	<code>newChild</code> at the end of the list of children.</p>
        <p>If <code>newChild</code> is a <code>DocumentFragment</code>
        object, all of its children are inserted, in the same order, before
	<code>refChild</code>. If the <code>newChild</code> is already in the
	tree, it is first removed.</p></descr>
    <parameters>
      <param name="newChild" type="Node" attr="in">
	<descr><p>The node to insert.</p></descr>
      </param>
      <param name="refChild" type="Node" attr="in">
	<descr><p>The reference node, i.e., the node before which
	the new node must be inserted.</p></descr>
      </param>
    </parameters>
    <returns type="Node">
      <descr><p>The node being inserted.</p></descr>
    </returns>
    <raises>
      <exception name="DOMException">
	<descr><p>HIERARCHY_REQUEST_ERR: Raised if this node is of a type
	that does not allow children of the type of the <code>newChild</code>
	node, or if the node to insert is one of this node's ancestors.</p>
        <p>WRONG_DOCUMENT_ERR: Raised if <code>newChild</code> was created from
	a different document than the one that created this node.</p>
        <p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</p>
	<p>NOT_FOUND_ERR: Raised if <code>refChild</code> is not a child
	    of this node.</p></descr>
      </exception>
    </raises>
  </method>
  <method name="replaceChild" id="ID-785887307">
    <descr><p>Replaces the child node <code>oldChild</code> with
	<code>newChild</code> in the list of children, and returns the
	<code>oldChild</code> node. If the <code>newChild</code> is already in
	the tree, it is first removed.</p>
    </descr>
    <parameters>
      <param name="newChild" type="Node" attr="in">
	<descr><p>The new node to put in the child list.</p></descr>
      </param>
      <param name="oldChild" type="Node" attr="in">
	<descr><p>The node being replaced in the list.</p></descr>
      </param>
    </parameters>
    <returns type="Node">
      <descr><p>The node replaced.</p></descr>
    </returns>
    <raises>
      <exception name="DOMException">
	<descr><p>HIERARCHY_REQUEST_ERR: Raised if this node is of a type
	that does not allow children of the type of the <code>newChild</code>
	node, or it the node to put in is one of this node's ancestors.</p>
        <p>WRONG_DOCUMENT_ERR: Raised if <code>newChild</code> was created from
	a different document than the one that created this node.</p>
        <p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</p>
	<p>NOT_FOUND_ERR: Raised if <code>oldChild</code> is not a
	child of this node.</p></descr>
      </exception>
    </raises>
  </method>
  <method name="removeChild" id="ID-1734834066">
    <descr><p>Removes the child node indicated by <code>oldChild</code> from
	the list of children, and returns it.</p>
    </descr>
    <parameters>
      <param name="oldChild" type="Node" attr="in">
	<descr><p>The node being removed.</p></descr>
      </param>
    </parameters>
    <returns type="Node">
      <descr><p>The node removed.</p></descr>
    </returns>
    <raises>
      <exception name="DOMException">
        <descr><p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is
	readonly.</p>
	<p>NOT_FOUND_ERR: Raised if <code>oldChild</code> is not a child
	    of this node.</p></descr>
      </exception>
    </raises>
  </method>
  <method name="appendChild" id="ID-184E7107">
    <descr><p>Adds the node <code>newChild</code> to the end of the list of
	children of this node. If the <code>newChild</code> is already in the
	tree, it is first removed.</p>
    </descr>
    <parameters>
      <param name="newChild" type="Node" attr="in">
	<descr><p>The node to add.</p> <p>If it is a 
	<code>DocumentFragment</code>
        object, the entire contents of the document fragment are moved
	into the child list of this node</p></descr>
      </param>
    </parameters>
    <returns type="Node">
      <descr><p>The node added.</p></descr>
    </returns>
    <raises>
      <exception name="DOMException">
	<descr><p>HIERARCHY_REQUEST_ERR: Raised if this node is of a type
	that does not allow children of the type of the <code>newChild</code>
	node, or if the node to append is one of this node's ancestors.</p>
	<p>WRONG_DOCUMENT_ERR: Raised if <code>newChild</code> was created from
	a different document than the one that created this node.</p>
	<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</p>
	</descr>
      </exception>
    </raises>
  </method>
  <method name="hasChildNodes" id="ID-810594187">
    <descr><p> This is a convenience method to allow easy determination
	of whether a node has any children.</p>
    </descr>
    <parameters>
      <!-- No parameters -->
    </parameters>
    <returns type="boolean">
      <descr><p> <code>true</code> if the node has any children,
	<code>false</code> if the node has no children.</p></descr>
    </returns>
    <raises>
      <!-- No exceptions -->
    </raises>
  </method>
<method name="cloneNode" id="ID-3A0ED0A4">
    <descr><p>Returns a duplicate of this node, i.e., serves
	as a generic copy constructor for nodes. The duplicate node has no
	parent (<code>parentNode</code> returns <code>null</code>.).</p>
        <p>Cloning an <code>Element</code> copies
	all attributes and their values, including those generated by the 
	XML processor to represent defaulted attributes, but this method does
        not copy any text it contains unless it is a deep clone, since the text
        is contained in a child <code>Text</code> node. Cloning any other type of
	node simply returns a copy of this node. </p>
    </descr>
    <parameters>
      <param name="deep" type="boolean" attr="in">
	<descr><p>If <code>true</code>, recursively clone the subtree under the
	specified node; if <code>false</code>, clone only the node itself (and
	its attributes, if it is an <code>Element</code>). 
	</p></descr>
      </param>
    </parameters>
    <returns type="Node">
      <descr><p>The duplicate node.</p></descr>
    </returns>
    <raises>
      <!-- No exceptions -->
    </raises>
  </method>
</interface>
      
